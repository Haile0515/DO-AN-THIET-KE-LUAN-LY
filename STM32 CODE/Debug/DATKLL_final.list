
DATKLL_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000923c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009350  08009350  00019350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b4  080097b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080097b4  080097b4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097b4  080097b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001dc  08009998  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08009998  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016815  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c67  00000000  00000000  00036a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00039688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  0003a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f96  00000000  00000000  0003b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014332  00000000  00000000  0005563e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eab1  00000000  00000000  00069970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b4  00000000  00000000  000f8474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009334 	.word	0x08009334

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009334 	.word	0x08009334

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <DHT20_ReadData>:
	 }

	return HAL_OK;
}

HAL_StatusTypeDef DHT20_ReadData(DHT20_Data *data) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]

    HAL_StatusTypeDef status;

    uint8_t command[3] = {0xAC, 0x33, 0x00};
 80010d8:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <DHT20_ReadData+0xf0>)
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	4611      	mov	r1, r2
 80010e2:	8019      	strh	r1, [r3, #0]
 80010e4:	3302      	adds	r3, #2
 80010e6:	0c12      	lsrs	r2, r2, #16
 80010e8:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS, command, 3, 100);
 80010ea:	f107 0210 	add.w	r2, r7, #16
 80010ee:	2364      	movs	r3, #100	; 0x64
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2303      	movs	r3, #3
 80010f4:	2170      	movs	r1, #112	; 0x70
 80010f6:	4833      	ldr	r0, [pc, #204]	; (80011c4 <DHT20_ReadData+0xf4>)
 80010f8:	f001 ff60 	bl	8002fbc <HAL_I2C_Master_Transmit>
 80010fc:	4603      	mov	r3, r0
 80010fe:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <DHT20_ReadData+0x3a>
 8001106:	7ffb      	ldrb	r3, [r7, #31]
 8001108:	e055      	b.n	80011b6 <DHT20_ReadData+0xe6>

    HAL_Delay(80);
 800110a:	2050      	movs	r0, #80	; 0x50
 800110c:	f001 f8ba 	bl	8002284 <HAL_Delay>
    //chờ 80ms để cảm biến đo thành công

    uint8_t buffer_data[7];
    // Gửi lệnh yêu cầu đọc dữ liệu từ MASTER tới DHT20
    status = HAL_I2C_Master_Receive(&hi2c1, DHT20_ADDRESS, buffer_data, 7, 100);
 8001110:	f107 0208 	add.w	r2, r7, #8
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2307      	movs	r3, #7
 800111a:	2170      	movs	r1, #112	; 0x70
 800111c:	4829      	ldr	r0, [pc, #164]	; (80011c4 <DHT20_ReadData+0xf4>)
 800111e:	f002 f84b 	bl	80031b8 <HAL_I2C_Master_Receive>
 8001122:	4603      	mov	r3, r0
 8001124:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <DHT20_ReadData+0x60>
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	e042      	b.n	80011b6 <DHT20_ReadData+0xe6>

    // Bit[7] = 0 -> phép đo hoàn thành
    if ((buffer_data[0] & 0x80) != 0) return HAL_ERROR;
 8001130:	7a3b      	ldrb	r3, [r7, #8]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	da01      	bge.n	800113c <DHT20_ReadData+0x6c>
 8001138:	2301      	movs	r3, #1
 800113a:	e03c      	b.n	80011b6 <DHT20_ReadData+0xe6>

    // Độ ẩm : byte1 + byte2 + 4bit cao của byte3 (20-bit)
    // Nhiệt độ : 4bit thấp của byte3 + byte4 + byte5 (20-bit)
    uint32_t humidity_bit = ((buffer_data[1] << 16) | (buffer_data[2] << 8) | buffer_data[3]) >> 4;
 800113c:	7a7b      	ldrb	r3, [r7, #9]
 800113e:	041a      	lsls	r2, r3, #16
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4313      	orrs	r3, r2
 8001146:	7afa      	ldrb	r2, [r7, #11]
 8001148:	4313      	orrs	r3, r2
 800114a:	111b      	asrs	r3, r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
    uint32_t temperature_bit = ((buffer_data[3] & 0x0F) << 16) | (buffer_data[4] << 8) | buffer_data[5];
 800114e:	7afb      	ldrb	r3, [r7, #11]
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	4313      	orrs	r3, r2
 800115c:	7b7a      	ldrb	r2, [r7, #13]
 800115e:	4313      	orrs	r3, r2
 8001160:	617b      	str	r3, [r7, #20]

    data->Humidity = ((float)humidity_bit * 100) / 1048576; //0 -> 1048576 (giá trị tối đa của 20 bit)
 8001162:	69b8      	ldr	r0, [r7, #24]
 8001164:	f7ff fd96 	bl	8000c94 <__aeabi_ui2f>
 8001168:	4603      	mov	r3, r0
 800116a:	4917      	ldr	r1, [pc, #92]	; (80011c8 <DHT20_ReadData+0xf8>)
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fde9 	bl	8000d44 <__aeabi_fmul>
 8001172:	4603      	mov	r3, r0
 8001174:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe97 	bl	8000eac <__aeabi_fdiv>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
    data->Temperature = ((float)temperature_bit * 200) / 1048576 - 50;
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff fd84 	bl	8000c94 <__aeabi_ui2f>
 800118c:	4603      	mov	r3, r0
 800118e:	490f      	ldr	r1, [pc, #60]	; (80011cc <DHT20_ReadData+0xfc>)
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fdd7 	bl	8000d44 <__aeabi_fmul>
 8001196:	4603      	mov	r3, r0
 8001198:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe85 	bl	8000eac <__aeabi_fdiv>
 80011a2:	4603      	mov	r3, r0
 80011a4:	490a      	ldr	r1, [pc, #40]	; (80011d0 <DHT20_ReadData+0x100>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fcc2 	bl	8000b30 <__aeabi_fsub>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	08009350 	.word	0x08009350
 80011c4:	20000350 	.word	0x20000350
 80011c8:	42c80000 	.word	0x42c80000
 80011cc:	43480000 	.word	0x43480000
 80011d0:	42480000 	.word	0x42480000
 80011d4:	00000000 	.word	0x00000000

080011d8 <fsm_run>:
#include <stdbool.h>

bool Fahrenheit = false;
uint32_t last_time = 0;

void fsm_run() {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
	switch(status) {
 80011de:	4ba0      	ldr	r3, [pc, #640]	; (8001460 <fsm_run+0x288>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	f200 812d 	bhi.w	8001442 <fsm_run+0x26a>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <fsm_run+0x18>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001205 	.word	0x08001205
 80011f4:	08001211 	.word	0x08001211
 80011f8:	0800122d 	.word	0x0800122d
 80011fc:	08001313 	.word	0x08001313
 8001200:	08001423 	.word	0x08001423
		case INIT:
			lcd_init();
 8001204:	f000 f9c8 	bl	8001598 <lcd_init>
			status = READ;
 8001208:	4b95      	ldr	r3, [pc, #596]	; (8001460 <fsm_run+0x288>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
			break;
 800120e:	e11c      	b.n	800144a <fsm_run+0x272>

		case READ:
			if (DHT20_ReadData(&dht20_sensor) == HAL_OK) {
 8001210:	4894      	ldr	r0, [pc, #592]	; (8001464 <fsm_run+0x28c>)
 8001212:	f7ff ff5d 	bl	80010d0 <DHT20_ReadData>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <fsm_run+0x4c>
				status = UPDATE;
 800121c:	4b90      	ldr	r3, [pc, #576]	; (8001460 <fsm_run+0x288>)
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
			} else {
				status = ERROR_READ;
			}
			break;
 8001222:	e112      	b.n	800144a <fsm_run+0x272>
				status = ERROR_READ;
 8001224:	4b8e      	ldr	r3, [pc, #568]	; (8001460 <fsm_run+0x288>)
 8001226:	2204      	movs	r2, #4
 8001228:	701a      	strb	r2, [r3, #0]
			break;
 800122a:	e10e      	b.n	800144a <fsm_run+0x272>

		case UPDATE:
			sprintf(temp, "TEMP: %.2f", dht20_sensor.Temperature);
 800122c:	4b8d      	ldr	r3, [pc, #564]	; (8001464 <fsm_run+0x28c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f8f9 	bl	8000428 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	498b      	ldr	r1, [pc, #556]	; (8001468 <fsm_run+0x290>)
 800123c:	488b      	ldr	r0, [pc, #556]	; (800146c <fsm_run+0x294>)
 800123e:	f005 fe41 	bl	8006ec4 <siprintf>
			sprintf(humd, "HUMI: %.2f", dht20_sensor.Humidity);
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <fsm_run+0x28c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8ee 	bl	8000428 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4987      	ldr	r1, [pc, #540]	; (8001470 <fsm_run+0x298>)
 8001252:	4888      	ldr	r0, [pc, #544]	; (8001474 <fsm_run+0x29c>)
 8001254:	f005 fe36 	bl	8006ec4 <siprintf>
			sprintf(BufferToESP32, "%s;%s\n", temp, humd);
 8001258:	4b86      	ldr	r3, [pc, #536]	; (8001474 <fsm_run+0x29c>)
 800125a:	4a84      	ldr	r2, [pc, #528]	; (800146c <fsm_run+0x294>)
 800125c:	4986      	ldr	r1, [pc, #536]	; (8001478 <fsm_run+0x2a0>)
 800125e:	4887      	ldr	r0, [pc, #540]	; (800147c <fsm_run+0x2a4>)
 8001260:	f005 fe30 	bl	8006ec4 <siprintf>
			UART_SendData(BufferToESP32); //send ESP32
 8001264:	4885      	ldr	r0, [pc, #532]	; (800147c <fsm_run+0x2a4>)
 8001266:	f000 f921 	bl	80014ac <UART_SendData>

			//update temperature
			if (dht20_sensor.Temperature != new_temp) {
 800126a:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <fsm_run+0x28c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a84      	ldr	r2, [pc, #528]	; (8001480 <fsm_run+0x2a8>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fef9 	bl	800106c <__aeabi_fcmpeq>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d11b      	bne.n	80012b8 <fsm_run+0xe0>
				lcd_goto_XY(1, 0);
 8001280:	2100      	movs	r1, #0
 8001282:	2001      	movs	r0, #1
 8001284:	f000 f9d2 	bl	800162c <lcd_goto_XY>
				lcd_send_string("TEMP: ");
 8001288:	487e      	ldr	r0, [pc, #504]	; (8001484 <fsm_run+0x2ac>)
 800128a:	f000 f9b3 	bl	80015f4 <lcd_send_string>
				char temp[8];
				sprintf(temp, "%.2f\xDF""C", dht20_sensor.Temperature); //xDF -> kí tự degree
 800128e:	4b75      	ldr	r3, [pc, #468]	; (8001464 <fsm_run+0x28c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8c8 	bl	8000428 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	f107 001c 	add.w	r0, r7, #28
 80012a0:	4979      	ldr	r1, [pc, #484]	; (8001488 <fsm_run+0x2b0>)
 80012a2:	f005 fe0f 	bl	8006ec4 <siprintf>
				lcd_send_string(temp);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f9a2 	bl	80015f4 <lcd_send_string>
				new_temp = dht20_sensor.Temperature;
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <fsm_run+0x28c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a72      	ldr	r2, [pc, #456]	; (8001480 <fsm_run+0x2a8>)
 80012b6:	6013      	str	r3, [r2, #0]
			}

			//update humidity
			if (dht20_sensor.Humidity != new_humd) {
 80012b8:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <fsm_run+0x28c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a73      	ldr	r2, [pc, #460]	; (800148c <fsm_run+0x2b4>)
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fed2 	bl	800106c <__aeabi_fcmpeq>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d11b      	bne.n	8001306 <fsm_run+0x12e>
				lcd_goto_XY(0, 0);
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 f9ab 	bl	800162c <lcd_goto_XY>
				lcd_send_string("HUMI: ");
 80012d6:	486e      	ldr	r0, [pc, #440]	; (8001490 <fsm_run+0x2b8>)
 80012d8:	f000 f98c 	bl	80015f4 <lcd_send_string>
				char humd[8];
				sprintf(humd, "%.2f%%", dht20_sensor.Humidity);
 80012dc:	4b61      	ldr	r3, [pc, #388]	; (8001464 <fsm_run+0x28c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f8a1 	bl	8000428 <__aeabi_f2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	f107 0014 	add.w	r0, r7, #20
 80012ee:	4969      	ldr	r1, [pc, #420]	; (8001494 <fsm_run+0x2bc>)
 80012f0:	f005 fde8 	bl	8006ec4 <siprintf>
				lcd_send_string(humd);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f97b 	bl	80015f4 <lcd_send_string>
				new_humd = dht20_sensor.Humidity;
 80012fe:	4b59      	ldr	r3, [pc, #356]	; (8001464 <fsm_run+0x28c>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a62      	ldr	r2, [pc, #392]	; (800148c <fsm_run+0x2b4>)
 8001304:	6013      	str	r3, [r2, #0]
			}

			Led_RGB_temp();
 8001306:	f000 fa11 	bl	800172c <Led_RGB_temp>

			status = CONVERT;
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <fsm_run+0x288>)
 800130c:	2203      	movs	r2, #3
 800130e:	701a      	strb	r2, [r3, #0]
			break;
 8001310:	e09b      	b.n	800144a <fsm_run+0x272>
		case CONVERT:
		    if (HAL_GetTick() - last_time >= 1000) {
 8001312:	f000 ffad 	bl	8002270 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <fsm_run+0x2c0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001322:	d355      	bcc.n	80013d0 <fsm_run+0x1f8>
		        lcd_goto_XY(1, 0);
 8001324:	2100      	movs	r1, #0
 8001326:	2001      	movs	r0, #1
 8001328:	f000 f980 	bl	800162c <lcd_goto_XY>
		        lcd_send_string("TEMP: ");
 800132c:	4855      	ldr	r0, [pc, #340]	; (8001484 <fsm_run+0x2ac>)
 800132e:	f000 f961 	bl	80015f4 <lcd_send_string>
		        char temp[8];

		        if (Fahrenheit) {
 8001332:	4b5a      	ldr	r3, [pc, #360]	; (800149c <fsm_run+0x2c4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d025      	beq.n	8001386 <fsm_run+0x1ae>
		            float temp_f = new_temp * 1.8 + 32;
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <fsm_run+0x2a8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f872 	bl	8000428 <__aeabi_f2d>
 8001344:	a344      	add	r3, pc, #272	; (adr r3, 8001458 <fsm_run+0x280>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f8c5 	bl	80004d8 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <fsm_run+0x2c8>)
 800135c:	f7fe ff06 	bl	800016c <__adddf3>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fb8e 	bl	8000a88 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
		            sprintf(temp, "%.2f\xDF""F", temp_f);
 8001370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001372:	f7ff f859 	bl	8000428 <__aeabi_f2d>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	f107 000c 	add.w	r0, r7, #12
 800137e:	4949      	ldr	r1, [pc, #292]	; (80014a4 <fsm_run+0x2cc>)
 8001380:	f005 fda0 	bl	8006ec4 <siprintf>
 8001384:	e00b      	b.n	800139e <fsm_run+0x1c6>
		        } else {
		            sprintf(temp, "%.2f\xDF""C", new_temp);
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <fsm_run+0x2a8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f84c 	bl	8000428 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	f107 000c 	add.w	r0, r7, #12
 8001398:	493b      	ldr	r1, [pc, #236]	; (8001488 <fsm_run+0x2b0>)
 800139a:	f005 fd93 	bl	8006ec4 <siprintf>
		        }

		        lcd_send_string(temp);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f926 	bl	80015f4 <lcd_send_string>
		        Fahrenheit = !Fahrenheit;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <fsm_run+0x2c4>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f083 0301 	eor.w	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <fsm_run+0x2c4>)
 80013c4:	701a      	strb	r2, [r3, #0]
		        last_time = HAL_GetTick();
 80013c6:	f000 ff53 	bl	8002270 <HAL_GetTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a32      	ldr	r2, [pc, #200]	; (8001498 <fsm_run+0x2c0>)
 80013ce:	6013      	str	r3, [r2, #0]
		    }

		    if (dht20_sensor.Humidity != new_humd) {
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <fsm_run+0x28c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a2d      	ldr	r2, [pc, #180]	; (800148c <fsm_run+0x2b4>)
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe46 	bl	800106c <__aeabi_fcmpeq>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d119      	bne.n	800141a <fsm_run+0x242>
		    	lcd_goto_XY(0, 0);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f91f 	bl	800162c <lcd_goto_XY>
		    	lcd_send_string("HUMI: ");
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <fsm_run+0x2b8>)
 80013f0:	f000 f900 	bl	80015f4 <lcd_send_string>
		    	char humd[8];
		    	sprintf(humd, "%.2f%%", dht20_sensor.Humidity);
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <fsm_run+0x28c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f815 	bl	8000428 <__aeabi_f2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	1d38      	adds	r0, r7, #4
 8001404:	4923      	ldr	r1, [pc, #140]	; (8001494 <fsm_run+0x2bc>)
 8001406:	f005 fd5d 	bl	8006ec4 <siprintf>
		    	lcd_send_string(humd);
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f8f1 	bl	80015f4 <lcd_send_string>
		    	new_humd = dht20_sensor.Humidity;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <fsm_run+0x28c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <fsm_run+0x2b4>)
 8001418:	6013      	str	r3, [r2, #0]
		    }
		    status = READ;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <fsm_run+0x288>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
		    break;
 8001420:	e013      	b.n	800144a <fsm_run+0x272>

		case ERROR_READ:
			lcd_goto_XY(1, 0);
 8001422:	2100      	movs	r1, #0
 8001424:	2001      	movs	r0, #1
 8001426:	f000 f901 	bl	800162c <lcd_goto_XY>
			lcd_send_string("READ ERROR!");
 800142a:	481f      	ldr	r0, [pc, #124]	; (80014a8 <fsm_run+0x2d0>)
 800142c:	f000 f8e2 	bl	80015f4 <lcd_send_string>

			HAL_Delay(1000);
 8001430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001434:	f000 ff26 	bl	8002284 <HAL_Delay>
			lcd_clear_display();
 8001438:	f000 f8f1 	bl	800161e <lcd_clear_display>
			status = READ;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <fsm_run+0x288>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
		default:
			status = INIT;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <fsm_run+0x288>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
			break;
 8001448:	bf00      	nop
	}
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	cccccccd 	.word	0xcccccccd
 800145c:	3ffccccc 	.word	0x3ffccccc
 8001460:	20000200 	.word	0x20000200
 8001464:	20000270 	.word	0x20000270
 8001468:	08009354 	.word	0x08009354
 800146c:	20000260 	.word	0x20000260
 8001470:	08009360 	.word	0x08009360
 8001474:	20000250 	.word	0x20000250
 8001478:	0800936c 	.word	0x0800936c
 800147c:	20000228 	.word	0x20000228
 8001480:	20000204 	.word	0x20000204
 8001484:	08009374 	.word	0x08009374
 8001488:	0800937c 	.word	0x0800937c
 800148c:	20000208 	.word	0x20000208
 8001490:	08009384 	.word	0x08009384
 8001494:	0800938c 	.word	0x0800938c
 8001498:	200001fc 	.word	0x200001fc
 800149c:	200001f8 	.word	0x200001f8
 80014a0:	40400000 	.word	0x40400000
 80014a4:	08009394 	.word	0x08009394
 80014a8:	0800939c 	.word	0x0800939c

080014ac <UART_SendData>:
uint16_t pwm_data[NUM_LEDS * 24 + 50];

float new_temp = 0.0; //biến lưu giá trị
float new_humd = 0.0;

HAL_StatusTypeDef UART_SendData(const char *data) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    return HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 1000);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe fe4b 	bl	8000150 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <UART_SendData+0x28>)
 80014c6:	f004 faa5 	bl	8005a14 <HAL_UART_Transmit>
 80014ca:	4603      	mov	r3, r0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000434 	.word	0x20000434

080014d8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f023 030f 	bic.w	r3, r3, #15
 80014e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f043 030c 	orr.w	r3, r3, #12
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	b2db      	uxtb	r3, r3
 8001502:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	f043 030c 	orr.w	r3, r3, #12
 800150a:	b2db      	uxtb	r3, r3
 800150c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	b2db      	uxtb	r3, r3
 8001516:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001518:	f107 0208 	add.w	r2, r7, #8
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2304      	movs	r3, #4
 8001522:	2142      	movs	r1, #66	; 0x42
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <lcd_send_cmd+0x5c>)
 8001526:	f001 fd49 	bl	8002fbc <HAL_I2C_Master_Transmit>
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000350 	.word	0x20000350

08001538 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f023 030f 	bic.w	r3, r3, #15
 8001548:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	f043 030d 	orr.w	r3, r3, #13
 8001556:	b2db      	uxtb	r3, r3
 8001558:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	f043 0309 	orr.w	r3, r3, #9
 8001560:	b2db      	uxtb	r3, r3
 8001562:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	f043 030d 	orr.w	r3, r3, #13
 800156a:	b2db      	uxtb	r3, r3
 800156c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800156e:	7bbb      	ldrb	r3, [r7, #14]
 8001570:	f043 0309 	orr.w	r3, r3, #9
 8001574:	b2db      	uxtb	r3, r3
 8001576:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2304      	movs	r3, #4
 8001582:	2142      	movs	r1, #66	; 0x42
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <lcd_send_data+0x5c>)
 8001586:	f001 fd19 	bl	8002fbc <HAL_I2C_Master_Transmit>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000350 	.word	0x20000350

08001598 <lcd_init>:

void lcd_init (void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800159c:	2033      	movs	r0, #51	; 0x33
 800159e:	f7ff ff9b 	bl	80014d8 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80015a2:	2032      	movs	r0, #50	; 0x32
 80015a4:	f7ff ff98 	bl	80014d8 <lcd_send_cmd>
	HAL_Delay(50);
 80015a8:	2032      	movs	r0, #50	; 0x32
 80015aa:	f000 fe6b 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80015ae:	2028      	movs	r0, #40	; 0x28
 80015b0:	f7ff ff92 	bl	80014d8 <lcd_send_cmd>
	HAL_Delay(50);
 80015b4:	2032      	movs	r0, #50	; 0x32
 80015b6:	f000 fe65 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff ff8c 	bl	80014d8 <lcd_send_cmd>
	HAL_Delay(50);
 80015c0:	2032      	movs	r0, #50	; 0x32
 80015c2:	f000 fe5f 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80015c6:	2006      	movs	r0, #6
 80015c8:	f7ff ff86 	bl	80014d8 <lcd_send_cmd>
	HAL_Delay(50);
 80015cc:	2032      	movs	r0, #50	; 0x32
 80015ce:	f000 fe59 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80015d2:	200c      	movs	r0, #12
 80015d4:	f7ff ff80 	bl	80014d8 <lcd_send_cmd>
	HAL_Delay(50);
 80015d8:	2032      	movs	r0, #50	; 0x32
 80015da:	f000 fe53 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80015de:	2002      	movs	r0, #2
 80015e0:	f7ff ff7a 	bl	80014d8 <lcd_send_cmd>
	HAL_Delay(50);
 80015e4:	2032      	movs	r0, #50	; 0x32
 80015e6:	f000 fe4d 	bl	8002284 <HAL_Delay>
	lcd_send_cmd (0x80);
 80015ea:	2080      	movs	r0, #128	; 0x80
 80015ec:	f7ff ff74 	bl	80014d8 <lcd_send_cmd>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80015fc:	e006      	b.n	800160c <lcd_send_string+0x18>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff96 	bl	8001538 <lcd_send_data>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f4      	bne.n	80015fe <lcd_send_string+0xa>
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff ff58 	bl	80014d8 <lcd_send_cmd>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b2db      	uxtb	r3, r3
 8001648:	337f      	adds	r3, #127	; 0x7f
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e008      	b.n	8001660 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3340      	adds	r3, #64	; 0x40
 8001654:	b2db      	uxtb	r3, r3
 8001656:	b25b      	sxtb	r3, r3
 8001658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800165c:	b25b      	sxtb	r3, r3
 800165e:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff38 	bl	80014d8 <lcd_send_cmd>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <WS2812_SetColor>:
 */

#include "led_rgb.h"

// Hàm ánh xạ dữ liệu màu sang PWM
void WS2812_SetColor(uint8_t red, uint8_t green, uint8_t blue) {
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	460b      	mov	r3, r1
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	4613      	mov	r3, r2
 8001680:	717b      	strb	r3, [r7, #5]
    uint32_t color = (green << 16) | (red << 8) | blue; // Dữ liệu GRB
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	431a      	orrs	r2, r3
 800168c:	797b      	ldrb	r3, [r7, #5]
 800168e:	4313      	orrs	r3, r2
 8001690:	60bb      	str	r3, [r7, #8]
    uint16_t idx = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	82fb      	strh	r3, [r7, #22]

    for (int i = 23; i >= 0; i--) {
 8001696:	2317      	movs	r3, #23
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e01c      	b.n	80016d6 <WS2812_SetColor+0x66>
        if (color & (1 << i)) {
 800169c:	2201      	movs	r2, #1
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <WS2812_SetColor+0x50>
            pwm_data[idx++] = 6; // T1H: 0.7 μs
 80016ae:	8afb      	ldrh	r3, [r7, #22]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	82fa      	strh	r2, [r7, #22]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <WS2812_SetColor+0x94>)
 80016b8:	2106      	movs	r1, #6
 80016ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80016be:	e007      	b.n	80016d0 <WS2812_SetColor+0x60>
        } else {
            pwm_data[idx++] = 3; // T0H: 0.35 μs
 80016c0:	8afb      	ldrh	r3, [r7, #22]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	82fa      	strh	r2, [r7, #22]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <WS2812_SetColor+0x94>)
 80016ca:	2103      	movs	r1, #3
 80016cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 23; i >= 0; i--) {
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dadf      	bge.n	800169c <WS2812_SetColor+0x2c>
        }
    }

    // Reset (50 μs, tối thiểu 40 khoảng trống)
    for (int i = idx; i < sizeof(pwm_data) / sizeof(uint16_t); i++) {
 80016dc:	8afb      	ldrh	r3, [r7, #22]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e007      	b.n	80016f2 <WS2812_SetColor+0x82>
        pwm_data[i] = 0;
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <WS2812_SetColor+0x94>)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2100      	movs	r1, #0
 80016e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = idx; i < sizeof(pwm_data) / sizeof(uint16_t); i++) {
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b49      	cmp	r3, #73	; 0x49
 80016f6:	d9f4      	bls.n	80016e2 <WS2812_SetColor+0x72>
    }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000278 	.word	0x20000278

08001708 <WS2812_Send>:

// Hàm gửi dữ liệu PWM
void WS2812_Send(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    // Bắt đầu PWM với DMA
    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwm_data, sizeof(pwm_data) / sizeof(uint16_t));
 800170c:	234a      	movs	r3, #74	; 0x4a
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <WS2812_Send+0x1c>)
 8001710:	2100      	movs	r1, #0
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <WS2812_Send+0x20>)
 8001714:	f003 f8ec 	bl	80048f0 <HAL_TIM_PWM_Start_DMA>

    // Chờ DMA hoàn tất
    HAL_Delay(1); // Đảm bảo hơn 50 μs reset
 8001718:	2001      	movs	r0, #1
 800171a:	f000 fdb3 	bl	8002284 <HAL_Delay>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000278 	.word	0x20000278
 8001728:	200003ec 	.word	0x200003ec

0800172c <Led_RGB_temp>:

void Led_RGB_temp(){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	if(new_temp < -20){
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <Led_RGB_temp+0xc4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	492f      	ldr	r1, [pc, #188]	; (80017f4 <Led_RGB_temp+0xc8>)
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fca2 	bl	8001080 <__aeabi_fcmplt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <Led_RGB_temp+0x26>
		WS2812_SetColor(0, 0, 255);
 8001742:	22ff      	movs	r2, #255	; 0xff
 8001744:	2100      	movs	r1, #0
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff ff92 	bl	8001670 <WS2812_SetColor>
		WS2812_Send();
 800174c:	f7ff ffdc 	bl	8001708 <WS2812_Send>
	}
	else{
		WS2812_SetColor(255, 0, 0);
		WS2812_Send();
	}
}
 8001750:	e04b      	b.n	80017ea <Led_RGB_temp+0xbe>
	else if(new_temp < 0){
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <Led_RGB_temp+0xc4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc90 	bl	8001080 <__aeabi_fcmplt>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <Led_RGB_temp+0x4a>
		WS2812_SetColor(0, 128, 128);
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff ff80 	bl	8001670 <WS2812_SetColor>
		WS2812_Send();
 8001770:	f7ff ffca 	bl	8001708 <WS2812_Send>
}
 8001774:	e039      	b.n	80017ea <Led_RGB_temp+0xbe>
	else if(new_temp < 20){
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <Led_RGB_temp+0xc4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	491f      	ldr	r1, [pc, #124]	; (80017f8 <Led_RGB_temp+0xcc>)
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fc7f 	bl	8001080 <__aeabi_fcmplt>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <Led_RGB_temp+0x6c>
		WS2812_SetColor(0, 255, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	21ff      	movs	r1, #255	; 0xff
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff ff6f 	bl	8001670 <WS2812_SetColor>
		WS2812_Send();
 8001792:	f7ff ffb9 	bl	8001708 <WS2812_Send>
}
 8001796:	e028      	b.n	80017ea <Led_RGB_temp+0xbe>
	else if(new_temp < 40){
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <Led_RGB_temp+0xc4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4917      	ldr	r1, [pc, #92]	; (80017fc <Led_RGB_temp+0xd0>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fc6e 	bl	8001080 <__aeabi_fcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <Led_RGB_temp+0x8e>
		WS2812_SetColor(85, 170, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	21aa      	movs	r1, #170	; 0xaa
 80017ae:	2055      	movs	r0, #85	; 0x55
 80017b0:	f7ff ff5e 	bl	8001670 <WS2812_SetColor>
		WS2812_Send();
 80017b4:	f7ff ffa8 	bl	8001708 <WS2812_Send>
}
 80017b8:	e017      	b.n	80017ea <Led_RGB_temp+0xbe>
	else if(new_temp < 60){
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <Led_RGB_temp+0xc4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4910      	ldr	r1, [pc, #64]	; (8001800 <Led_RGB_temp+0xd4>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fc5d 	bl	8001080 <__aeabi_fcmplt>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <Led_RGB_temp+0xb0>
		WS2812_SetColor(170, 85, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2155      	movs	r1, #85	; 0x55
 80017d0:	20aa      	movs	r0, #170	; 0xaa
 80017d2:	f7ff ff4d 	bl	8001670 <WS2812_SetColor>
		WS2812_Send();
 80017d6:	f7ff ff97 	bl	8001708 <WS2812_Send>
}
 80017da:	e006      	b.n	80017ea <Led_RGB_temp+0xbe>
		WS2812_SetColor(255, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	20ff      	movs	r0, #255	; 0xff
 80017e2:	f7ff ff45 	bl	8001670 <WS2812_SetColor>
		WS2812_Send();
 80017e6:	f7ff ff8f 	bl	8001708 <WS2812_Send>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000204 	.word	0x20000204
 80017f4:	c1a00000 	.word	0xc1a00000
 80017f8:	41a00000 	.word	0x41a00000
 80017fc:	42200000 	.word	0x42200000
 8001800:	42700000 	.word	0x42700000

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f000 fcda 	bl	80021c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f832 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f000 f9a6 	bl	8001b60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001814:	f000 f86a 	bl	80018ec <MX_I2C1_Init>
  MX_TIM2_Init();
 8001818:	f000 f896 	bl	8001948 <MX_TIM2_Init>
  MX_DMA_Init();
 800181c:	f000 f982 	bl	8001b24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001820:	f000 f956 	bl	8001ad0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001824:	f000 f906 	bl	8001a34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001828:	480f      	ldr	r0, [pc, #60]	; (8001868 <main+0x64>)
 800182a:	f002 ff15 	bl	8004658 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <main+0x68>)
 8001830:	f002 ff12 	bl	8004658 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001834:	2100      	movs	r1, #0
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <main+0x64>)
 8001838:	f002 ffb8 	bl	80047ac <HAL_TIM_PWM_Start>
  lcd_init();
 800183c:	f7ff feac 	bl	8001598 <lcd_init>
  lcd_clear_display();
 8001840:	f7ff feed 	bl	800161e <lcd_clear_display>
  HAL_Delay(1000);
 8001844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001848:	f000 fd1c 	bl	8002284 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer0(200);
 800184c:	20c8      	movs	r0, #200	; 0xc8
 800184e:	f000 f9c5 	bl	8001bdc <setTimer0>
  while (1)
  {
//	  lcd_clear_display();
	  if (timer_flag0 == 1) {
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <main+0x6c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d1fb      	bne.n	8001852 <main+0x4e>
		  fsm_run();
 800185a:	f7ff fcbd 	bl	80011d8 <fsm_run>
		  setTimer0(1000);
 800185e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001862:	f000 f9bb 	bl	8001bdc <setTimer0>
	  if (timer_flag0 == 1) {
 8001866:	e7f4      	b.n	8001852 <main+0x4e>
 8001868:	200003ec 	.word	0x200003ec
 800186c:	200003a4 	.word	0x200003a4
 8001870:	20000210 	.word	0x20000210

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	; 0x40
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2228      	movs	r2, #40	; 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f004 feb6 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189a:	2301      	movs	r3, #1
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189e:	2310      	movs	r3, #16
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fa76 	bl	8003d9c <HAL_RCC_OscConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80018b6:	f000 f98b 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ba:	230f      	movs	r3, #15
 80018bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fce2 	bl	800429c <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018de:	f000 f977 	bl	8001bd0 <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3740      	adds	r7, #64	; 0x40
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_I2C1_Init+0x50>)
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <MX_I2C1_Init+0x54>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_I2C1_Init+0x50>)
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <MX_I2C1_Init+0x58>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_I2C1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_I2C1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_I2C1_Init+0x50>)
 800190a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_I2C1_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_I2C1_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_I2C1_Init+0x50>)
 800192a:	f001 fa03 	bl	8002d34 <HAL_I2C_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001934:	f000 f94c 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000350 	.word	0x20000350
 8001940:	40005400 	.word	0x40005400
 8001944:	000186a0 	.word	0x000186a0

08001948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800197a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001982:	224f      	movs	r2, #79	; 0x4f
 8001984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800198e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a0:	4823      	ldr	r0, [pc, #140]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019a2:	f002 fe09 	bl	80045b8 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019ac:	f000 f910 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ba:	4619      	mov	r1, r3
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019be:	f003 faeb 	bl	8004f98 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019c8:	f000 f902 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019cc:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019ce:	f002 fe95 	bl	80046fc <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019d8:	f000 f8fa 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4619      	mov	r1, r3
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019ec:	f003 ff52 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019f6:	f000 f8eb 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 80019fe:	23c7      	movs	r3, #199	; 0xc7
 8001a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a12:	f003 f9ff 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a1c:	f000 f8d8 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a22:	f000 fa13 	bl	8001e4c <HAL_TIM_MspPostInit>

}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200003ec 	.word	0x200003ec

08001a34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <MX_TIM3_Init+0x98>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a58:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a66:	2209      	movs	r2, #9
 8001a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a78:	f002 fd9e 	bl	80045b8 <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a82:	f000 f8a5 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8c:	f107 0308 	add.w	r3, r7, #8
 8001a90:	4619      	mov	r1, r3
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001a94:	f003 fa80 	bl	8004f98 <HAL_TIM_ConfigClockSource>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a9e:	f000 f897 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_TIM3_Init+0x94>)
 8001ab0:	f003 fef0 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001aba:	f000 f889 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003a4 	.word	0x200003a4
 8001acc:	40000400 	.word	0x40000400

08001ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <MX_USART2_UART_Init+0x50>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b08:	f003 ff34 	bl	8005974 <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b12:	f000 f85d 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000434 	.word	0x20000434
 8001b20:	40004400 	.word	0x40004400

08001b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_DMA_Init+0x38>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <MX_DMA_Init+0x38>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6153      	str	r3, [r2, #20]
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_DMA_Init+0x38>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 fc97 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b4c:	200f      	movs	r0, #15
 8001b4e:	f000 fcb0 	bl	80024b2 <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6193      	str	r3, [r2, #24]
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <MX_GPIO_Init+0x58>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
//	SCH_Update();
	timer_run();
 8001bc4:	f000 f826 	bl	8001c14 <timer_run>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <setTimer0>:
#define TICK 10

int timer_counter0 = 0;
int timer_flag0 = 0;

void setTimer0(int duration){
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	timer_counter0 = duration/TICK;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <setTimer0+0x2c>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	1092      	asrs	r2, r2, #2
 8001bee:	17db      	asrs	r3, r3, #31
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <setTimer0+0x30>)
 8001bf4:	6013      	str	r3, [r2, #0]
	timer_flag0 = 0;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <setTimer0+0x34>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	66666667 	.word	0x66666667
 8001c0c:	2000020c 	.word	0x2000020c
 8001c10:	20000210 	.word	0x20000210

08001c14 <timer_run>:
void setTimer1(int duration){
	timer_counter1 = duration/TICK;
	timer_flag1 = 0;
}

void timer_run(){
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	if (timer_counter0 > 0) {
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <timer_run+0x4c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dd0b      	ble.n	8001c38 <timer_run+0x24>
		timer_counter0--;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <timer_run+0x4c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <timer_run+0x4c>)
 8001c28:	6013      	str	r3, [r2, #0]
		if (timer_counter0 <= 0) {
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <timer_run+0x4c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dc02      	bgt.n	8001c38 <timer_run+0x24>
			timer_flag0 = 1;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <timer_run+0x50>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer_counter1 > 0) {
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <timer_run+0x54>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dd0b      	ble.n	8001c58 <timer_run+0x44>
		timer_counter1--;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <timer_run+0x54>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <timer_run+0x54>)
 8001c48:	6013      	str	r3, [r2, #0]
		if (timer_counter1 <= 0) {
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <timer_run+0x54>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	dc02      	bgt.n	8001c58 <timer_run+0x44>
			timer_flag1 = 1;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <timer_run+0x58>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	2000020c 	.word	0x2000020c
 8001c64:	20000210 	.word	0x20000210
 8001c68:	20000214 	.word	0x20000214
 8001c6c:	20000218 	.word	0x20000218

08001c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_MspInit+0x6c>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_MspInit+0x6c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_MspInit+0x6c>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_MspInit+0x6c>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_MspInit+0x6c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_MspInit+0x6c>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2005      	movs	r0, #5
 8001cac:	f000 fbe5 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cb0:	2005      	movs	r0, #5
 8001cb2:	f000 fbfe 	bl	80024b2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_MspInit+0x70>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_MspInit+0x70>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_I2C_MspInit+0x90>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d132      	bne.n	8001d6a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_I2C_MspInit+0x94>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_I2C_MspInit+0x94>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_I2C_MspInit+0x94>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d22:	2312      	movs	r3, #18
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4812      	ldr	r0, [pc, #72]	; (8001d7c <HAL_I2C_MspInit+0x98>)
 8001d32:	f000 fe7b 	bl	8002a2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_I2C_MspInit+0x9c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_I2C_MspInit+0x9c>)
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_I2C_MspInit+0x94>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_I2C_MspInit+0x94>)
 8001d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_I2C_MspInit+0x94>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40005400 	.word	0x40005400
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010c00 	.word	0x40010c00
 8001d80:	40010000 	.word	0x40010000

08001d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d94:	d135      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_TIM_Base_MspInit+0xb8>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <HAL_TIM_Base_MspInit+0xb8>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_TIM_Base_MspInit+0xb8>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001db0:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <HAL_TIM_Base_MspInit+0xc0>)
 8001db2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001db6:	2210      	movs	r2, #16
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001dde:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001de2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001de4:	4816      	ldr	r0, [pc, #88]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001de6:	f000 fb7f 	bl	80024e8 <HAL_DMA_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001df0:	f7ff feee 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_TIM_Base_MspInit+0xbc>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e00:	e018      	b.n	8001e34 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_TIM_Base_MspInit+0xc4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d113      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_TIM_Base_MspInit+0xb8>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_TIM_Base_MspInit+0xb8>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	61d3      	str	r3, [r2, #28]
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_TIM_Base_MspInit+0xb8>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	201d      	movs	r0, #29
 8001e2a:	f000 fb26 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e2e:	201d      	movs	r0, #29
 8001e30:	f000 fb3f 	bl	80024b2 <HAL_NVIC_EnableIRQ>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	2000030c 	.word	0x2000030c
 8001e44:	40020058 	.word	0x40020058
 8001e48:	40000400 	.word	0x40000400

08001e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6a:	d117      	bne.n	8001e9c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_TIM_MspPostInit+0x58>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <HAL_TIM_MspPostInit+0x58>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_TIM_MspPostInit+0x58>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e84:	2301      	movs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4619      	mov	r1, r3
 8001e96:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <HAL_TIM_MspPostInit+0x5c>)
 8001e98:	f000 fdc8 	bl	8002a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010800 	.word	0x40010800

08001eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <HAL_UART_MspInit+0x98>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d137      	bne.n	8001f3c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_UART_MspInit+0x9c>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_UART_MspInit+0x9c>)
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	61d3      	str	r3, [r2, #28]
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_UART_MspInit+0x9c>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_UART_MspInit+0x9c>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_UART_MspInit+0x9c>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_UART_MspInit+0x9c>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001efc:	2304      	movs	r3, #4
 8001efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480f      	ldr	r0, [pc, #60]	; (8001f4c <HAL_UART_MspInit+0xa0>)
 8001f10:	f000 fd8c 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f14:	2308      	movs	r3, #8
 8001f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	4619      	mov	r1, r3
 8001f26:	4809      	ldr	r0, [pc, #36]	; (8001f4c <HAL_UART_MspInit+0xa0>)
 8001f28:	f000 fd80 	bl	8002a2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2026      	movs	r0, #38	; 0x26
 8001f32:	f000 faa2 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f36:	2026      	movs	r0, #38	; 0x26
 8001f38:	f000 fabb 	bl	80024b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40004400 	.word	0x40004400
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010800 	.word	0x40010800

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <NMI_Handler+0x4>

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler+0x4>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f96:	f000 f959 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
	...

08001fac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA1_Channel5_IRQHandler+0x10>)
 8001fb2:	f000 fc07 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000030c 	.word	0x2000030c

08001fc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <TIM3_IRQHandler+0x10>)
 8001fc6:	f002 fe35 	bl	8004c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200003a4 	.word	0x200003a4

08001fd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <USART2_IRQHandler+0x10>)
 8001fda:	f003 fda7 	bl	8005b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000434 	.word	0x20000434

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <_kill>:

int _kill(int pid, int sig)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002000:	f004 face 	bl	80065a0 <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	2216      	movs	r2, #22
 8002008:	601a      	str	r2, [r3, #0]
	return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_exit>:

void _exit (int status)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800201e:	f04f 31ff 	mov.w	r1, #4294967295
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffe7 	bl	8001ff6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002028:	e7fe      	b.n	8002028 <_exit+0x12>

0800202a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e00a      	b.n	8002052 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203c:	f3af 8000 	nop.w
 8002040:	4601      	mov	r1, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	60ba      	str	r2, [r7, #8]
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbf0      	blt.n	800203c <_read+0x12>
	}

return len;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e009      	b.n	800208a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	60ba      	str	r2, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	dbf1      	blt.n	8002076 <_write+0x12>
	}
	return len;
 8002092:	687b      	ldr	r3, [r7, #4]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_close>:

int _close(int file)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c2:	605a      	str	r2, [r3, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <_isatty>:

int _isatty(int file)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
	return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f004 fa38 	bl	80065a0 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20005000 	.word	0x20005000
 800215c:	00000400 	.word	0x00000400
 8002160:	2000021c 	.word	0x2000021c
 8002164:	20000490 	.word	0x20000490

08002168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002174:	f7ff fff8 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480b      	ldr	r0, [pc, #44]	; (80021a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800217a:	490c      	ldr	r1, [pc, #48]	; (80021ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002190:	4c09      	ldr	r4, [pc, #36]	; (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219e:	f004 fa05 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a2:	f7ff fb2f 	bl	8001804 <main>
  bx lr
 80021a6:	4770      	bx	lr
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021b0:	080097bc 	.word	0x080097bc
  ldr r2, =_sbss
 80021b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021b8:	20000490 	.word	0x20000490

080021bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC1_2_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_Init+0x28>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_Init+0x28>)
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 f947 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d6:	200f      	movs	r0, #15
 80021d8:	f000 f808 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021dc:	f7ff fd48 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022000 	.word	0x40022000

080021ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x54>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x58>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f95f 	bl	80024ce <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d80a      	bhi.n	8002236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f000 f927 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_InitTick+0x5c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000000 	.word	0x20000000
 8002244:	20000008 	.word	0x20000008
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x1c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x20>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <HAL_IncTick+0x20>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000008 	.word	0x20000008
 800226c:	2000047c 	.word	0x2000047c

08002270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <HAL_GetTick+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	2000047c 	.word	0x2000047c

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff fff0 	bl	8002270 <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffe0 	bl	8002270 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4906      	ldr	r1, [pc, #24]	; (8002364 <__NVIC_EnableIRQ+0x34>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff90 	bl	8002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff2d 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff42 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff90 	bl	80023bc <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5f 	bl	8002368 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff35 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffa2 	bl	8002420 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e043      	b.n	8002586 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_DMA_Init+0xa8>)
 8002506:	4413      	add	r3, r2
 8002508:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_DMA_Init+0xac>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	009a      	lsls	r2, r3, #2
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_DMA_Init+0xb0>)
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002532:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002536:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	bffdfff8 	.word	0xbffdfff8
 8002594:	cccccccd 	.word	0xcccccccd
 8002598:	40020000 	.word	0x40020000

0800259c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_DMA_Start_IT+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e04b      	b.n	8002654 <HAL_DMA_Start_IT+0xb8>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d13a      	bne.n	8002646 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f9eb 	bl	80029d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 020e 	orr.w	r2, r2, #14
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e00f      	b.n	8002634 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0204 	bic.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 020a 	orr.w	r2, r2, #10
 8002632:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e005      	b.n	8002652 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2204      	movs	r2, #4
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e020      	b.n	80026c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020e 	bic.w	r2, r2, #14
 8002694:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d005      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2204      	movs	r2, #4
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e051      	b.n	800279c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 020e 	bic.w	r2, r2, #14
 8002706:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_DMA_Abort_IT+0xd4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d029      	beq.n	8002776 <HAL_DMA_Abort_IT+0xa2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_DMA_Abort_IT+0xd8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d022      	beq.n	8002772 <HAL_DMA_Abort_IT+0x9e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_DMA_Abort_IT+0xdc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01a      	beq.n	800276c <HAL_DMA_Abort_IT+0x98>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_DMA_Abort_IT+0xe0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d012      	beq.n	8002766 <HAL_DMA_Abort_IT+0x92>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_DMA_Abort_IT+0xe4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00a      	beq.n	8002760 <HAL_DMA_Abort_IT+0x8c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_DMA_Abort_IT+0xe8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d102      	bne.n	800275a <HAL_DMA_Abort_IT+0x86>
 8002754:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002758:	e00e      	b.n	8002778 <HAL_DMA_Abort_IT+0xa4>
 800275a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800275e:	e00b      	b.n	8002778 <HAL_DMA_Abort_IT+0xa4>
 8002760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002764:	e008      	b.n	8002778 <HAL_DMA_Abort_IT+0xa4>
 8002766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276a:	e005      	b.n	8002778 <HAL_DMA_Abort_IT+0xa4>
 800276c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002770:	e002      	b.n	8002778 <HAL_DMA_Abort_IT+0xa4>
 8002772:	2310      	movs	r3, #16
 8002774:	e000      	b.n	8002778 <HAL_DMA_Abort_IT+0xa4>
 8002776:	2301      	movs	r3, #1
 8002778:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_DMA_Abort_IT+0xec>)
 800277a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
    } 
  }
  return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40020008 	.word	0x40020008
 80027ac:	4002001c 	.word	0x4002001c
 80027b0:	40020030 	.word	0x40020030
 80027b4:	40020044 	.word	0x40020044
 80027b8:	40020058 	.word	0x40020058
 80027bc:	4002006c 	.word	0x4002006c
 80027c0:	40020000 	.word	0x40020000

080027c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2204      	movs	r2, #4
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d04f      	beq.n	800288c <HAL_DMA_IRQHandler+0xc8>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04a      	beq.n	800288c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a66      	ldr	r2, [pc, #408]	; (80029b4 <HAL_DMA_IRQHandler+0x1f0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d029      	beq.n	8002872 <HAL_DMA_IRQHandler+0xae>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a65      	ldr	r2, [pc, #404]	; (80029b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <HAL_DMA_IRQHandler+0xaa>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a63      	ldr	r2, [pc, #396]	; (80029bc <HAL_DMA_IRQHandler+0x1f8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01a      	beq.n	8002868 <HAL_DMA_IRQHandler+0xa4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a62      	ldr	r2, [pc, #392]	; (80029c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d012      	beq.n	8002862 <HAL_DMA_IRQHandler+0x9e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a60      	ldr	r2, [pc, #384]	; (80029c4 <HAL_DMA_IRQHandler+0x200>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00a      	beq.n	800285c <HAL_DMA_IRQHandler+0x98>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a5f      	ldr	r2, [pc, #380]	; (80029c8 <HAL_DMA_IRQHandler+0x204>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <HAL_DMA_IRQHandler+0x92>
 8002850:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002854:	e00e      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002856:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800285a:	e00b      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 800285c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002860:	e008      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002862:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002866:	e005      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286c:	e002      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 800286e:	2340      	movs	r3, #64	; 0x40
 8002870:	e000      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002872:	2304      	movs	r3, #4
 8002874:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_DMA_IRQHandler+0x208>)
 8002876:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8094 	beq.w	80029aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800288a:	e08e      	b.n	80029aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2202      	movs	r2, #2
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d056      	beq.n	800294a <HAL_DMA_IRQHandler+0x186>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d051      	beq.n	800294a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 020a 	bic.w	r2, r2, #10
 80028c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <HAL_DMA_IRQHandler+0x1f0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d029      	beq.n	800292a <HAL_DMA_IRQHandler+0x166>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a37      	ldr	r2, [pc, #220]	; (80029b8 <HAL_DMA_IRQHandler+0x1f4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_IRQHandler+0x162>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a35      	ldr	r2, [pc, #212]	; (80029bc <HAL_DMA_IRQHandler+0x1f8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01a      	beq.n	8002920 <HAL_DMA_IRQHandler+0x15c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_DMA_IRQHandler+0x1fc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d012      	beq.n	800291a <HAL_DMA_IRQHandler+0x156>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <HAL_DMA_IRQHandler+0x200>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x150>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_DMA_IRQHandler+0x204>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_DMA_IRQHandler+0x14a>
 8002908:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800290c:	e00e      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 800290e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002912:	e00b      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 8002914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002918:	e008      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 800291a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800291e:	e005      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 8002920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002924:	e002      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 8002926:	2320      	movs	r3, #32
 8002928:	e000      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 800292a:	2302      	movs	r3, #2
 800292c:	4a27      	ldr	r2, [pc, #156]	; (80029cc <HAL_DMA_IRQHandler+0x208>)
 800292e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d034      	beq.n	80029aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002948:	e02f      	b.n	80029aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2208      	movs	r2, #8
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d028      	beq.n	80029ac <HAL_DMA_IRQHandler+0x1e8>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d023      	beq.n	80029ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 020e 	bic.w	r2, r2, #14
 8002972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
    }
  }
  return;
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
}
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40020008 	.word	0x40020008
 80029b8:	4002001c 	.word	0x4002001c
 80029bc:	40020030 	.word	0x40020030
 80029c0:	40020044 	.word	0x40020044
 80029c4:	40020058 	.word	0x40020058
 80029c8:	4002006c 	.word	0x4002006c
 80029cc:	40020000 	.word	0x40020000

080029d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d108      	bne.n	8002a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a0e:	e007      	b.n	8002a20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b08b      	sub	sp, #44	; 0x2c
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e169      	b.n	8002d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a40:	2201      	movs	r2, #1
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8158 	bne.w	8002d0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a9a      	ldr	r2, [pc, #616]	; (8002ccc <HAL_GPIO_Init+0x2a0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d05e      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a68:	4a98      	ldr	r2, [pc, #608]	; (8002ccc <HAL_GPIO_Init+0x2a0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d875      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a6e:	4a98      	ldr	r2, [pc, #608]	; (8002cd0 <HAL_GPIO_Init+0x2a4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d058      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a74:	4a96      	ldr	r2, [pc, #600]	; (8002cd0 <HAL_GPIO_Init+0x2a4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d86f      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a7a:	4a96      	ldr	r2, [pc, #600]	; (8002cd4 <HAL_GPIO_Init+0x2a8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d052      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a80:	4a94      	ldr	r2, [pc, #592]	; (8002cd4 <HAL_GPIO_Init+0x2a8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d869      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a86:	4a94      	ldr	r2, [pc, #592]	; (8002cd8 <HAL_GPIO_Init+0x2ac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d04c      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a8c:	4a92      	ldr	r2, [pc, #584]	; (8002cd8 <HAL_GPIO_Init+0x2ac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d863      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a92:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d046      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a98:	4a90      	ldr	r2, [pc, #576]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d85d      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d82a      	bhi.n	8002af8 <HAL_GPIO_Init+0xcc>
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d859      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002aa6:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <HAL_GPIO_Init+0x80>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002b27 	.word	0x08002b27
 8002ab0:	08002b01 	.word	0x08002b01
 8002ab4:	08002b13 	.word	0x08002b13
 8002ab8:	08002b55 	.word	0x08002b55
 8002abc:	08002b5b 	.word	0x08002b5b
 8002ac0:	08002b5b 	.word	0x08002b5b
 8002ac4:	08002b5b 	.word	0x08002b5b
 8002ac8:	08002b5b 	.word	0x08002b5b
 8002acc:	08002b5b 	.word	0x08002b5b
 8002ad0:	08002b5b 	.word	0x08002b5b
 8002ad4:	08002b5b 	.word	0x08002b5b
 8002ad8:	08002b5b 	.word	0x08002b5b
 8002adc:	08002b5b 	.word	0x08002b5b
 8002ae0:	08002b5b 	.word	0x08002b5b
 8002ae4:	08002b5b 	.word	0x08002b5b
 8002ae8:	08002b5b 	.word	0x08002b5b
 8002aec:	08002b5b 	.word	0x08002b5b
 8002af0:	08002b09 	.word	0x08002b09
 8002af4:	08002b1d 	.word	0x08002b1d
 8002af8:	4a79      	ldr	r2, [pc, #484]	; (8002ce0 <HAL_GPIO_Init+0x2b4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002afe:	e02c      	b.n	8002b5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e029      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e024      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	3308      	adds	r3, #8
 8002b18:	623b      	str	r3, [r7, #32]
          break;
 8002b1a:	e01f      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	330c      	adds	r3, #12
 8002b22:	623b      	str	r3, [r7, #32]
          break;
 8002b24:	e01a      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	623b      	str	r3, [r7, #32]
          break;
 8002b32:	e013      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	611a      	str	r2, [r3, #16]
          break;
 8002b46:	e009      	b.n	8002b5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	615a      	str	r2, [r3, #20]
          break;
 8002b52:	e003      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
          break;
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          break;
 8002b5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2bff      	cmp	r3, #255	; 0xff
 8002b60:	d801      	bhi.n	8002b66 <HAL_GPIO_Init+0x13a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_Init+0x13e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d802      	bhi.n	8002b78 <HAL_GPIO_Init+0x14c>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x152>
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	3b08      	subs	r3, #8
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	210f      	movs	r1, #15
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80b1 	beq.w	8002d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc4:	4a48      	ldr	r2, [pc, #288]	; (8002ce8 <HAL_GPIO_Init+0x2bc>)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a40      	ldr	r2, [pc, #256]	; (8002cec <HAL_GPIO_Init+0x2c0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_GPIO_Init+0x1ec>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3f      	ldr	r2, [pc, #252]	; (8002cf0 <HAL_GPIO_Init+0x2c4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <HAL_GPIO_Init+0x1e8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3e      	ldr	r2, [pc, #248]	; (8002cf4 <HAL_GPIO_Init+0x2c8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <HAL_GPIO_Init+0x1e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	; (8002cf8 <HAL_GPIO_Init+0x2cc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_GPIO_Init+0x1e0>
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e006      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e004      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	f002 0203 	and.w	r2, r2, #3
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	4093      	lsls	r3, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2a:	492f      	ldr	r1, [pc, #188]	; (8002ce8 <HAL_GPIO_Init+0x2bc>)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c44:	4b2d      	ldr	r3, [pc, #180]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	492c      	ldr	r1, [pc, #176]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c52:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	4928      	ldr	r1, [pc, #160]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	4922      	ldr	r1, [pc, #136]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	491e      	ldr	r1, [pc, #120]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4918      	ldr	r1, [pc, #96]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4914      	ldr	r1, [pc, #80]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d021      	beq.n	8002d00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	490e      	ldr	r1, [pc, #56]	; (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e021      	b.n	8002d0e <HAL_GPIO_Init+0x2e2>
 8002cca:	bf00      	nop
 8002ccc:	10320000 	.word	0x10320000
 8002cd0:	10310000 	.word	0x10310000
 8002cd4:	10220000 	.word	0x10220000
 8002cd8:	10210000 	.word	0x10210000
 8002cdc:	10120000 	.word	0x10120000
 8002ce0:	10110000 	.word	0x10110000
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	40010c00 	.word	0x40010c00
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_GPIO_Init+0x304>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	4909      	ldr	r1, [pc, #36]	; (8002d30 <HAL_GPIO_Init+0x304>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	3301      	adds	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f47f ae8e 	bne.w	8002a40 <HAL_GPIO_Init+0x14>
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	372c      	adds	r7, #44	; 0x2c
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40010400 	.word	0x40010400

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e12b      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe ffc2 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d98:	f001 fbc8 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a81      	ldr	r2, [pc, #516]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d807      	bhi.n	8002db8 <HAL_I2C_Init+0x84>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a80      	ldr	r2, [pc, #512]	; (8002fac <HAL_I2C_Init+0x278>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e006      	b.n	8002dc6 <HAL_I2C_Init+0x92>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <HAL_I2C_Init+0x27c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0e7      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a78      	ldr	r2, [pc, #480]	; (8002fb4 <HAL_I2C_Init+0x280>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2C_Init+0xd4>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_I2C_Init+0xe8>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_I2C_Init+0x284>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	495c      	ldr	r1, [pc, #368]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	d819      	bhi.n	8002e70 <HAL_I2C_Init+0x13c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e50:	400b      	ands	r3, r1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_I2C_Init+0x138>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e59      	subs	r1, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6a:	e051      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e04f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_I2C_Init+0x168>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e012      	b.n	8002ec2 <HAL_I2C_Init+0x18e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	0099      	lsls	r1, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x196>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e022      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_I2C_Init+0x1bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e58      	subs	r0, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eee:	e00f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6809      	ldr	r1, [r1, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6911      	ldr	r1, [r2, #16]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68d2      	ldr	r2, [r2, #12]
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	000186a0 	.word	0x000186a0
 8002fac:	001e847f 	.word	0x001e847f
 8002fb0:	003d08ff 	.word	0x003d08ff
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	10624dd3 	.word	0x10624dd3

08002fbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff f94e 	bl	8002270 <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f040 80e0 	bne.w	80031a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	4970      	ldr	r1, [pc, #448]	; (80031b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fc9e 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0d3      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_Master_Transmit+0x50>
 8003008:	2302      	movs	r3, #2
 800300a:	e0cc      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d007      	beq.n	8003032 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2210      	movs	r2, #16
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	893a      	ldrh	r2, [r7, #8]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fb08 	bl	8003690 <I2C_MasterRequestWrite>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e08d      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030a0:	e066      	b.n	8003170 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fd5c 	bl	8003b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d107      	bne.n	80030ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06b      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d11b      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x188>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d017      	beq.n	8003144 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6a39      	ldr	r1, [r7, #32]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fd53 	bl	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b04      	cmp	r3, #4
 800315a:	d107      	bne.n	800316c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e01a      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d194      	bne.n	80030a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	00100002 	.word	0x00100002
 80031b4:	ffff0000 	.word	0xffff0000

080031b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	460b      	mov	r3, r1
 80031c6:	817b      	strh	r3, [r7, #10]
 80031c8:	4613      	mov	r3, r2
 80031ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff f84e 	bl	8002270 <HAL_GetTick>
 80031d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	f040 824b 	bne.w	800367a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2319      	movs	r3, #25
 80031ea:	2201      	movs	r2, #1
 80031ec:	497f      	ldr	r1, [pc, #508]	; (80033ec <HAL_I2C_Master_Receive+0x234>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fb9e 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	e23e      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_I2C_Master_Receive+0x54>
 8003208:	2302      	movs	r3, #2
 800320a:	e237      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d007      	beq.n	8003232 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2222      	movs	r2, #34	; 0x22
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2210      	movs	r2, #16
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	893a      	ldrh	r2, [r7, #8]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_I2C_Master_Receive+0x238>)
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003274:	8979      	ldrh	r1, [r7, #10]
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa8a 	bl	8003794 <I2C_MasterRequestRead>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1f8      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e1cc      	b.n	8003654 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11e      	bne.n	8003300 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032d2:	b672      	cpsid	i
}
 80032d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032fc:	b662      	cpsie	i
}
 80032fe:	e035      	b.n	800336c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	2b02      	cmp	r3, #2
 8003306:	d11e      	bne.n	8003346 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003316:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003318:	b672      	cpsid	i
}
 800331a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003342:	b662      	cpsie	i
}
 8003344:	e012      	b.n	800336c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800336c:	e172      	b.n	8003654 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b03      	cmp	r3, #3
 8003374:	f200 811f 	bhi.w	80035b6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b01      	cmp	r3, #1
 800337e:	d123      	bne.n	80033c8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fc7d 	bl	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e173      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c6:	e145      	b.n	8003654 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d152      	bne.n	8003476 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2200      	movs	r2, #0
 80033d8:	4906      	ldr	r1, [pc, #24]	; (80033f4 <HAL_I2C_Master_Receive+0x23c>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 faa8 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e148      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
 80033ea:	bf00      	nop
 80033ec:	00100002 	.word	0x00100002
 80033f0:	ffff0000 	.word	0xffff0000
 80033f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033f8:	b672      	cpsid	i
}
 80033fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800343e:	b662      	cpsie	i
}
 8003440:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003474:	e0ee      	b.n	8003654 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	2200      	movs	r2, #0
 800347e:	4981      	ldr	r1, [pc, #516]	; (8003684 <HAL_I2C_Master_Receive+0x4cc>)
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fa55 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0f5      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
}
 80034a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034d6:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_I2C_Master_Receive+0x4d0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	08db      	lsrs	r3, r3, #3
 80034dc:	4a6b      	ldr	r2, [pc, #428]	; (800368c <HAL_I2C_Master_Receive+0x4d4>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0a1a      	lsrs	r2, r3, #8
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00da      	lsls	r2, r3, #3
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d118      	bne.n	800352e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800351e:	b662      	cpsie	i
}
 8003520:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0a6      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d1d9      	bne.n	80034f0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800357e:	b662      	cpsie	i
}
 8003580:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035b4:	e04e      	b.n	8003654 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fb62 	bl	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e058      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d124      	bne.n	8003654 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b03      	cmp	r3, #3
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003620:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f ae88 	bne.w	800336e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00010004 	.word	0x00010004
 8003688:	20000000 	.word	0x20000000
 800368c:	14f8b589 	.word	0x14f8b589

08003690 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d006      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d003      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b8:	d108      	bne.n	80036cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e00b      	b.n	80036e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b12      	cmp	r3, #18
 80036d2:	d107      	bne.n	80036e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f91d 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370a:	d103      	bne.n	8003714 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e035      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003720:	d108      	bne.n	8003734 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e01b      	b.n	800376c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003734:	897b      	ldrh	r3, [r7, #10]
 8003736:	11db      	asrs	r3, r3, #7
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f063 030f 	orn	r3, r3, #15
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <I2C_MasterRequestWrite+0xfc>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f966 	bl	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e010      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <I2C_MasterRequestWrite+0x100>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f956 	bl	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	00010008 	.word	0x00010008
 8003790:	00010002 	.word	0x00010002

08003794 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	460b      	mov	r3, r1
 80037a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d006      	beq.n	80037ce <I2C_MasterRequestRead+0x3a>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d003      	beq.n	80037ce <I2C_MasterRequestRead+0x3a>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037cc:	d108      	bne.n	80037e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e00b      	b.n	80037f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2b11      	cmp	r3, #17
 80037e6:	d107      	bne.n	80037f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f893 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381e:	d103      	bne.n	8003828 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e079      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003834:	d108      	bne.n	8003848 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	e05f      	b.n	8003908 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	11db      	asrs	r3, r3, #7
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0306 	and.w	r3, r3, #6
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f063 030f 	orn	r3, r3, #15
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4930      	ldr	r1, [pc, #192]	; (8003928 <I2C_MasterRequestRead+0x194>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8dc 	bl	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e054      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4929      	ldr	r1, [pc, #164]	; (800392c <I2C_MasterRequestRead+0x198>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f8cc 	bl	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e044      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f831 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e2:	d103      	bne.n	80038ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e017      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038f0:	897b      	ldrh	r3, [r7, #10]
 80038f2:	11db      	asrs	r3, r3, #7
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0306 	and.w	r3, r3, #6
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f063 030e 	orn	r3, r3, #14
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <I2C_MasterRequestRead+0x198>)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f888 	bl	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	00010008 	.word	0x00010008
 800392c:	00010002 	.word	0x00010002

08003930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003940:	e048      	b.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d044      	beq.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fc91 	bl	8002270 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d139      	bne.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d10d      	bne.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x56>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	43da      	mvns	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	e00c      	b.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	43da      	mvns	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4013      	ands	r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d116      	bne.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e023      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	0c1b      	lsrs	r3, r3, #16
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d10d      	bne.n	80039fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	43da      	mvns	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	e00c      	b.n	8003a14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	43da      	mvns	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d093      	beq.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a32:	e071      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d123      	bne.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e067      	b.n	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d041      	beq.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a94:	f7fe fbec 	bl	8002270 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d136      	bne.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d10c      	bne.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e00b      	b.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e021      	b.n	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10c      	bne.n	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e00b      	b.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4013      	ands	r3, r2
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bf14      	ite	ne
 8003b4e:	2301      	movne	r3, #1
 8003b50:	2300      	moveq	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f af6d 	bne.w	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b70:	e034      	b.n	8003bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f8e3 	bl	8003d3e <I2C_IsAcknowledgeFailed>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e034      	b.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d028      	beq.n	8003bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fe fb71 	bl	8002270 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11d      	bne.n	8003bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d016      	beq.n	8003bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e007      	b.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d1c3      	bne.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c00:	e034      	b.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f89b 	bl	8003d3e <I2C_IsAcknowledgeFailed>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e034      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d028      	beq.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1a:	f7fe fb29 	bl	8002270 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d11d      	bne.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d016      	beq.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d1c3      	bne.n	8003c02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c90:	e049      	b.n	8003d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d119      	bne.n	8003cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0210 	mvn.w	r2, #16
 8003ca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e030      	b.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fe facc 	bl	8002270 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d11d      	bne.n	8003d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d016      	beq.n	8003d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e007      	b.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d1ae      	bne.n	8003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d11b      	bne.n	8003d8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e26c      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8087 	beq.w	8003eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dbc:	4b92      	ldr	r3, [pc, #584]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d00c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dc8:	4b8f      	ldr	r3, [pc, #572]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d112      	bne.n	8003dfa <HAL_RCC_OscConfig+0x5e>
 8003dd4:	4b8c      	ldr	r3, [pc, #560]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de2:	4b89      	ldr	r3, [pc, #548]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d06c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x12c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d168      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e246      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x76>
 8003e04:	4b80      	ldr	r3, [pc, #512]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7f      	ldr	r2, [pc, #508]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e02e      	b.n	8003e70 <HAL_RCC_OscConfig+0xd4>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b7b      	ldr	r3, [pc, #492]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a7a      	ldr	r2, [pc, #488]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b78      	ldr	r3, [pc, #480]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a77      	ldr	r2, [pc, #476]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xd4>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0xbc>
 8003e3e:	4b72      	ldr	r3, [pc, #456]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a71      	ldr	r2, [pc, #452]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6f      	ldr	r3, [pc, #444]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6e      	ldr	r2, [pc, #440]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xd4>
 8003e58:	4b6b      	ldr	r3, [pc, #428]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6a      	ldr	r2, [pc, #424]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a67      	ldr	r2, [pc, #412]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fe f9fa 	bl	8002270 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe f9f6 	bl	8002270 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1fa      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b5d      	ldr	r3, [pc, #372]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe4>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f9e6 	bl	8002270 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe f9e2 	bl	8002270 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1e6      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x10c>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ed6:	4b4c      	ldr	r3, [pc, #304]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ee2:	4b49      	ldr	r3, [pc, #292]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x18c>
 8003eee:	4b46      	ldr	r3, [pc, #280]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x176>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1ba      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4939      	ldr	r1, [pc, #228]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b36      	ldr	r3, [pc, #216]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fe f99b 	bl	8002270 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fe f997 	bl	8002270 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e19b      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4927      	ldr	r1, [pc, #156]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fe f97a 	bl	8002270 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fe f976 	bl	8002270 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e17a      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d03a      	beq.n	8004020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d019      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b17      	ldr	r3, [pc, #92]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb8:	f7fe f95a 	bl	8002270 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fe f956 	bl	8002270 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e15a      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f000 facc 	bl	800457c <RCC_Delay>
 8003fe4:	e01c      	b.n	8004020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fec:	f7fe f940 	bl	8002270 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff2:	e00f      	b.n	8004014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7fe f93c 	bl	8002270 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d908      	bls.n	8004014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e140      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	42420000 	.word	0x42420000
 8004010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	4b9e      	ldr	r3, [pc, #632]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e9      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a6 	beq.w	800417a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004032:	4b97      	ldr	r3, [pc, #604]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	4b94      	ldr	r3, [pc, #592]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	4a93      	ldr	r2, [pc, #588]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	61d3      	str	r3, [r2, #28]
 800404a:	4b91      	ldr	r3, [pc, #580]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b8e      	ldr	r3, [pc, #568]	; (8004294 <HAL_RCC_OscConfig+0x4f8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d118      	bne.n	8004098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b8b      	ldr	r3, [pc, #556]	; (8004294 <HAL_RCC_OscConfig+0x4f8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a8a      	ldr	r2, [pc, #552]	; (8004294 <HAL_RCC_OscConfig+0x4f8>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fe f8fd 	bl	8002270 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407a:	f7fe f8f9 	bl	8002270 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b64      	cmp	r3, #100	; 0x64
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0fd      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	4b81      	ldr	r3, [pc, #516]	; (8004294 <HAL_RCC_OscConfig+0x4f8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x312>
 80040a0:	4b7b      	ldr	r3, [pc, #492]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a7a      	ldr	r2, [pc, #488]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	e02d      	b.n	800410a <HAL_RCC_OscConfig+0x36e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x334>
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	4a75      	ldr	r2, [pc, #468]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6213      	str	r3, [r2, #32]
 80040c2:	4b73      	ldr	r3, [pc, #460]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	4a72      	ldr	r2, [pc, #456]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	6213      	str	r3, [r2, #32]
 80040ce:	e01c      	b.n	800410a <HAL_RCC_OscConfig+0x36e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d10c      	bne.n	80040f2 <HAL_RCC_OscConfig+0x356>
 80040d8:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4a6c      	ldr	r2, [pc, #432]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	6213      	str	r3, [r2, #32]
 80040e4:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4a69      	ldr	r2, [pc, #420]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6213      	str	r3, [r2, #32]
 80040f0:	e00b      	b.n	800410a <HAL_RCC_OscConfig+0x36e>
 80040f2:	4b67      	ldr	r3, [pc, #412]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4a66      	ldr	r2, [pc, #408]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	6213      	str	r3, [r2, #32]
 80040fe:	4b64      	ldr	r3, [pc, #400]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4a63      	ldr	r2, [pc, #396]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d015      	beq.n	800413e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004112:	f7fe f8ad 	bl	8002270 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fe f8a9 	bl	8002270 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0ab      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	4b57      	ldr	r3, [pc, #348]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ee      	beq.n	800411a <HAL_RCC_OscConfig+0x37e>
 800413c:	e014      	b.n	8004168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413e:	f7fe f897 	bl	8002270 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	e00a      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fe f893 	bl	8002270 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e095      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415c:	4b4c      	ldr	r3, [pc, #304]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ee      	bne.n	8004146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d105      	bne.n	800417a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416e:	4b48      	ldr	r3, [pc, #288]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	4a47      	ldr	r2, [pc, #284]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 8081 	beq.w	8004286 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004184:	4b42      	ldr	r3, [pc, #264]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d061      	beq.n	8004254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d146      	bne.n	8004226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004198:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <HAL_RCC_OscConfig+0x4fc>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419e:	f7fe f867 	bl	8002270 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a6:	f7fe f863 	bl	8002270 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e067      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b8:	4b35      	ldr	r3, [pc, #212]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d108      	bne.n	80041e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041ce:	4b30      	ldr	r3, [pc, #192]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	492d      	ldr	r1, [pc, #180]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e0:	4b2b      	ldr	r3, [pc, #172]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a19      	ldr	r1, [r3, #32]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	430b      	orrs	r3, r1
 80041f2:	4927      	ldr	r1, [pc, #156]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_OscConfig+0x4fc>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fe f837 	bl	8002270 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004206:	f7fe f833 	bl	8002270 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e037      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x46a>
 8004224:	e02f      	b.n	8004286 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0x4fc>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fe f820 	bl	8002270 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fe f81c 	bl	8002270 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e020      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x498>
 8004252:	e018      	b.n	8004286 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e013      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_OscConfig+0x4f4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	429a      	cmp	r2, r3
 8004272:	d106      	bne.n	8004282 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d001      	beq.n	8004286 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40021000 	.word	0x40021000
 8004294:	40007000 	.word	0x40007000
 8004298:	42420060 	.word	0x42420060

0800429c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0d0      	b.n	8004452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b0:	4b6a      	ldr	r3, [pc, #424]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d910      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b67      	ldr	r3, [pc, #412]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	4965      	ldr	r1, [pc, #404]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b63      	ldr	r3, [pc, #396]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0b8      	b.n	8004452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d020      	beq.n	800432e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f8:	4b59      	ldr	r3, [pc, #356]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4a58      	ldr	r2, [pc, #352]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004310:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a52      	ldr	r2, [pc, #328]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800431a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431c:	4b50      	ldr	r3, [pc, #320]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	494d      	ldr	r1, [pc, #308]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d040      	beq.n	80043bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d115      	bne.n	800437a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e07f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d107      	bne.n	800436a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435a:	4b41      	ldr	r3, [pc, #260]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e073      	b.n	8004452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436a:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e06b      	b.n	8004452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800437a:	4b39      	ldr	r3, [pc, #228]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 0203 	bic.w	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4936      	ldr	r1, [pc, #216]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800438c:	f7fd ff70 	bl	8002270 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	e00a      	b.n	80043aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004394:	f7fd ff6c 	bl	8002270 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e053      	b.n	8004452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043aa:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 020c 	and.w	r2, r3, #12
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d1eb      	bne.n	8004394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043bc:	4b27      	ldr	r3, [pc, #156]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d210      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 0207 	bic.w	r2, r3, #7
 80043d2:	4922      	ldr	r1, [pc, #136]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e032      	b.n	8004452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4916      	ldr	r1, [pc, #88]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	490e      	ldr	r1, [pc, #56]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800442a:	f000 f821 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800442e:	4602      	mov	r2, r0
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	490a      	ldr	r1, [pc, #40]	; (8004464 <HAL_RCC_ClockConfig+0x1c8>)
 800443c:	5ccb      	ldrb	r3, [r1, r3]
 800443e:	fa22 f303 	lsr.w	r3, r2, r3
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x1cc>)
 8004444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_ClockConfig+0x1d0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fd fece 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40022000 	.word	0x40022000
 8004460:	40021000 	.word	0x40021000
 8004464:	080093a8 	.word	0x080093a8
 8004468:	20000000 	.word	0x20000000
 800446c:	20000004 	.word	0x20000004

08004470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_RCC_GetSysClockFreq+0x94>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b04      	cmp	r3, #4
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x30>
 800449a:	2b08      	cmp	r3, #8
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x36>
 800449e:	e027      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_RCC_GetSysClockFreq+0x98>)
 80044a2:	613b      	str	r3, [r7, #16]
      break;
 80044a4:	e027      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	0c9b      	lsrs	r3, r3, #18
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <HAL_RCC_GetSysClockFreq+0x9c>)
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
 80044b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d010      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <HAL_RCC_GetSysClockFreq+0x94>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0c5b      	lsrs	r3, r3, #17
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	4a11      	ldr	r2, [pc, #68]	; (8004510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a0d      	ldr	r2, [pc, #52]	; (8004508 <HAL_RCC_GetSysClockFreq+0x98>)
 80044d2:	fb02 f203 	mul.w	r2, r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e004      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	613b      	str	r3, [r7, #16]
      break;
 80044ee:	e002      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCC_GetSysClockFreq+0x98>)
 80044f2:	613b      	str	r3, [r7, #16]
      break;
 80044f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f6:	693b      	ldr	r3, [r7, #16]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	007a1200 	.word	0x007a1200
 800450c:	080093c0 	.word	0x080093c0
 8004510:	080093d0 	.word	0x080093d0
 8004514:	003d0900 	.word	0x003d0900

08004518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800451c:	4b02      	ldr	r3, [pc, #8]	; (8004528 <HAL_RCC_GetHCLKFreq+0x10>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	20000000 	.word	0x20000000

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004530:	f7ff fff2 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	080093b8 	.word	0x080093b8

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004558:	f7ff ffde 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	0adb      	lsrs	r3, r3, #11
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	080093b8 	.word	0x080093b8

0800457c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <RCC_Delay+0x34>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <RCC_Delay+0x38>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0a5b      	lsrs	r3, r3, #9
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004598:	bf00      	nop
  }
  while (Delay --);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1e5a      	subs	r2, r3, #1
 800459e:	60fa      	str	r2, [r7, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f9      	bne.n	8004598 <RCC_Delay+0x1c>
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	20000000 	.word	0x20000000
 80045b4:	10624dd3 	.word	0x10624dd3

080045b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e041      	b.n	800464e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd fbd0 	bl	8001d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 fe9c 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d001      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e03a      	b.n	80046e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_TIM_Base_Start_IT+0x98>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00e      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x58>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d009      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x58>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x58>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d111      	bne.n	80046d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d010      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	e007      	b.n	80046e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800

080046fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e041      	b.n	8004792 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f839 	bl	800479a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 fdfa 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start+0x24>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e022      	b.n	8004816 <HAL_TIM_PWM_Start+0x6a>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d109      	bne.n	80047ea <HAL_TIM_PWM_Start+0x3e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	bf14      	ite	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	2300      	moveq	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	e015      	b.n	8004816 <HAL_TIM_PWM_Start+0x6a>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d109      	bne.n	8004804 <HAL_TIM_PWM_Start+0x58>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e008      	b.n	8004816 <HAL_TIM_PWM_Start+0x6a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e05e      	b.n	80048dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0x82>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482c:	e013      	b.n	8004856 <HAL_TIM_PWM_Start+0xaa>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start+0x92>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483c:	e00b      	b.n	8004856 <HAL_TIM_PWM_Start+0xaa>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0xa2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484c:	e003      	b.n	8004856 <HAL_TIM_PWM_Start+0xaa>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fff4 	bl	800584c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_TIM_PWM_Start+0x138>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d107      	bne.n	800487e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_TIM_PWM_Start+0x138>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00e      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xfa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d009      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xfa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <HAL_TIM_PWM_Start+0x13c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xfa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a12      	ldr	r2, [pc, #72]	; (80048ec <HAL_TIM_PWM_Start+0x140>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d111      	bne.n	80048ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d010      	beq.n	80048da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	e007      	b.n	80048da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800

080048f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e022      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x72>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d109      	bne.n	8004936 <HAL_TIM_PWM_Start_DMA+0x46>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e015      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x72>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d109      	bne.n	8004950 <HAL_TIM_PWM_Start_DMA+0x60>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e008      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x72>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	e153      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_TIM_PWM_Start_DMA+0x94>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e022      	b.n	80049ca <HAL_TIM_PWM_Start_DMA+0xda>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b04      	cmp	r3, #4
 8004988:	d109      	bne.n	800499e <HAL_TIM_PWM_Start_DMA+0xae>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e015      	b.n	80049ca <HAL_TIM_PWM_Start_DMA+0xda>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d109      	bne.n	80049b8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e008      	b.n	80049ca <HAL_TIM_PWM_Start_DMA+0xda>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d024      	beq.n	8004a18 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_TIM_PWM_Start_DMA+0xea>
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e119      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Start_DMA+0xfe>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	e016      	b.n	8004a1c <HAL_TIM_PWM_Start_DMA+0x12c>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start_DMA+0x10e>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	e00e      	b.n	8004a1c <HAL_TIM_PWM_Start_DMA+0x12c>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	e006      	b.n	8004a1c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a16:	e001      	b.n	8004a1c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0fa      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x322>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	f200 80ae 	bhi.w	8004b80 <HAL_TIM_PWM_Start_DMA+0x290>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004b81 	.word	0x08004b81
 8004a34:	08004b81 	.word	0x08004b81
 8004a38:	08004b81 	.word	0x08004b81
 8004a3c:	08004aa9 	.word	0x08004aa9
 8004a40:	08004b81 	.word	0x08004b81
 8004a44:	08004b81 	.word	0x08004b81
 8004a48:	08004b81 	.word	0x08004b81
 8004a4c:	08004af1 	.word	0x08004af1
 8004a50:	08004b81 	.word	0x08004b81
 8004a54:	08004b81 	.word	0x08004b81
 8004a58:	08004b81 	.word	0x08004b81
 8004a5c:	08004b39 	.word	0x08004b39
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	4a6d      	ldr	r2, [pc, #436]	; (8004c1c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	4a6c      	ldr	r2, [pc, #432]	; (8004c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	4a6b      	ldr	r2, [pc, #428]	; (8004c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3334      	adds	r3, #52	; 0x34
 8004a84:	461a      	mov	r2, r3
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	f7fd fd88 	bl	800259c <HAL_DMA_Start_IT>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e0bd      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa4:	60da      	str	r2, [r3, #12]
      break;
 8004aa6:	e06e      	b.n	8004b86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	4a5b      	ldr	r2, [pc, #364]	; (8004c1c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	4a5a      	ldr	r2, [pc, #360]	; (8004c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004ab6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	4a59      	ldr	r2, [pc, #356]	; (8004c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3338      	adds	r3, #56	; 0x38
 8004acc:	461a      	mov	r2, r3
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	f7fd fd64 	bl	800259c <HAL_DMA_Start_IT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e099      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aec:	60da      	str	r2, [r3, #12]
      break;
 8004aee:	e04a      	b.n	8004b86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a49      	ldr	r2, [pc, #292]	; (8004c1c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a48      	ldr	r2, [pc, #288]	; (8004c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	4a47      	ldr	r2, [pc, #284]	; (8004c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	333c      	adds	r3, #60	; 0x3c
 8004b14:	461a      	mov	r2, r3
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	f7fd fd40 	bl	800259c <HAL_DMA_Start_IT>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e075      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b34:	60da      	str	r2, [r3, #12]
      break;
 8004b36:	e026      	b.n	8004b86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	4a37      	ldr	r2, [pc, #220]	; (8004c1c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	4a36      	ldr	r2, [pc, #216]	; (8004c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3340      	adds	r3, #64	; 0x40
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	f7fd fd1c 	bl	800259c <HAL_DMA_Start_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e051      	b.n	8004c12 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
      break;
 8004b84:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d141      	bne.n	8004c10 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fe59 	bl	800584c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d009      	beq.n	8004bdc <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d111      	bne.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d010      	beq.n	8004c10 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfe:	e007      	b.n	8004c10 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	08005225 	.word	0x08005225
 8004c20:	080052cd 	.word	0x080052cd
 8004c24:	08005193 	.word	0x08005193
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800

08004c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d020      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0202 	mvn.w	r2, #2
 8004c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa5a 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa4d 	bl	8005126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fa5c 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d020      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0204 	mvn.w	r2, #4
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa34 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa27 	bl	8005126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fa36 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0208 	mvn.w	r2, #8
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2204      	movs	r2, #4
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa0e 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa01 	bl	8005126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa10 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0210 	mvn.w	r2, #16
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2208      	movs	r2, #8
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f9e8 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f9db 	bl	8005126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9ea 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0201 	mvn.w	r2, #1
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fc ff0e 	bl	8001bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00c      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fdcf 	bl	8005962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f9c3 	bl	800516e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0220 	mvn.w	r2, #32
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fda2 	bl	8005950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0ae      	b.n	8004f90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	f200 809f 	bhi.w	8004f80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004f81 	.word	0x08004f81
 8004e50:	08004f81 	.word	0x08004f81
 8004e54:	08004f81 	.word	0x08004f81
 8004e58:	08004ebd 	.word	0x08004ebd
 8004e5c:	08004f81 	.word	0x08004f81
 8004e60:	08004f81 	.word	0x08004f81
 8004e64:	08004f81 	.word	0x08004f81
 8004e68:	08004eff 	.word	0x08004eff
 8004e6c:	08004f81 	.word	0x08004f81
 8004e70:	08004f81 	.word	0x08004f81
 8004e74:	08004f81 	.word	0x08004f81
 8004e78:	08004f3f 	.word	0x08004f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fac4 	bl	8005410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6999      	ldr	r1, [r3, #24]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	619a      	str	r2, [r3, #24]
      break;
 8004eba:	e064      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fb0a 	bl	80054dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6999      	ldr	r1, [r3, #24]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	619a      	str	r2, [r3, #24]
      break;
 8004efc:	e043      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fb53 	bl	80055b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0208 	orr.w	r2, r2, #8
 8004f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0204 	bic.w	r2, r2, #4
 8004f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69d9      	ldr	r1, [r3, #28]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
      break;
 8004f3c:	e023      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fb9d 	bl	8005684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69d9      	ldr	r1, [r3, #28]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	021a      	lsls	r2, r3, #8
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	61da      	str	r2, [r3, #28]
      break;
 8004f7e:	e002      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	75fb      	strb	r3, [r7, #23]
      break;
 8004f84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e0b4      	b.n	800511e <HAL_TIM_ConfigClockSource+0x186>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fec:	d03e      	beq.n	800506c <HAL_TIM_ConfigClockSource+0xd4>
 8004fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff2:	f200 8087 	bhi.w	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	f000 8086 	beq.w	800510a <HAL_TIM_ConfigClockSource+0x172>
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d87f      	bhi.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 8005004:	2b70      	cmp	r3, #112	; 0x70
 8005006:	d01a      	beq.n	800503e <HAL_TIM_ConfigClockSource+0xa6>
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d87b      	bhi.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 800500c:	2b60      	cmp	r3, #96	; 0x60
 800500e:	d050      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005010:	2b60      	cmp	r3, #96	; 0x60
 8005012:	d877      	bhi.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 8005014:	2b50      	cmp	r3, #80	; 0x50
 8005016:	d03c      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0xfa>
 8005018:	2b50      	cmp	r3, #80	; 0x50
 800501a:	d873      	bhi.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d058      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d86f      	bhi.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 8005024:	2b30      	cmp	r3, #48	; 0x30
 8005026:	d064      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005028:	2b30      	cmp	r3, #48	; 0x30
 800502a:	d86b      	bhi.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b20      	cmp	r3, #32
 800502e:	d060      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d867      	bhi.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05c      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005038:	2b10      	cmp	r3, #16
 800503a:	d05a      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x15a>
 800503c:	e062      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6899      	ldr	r1, [r3, #8]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f000 fbde 	bl	800580e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	609a      	str	r2, [r3, #8]
      break;
 800506a:	e04f      	b.n	800510c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6899      	ldr	r1, [r3, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f000 fbc7 	bl	800580e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800508e:	609a      	str	r2, [r3, #8]
      break;
 8005090:	e03c      	b.n	800510c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6859      	ldr	r1, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	461a      	mov	r2, r3
 80050a0:	f000 fb3e 	bl	8005720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2150      	movs	r1, #80	; 0x50
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fb95 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80050b0:	e02c      	b.n	800510c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	461a      	mov	r2, r3
 80050c0:	f000 fb5c 	bl	800577c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2160      	movs	r1, #96	; 0x60
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fb85 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80050d0:	e01c      	b.n	800510c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	461a      	mov	r2, r3
 80050e0:	f000 fb1e 	bl	8005720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fb75 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80050f0:	e00c      	b.n	800510c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f000 fb6c 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005102:	e003      	b.n	800510c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      break;
 8005108:	e000      	b.n	800510c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800510a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d107      	bne.n	80051ba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	e02a      	b.n	8005210 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d107      	bne.n	80051d4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2202      	movs	r2, #2
 80051c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d2:	e01d      	b.n	8005210 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d107      	bne.n	80051ee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2204      	movs	r2, #4
 80051e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	e010      	b.n	8005210 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d107      	bne.n	8005208 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2208      	movs	r2, #8
 80051fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005206:	e003      	b.n	8005210 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff ffb5 	bl	8005180 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	d10b      	bne.n	8005254 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d136      	bne.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005252:	e031      	b.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d10b      	bne.n	8005276 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d125      	bne.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005274:	e020      	b.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d10b      	bne.n	8005298 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2204      	movs	r2, #4
 8005284:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d114      	bne.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005296:	e00f      	b.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d10a      	bne.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2208      	movs	r2, #8
 80052a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff ff46 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d103      	bne.n	80052ec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	771a      	strb	r2, [r3, #28]
 80052ea:	e019      	b.n	8005320 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d103      	bne.n	80052fe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2202      	movs	r2, #2
 80052fa:	771a      	strb	r2, [r3, #28]
 80052fc:	e010      	b.n	8005320 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d103      	bne.n	8005310 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2204      	movs	r2, #4
 800530c:	771a      	strb	r2, [r3, #28]
 800530e:	e007      	b.n	8005320 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d102      	bne.n	8005320 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2208      	movs	r2, #8
 800531e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff1b 	bl	800515c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <TIM_Base_SetConfig+0xd0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d007      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a2c      	ldr	r2, [pc, #176]	; (8005408 <TIM_Base_SetConfig+0xd4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a2b      	ldr	r2, [pc, #172]	; (800540c <TIM_Base_SetConfig+0xd8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a22      	ldr	r2, [pc, #136]	; (8005404 <TIM_Base_SetConfig+0xd0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <TIM_Base_SetConfig+0xd4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1e      	ldr	r2, [pc, #120]	; (800540c <TIM_Base_SetConfig+0xd8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <TIM_Base_SetConfig+0xd0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d103      	bne.n	80053dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f023 0201 	bic.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]
  }
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800

08005410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 0201 	bic.w	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 0302 	bic.w	r3, r3, #2
 8005458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a1c      	ldr	r2, [pc, #112]	; (80054d8 <TIM_OC1_SetConfig+0xc8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10c      	bne.n	8005486 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0308 	bic.w	r3, r3, #8
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 0304 	bic.w	r3, r3, #4
 8005484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a13      	ldr	r2, [pc, #76]	; (80054d8 <TIM_OC1_SetConfig+0xc8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d111      	bne.n	80054b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800549c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40012c00 	.word	0x40012c00

080054dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0210 	bic.w	r2, r3, #16
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0320 	bic.w	r3, r3, #32
 8005526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <TIM_OC2_SetConfig+0xd0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d10d      	bne.n	8005558 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005556:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a14      	ldr	r2, [pc, #80]	; (80055ac <TIM_OC2_SetConfig+0xd0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d113      	bne.n	8005588 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800556e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00

080055b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <TIM_OC3_SetConfig+0xd0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d10d      	bne.n	800562a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <TIM_OC3_SetConfig+0xd0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d113      	bne.n	800565a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	621a      	str	r2, [r3, #32]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00

08005684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	031b      	lsls	r3, r3, #12
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0f      	ldr	r2, [pc, #60]	; (800571c <TIM_OC4_SetConfig+0x98>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d109      	bne.n	80056f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr
 800571c:	40012c00 	.word	0x40012c00

08005720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 030a 	bic.w	r3, r3, #10
 800575c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0210 	bic.w	r2, r3, #16
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	031b      	lsls	r3, r3, #12
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f043 0307 	orr.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580e:	b480      	push	{r7}
 8005810:	b087      	sub	sp, #28
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005828:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	021a      	lsls	r2, r3, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	431a      	orrs	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	609a      	str	r2, [r3, #8]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2201      	movs	r2, #1
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	43db      	mvns	r3, r3
 800586e:	401a      	ands	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e046      	b.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d009      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a12      	ldr	r2, [pc, #72]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a10      	ldr	r2, [pc, #64]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800

08005950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e042      	b.n	8005a0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fc fa86 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	; 0x24
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fd63 	bl	8006484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d175      	bne.n	8005b20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Transmit+0x2c>
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e06e      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2221      	movs	r2, #33	; 0x21
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a52:	f7fc fc0d 	bl	8002270 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6c:	d108      	bne.n	8005a80 <HAL_UART_Transmit+0x6c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	e003      	b.n	8005a88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a88:	e02e      	b.n	8005ae8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2180      	movs	r1, #128	; 0x80
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fb01 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e03a      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e007      	b.n	8005ada <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1cb      	bne.n	8005a8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 facd 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0ba      	sub	sp, #232	; 0xe8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <HAL_UART_IRQHandler+0x66>
 8005b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fbbc 	bl	8006308 <UART_Receive_IT>
      return;
 8005b90:	e25b      	b.n	800604a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80de 	beq.w	8005d58 <HAL_UART_IRQHandler+0x22c>
 8005b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80d1 	beq.w	8005d58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_UART_IRQHandler+0xae>
 8005bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	f043 0201 	orr.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <HAL_UART_IRQHandler+0xd2>
 8005be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	f043 0202 	orr.w	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <HAL_UART_IRQHandler+0xf6>
 8005c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d011      	beq.n	8005c52 <HAL_UART_IRQHandler+0x126>
 8005c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f043 0208 	orr.w	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 81f2 	beq.w	8006040 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_UART_IRQHandler+0x14e>
 8005c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb47 	bl	8006308 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x17a>
 8005c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d04f      	beq.n	8005d46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa51 	bl	800614e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d041      	beq.n	8005d3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3314      	adds	r3, #20
 8005cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3314      	adds	r3, #20
 8005ce2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ce6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1d9      	bne.n	8005cba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d013      	beq.n	8005d36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	4a7e      	ldr	r2, [pc, #504]	; (8005f0c <HAL_UART_IRQHandler+0x3e0>)
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fc fcda 	bl	80026d4 <HAL_DMA_Abort_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	e00e      	b.n	8005d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f99c 	bl	8006074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	e00a      	b.n	8005d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f998 	bl	8006074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e006      	b.n	8005d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f994 	bl	8006074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005d52:	e175      	b.n	8006040 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	bf00      	nop
    return;
 8005d56:	e173      	b.n	8006040 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	f040 814f 	bne.w	8006000 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8148 	beq.w	8006000 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8141 	beq.w	8006000 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80b6 	beq.w	8005f10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8145 	beq.w	8006044 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f080 813e 	bcs.w	8006044 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	f000 8088 	beq.w	8005eec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e08:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1d9      	bne.n	8005ddc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e1      	bne.n	8005e28 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e3      	bne.n	8005e64 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebc:	f023 0310 	bic.w	r3, r3, #16
 8005ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ece:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ed0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e3      	bne.n	8005eaa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fc fbb8 	bl	800265c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8bf 	bl	8006086 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f08:	e09c      	b.n	8006044 <HAL_UART_IRQHandler+0x518>
 8005f0a:	bf00      	nop
 8005f0c:	08006213 	.word	0x08006213
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 808e 	beq.w	8006048 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8089 	beq.w	8006048 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f92:	633a      	str	r2, [r7, #48]	; 0x30
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e3      	bne.n	8005f6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fd8:	61fa      	str	r2, [r7, #28]
 8005fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e3      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f844 	bl	8006086 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ffe:	e023      	b.n	8006048 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <HAL_UART_IRQHandler+0x4f4>
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f90e 	bl	800623a <UART_Transmit_IT>
    return;
 800601e:	e014      	b.n	800604a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00e      	beq.n	800604a <HAL_UART_IRQHandler+0x51e>
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f94d 	bl	80062d8 <UART_EndTransmit_IT>
    return;
 800603e:	e004      	b.n	800604a <HAL_UART_IRQHandler+0x51e>
    return;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <HAL_UART_IRQHandler+0x51e>
      return;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <HAL_UART_IRQHandler+0x51e>
      return;
 8006048:	bf00      	nop
  }
}
 800604a:	37e8      	adds	r7, #232	; 0xe8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr

08006074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	e03b      	b.n	8006126 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d037      	beq.n	8006126 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fc f8db 	bl	8002270 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <UART_WaitOnFlagUntilTimeout+0x30>
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e03a      	b.n	8006146 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d023      	beq.n	8006126 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d020      	beq.n	8006126 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d01d      	beq.n	8006126 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d116      	bne.n	8006126 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f81d 	bl	800614e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2208      	movs	r2, #8
 8006118:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e00f      	b.n	8006146 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4013      	ands	r3, r2
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	429a      	cmp	r2, r3
 8006142:	d0b4      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800614e:	b480      	push	{r7}
 8006150:	b095      	sub	sp, #84	; 0x54
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800616c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006176:	643a      	str	r2, [r7, #64]	; 0x40
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800617c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	61fb      	str	r3, [r7, #28]
   return(result);
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d119      	bne.n	80061fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f023 0310 	bic.w	r3, r3, #16
 80061dc:	647b      	str	r3, [r7, #68]	; 0x44
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e6:	61ba      	str	r2, [r7, #24]
 80061e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	613b      	str	r3, [r7, #16]
   return(result);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e5      	bne.n	80061c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006208:	bf00      	nop
 800620a:	3754      	adds	r7, #84	; 0x54
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr

08006212 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff ff21 	bl	8006074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b21      	cmp	r3, #33	; 0x21
 800624c:	d13e      	bne.n	80062cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d114      	bne.n	8006282 <UART_Transmit_IT+0x48>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d110      	bne.n	8006282 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006274:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	1c9a      	adds	r2, r3, #2
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	621a      	str	r2, [r3, #32]
 8006280:	e008      	b.n	8006294 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6211      	str	r1, [r2, #32]
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29b      	uxth	r3, r3
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4619      	mov	r1, r3
 80062a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10f      	bne.n	80062c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr

080062d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff fea9 	bl	8006050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08c      	sub	sp, #48	; 0x30
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b22      	cmp	r3, #34	; 0x22
 800631a:	f040 80ae 	bne.w	800647a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006326:	d117      	bne.n	8006358 <UART_Receive_IT+0x50>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d113      	bne.n	8006358 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006346:	b29a      	uxth	r2, r3
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	1c9a      	adds	r2, r3, #2
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	629a      	str	r2, [r3, #40]	; 0x28
 8006356:	e026      	b.n	80063a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d007      	beq.n	800637c <UART_Receive_IT+0x74>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <UART_Receive_IT+0x82>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	b2da      	uxtb	r2, r3
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e008      	b.n	800639c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006396:	b2da      	uxtb	r2, r3
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4619      	mov	r1, r3
 80063b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d15d      	bne.n	8006476 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0220 	bic.w	r2, r2, #32
 80063c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d135      	bne.n	800646c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	613b      	str	r3, [r7, #16]
   return(result);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f023 0310 	bic.w	r3, r3, #16
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006426:	623a      	str	r2, [r7, #32]
 8006428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	69f9      	ldr	r1, [r7, #28]
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	61bb      	str	r3, [r7, #24]
   return(result);
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e5      	bne.n	8006406 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b10      	cmp	r3, #16
 8006446:	d10a      	bne.n	800645e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fe0e 	bl	8006086 <HAL_UARTEx_RxEventCallback>
 800646a:	e002      	b.n	8006472 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fdf8 	bl	8006062 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	e002      	b.n	800647c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800647a:	2302      	movs	r3, #2
  }
}
 800647c:	4618      	mov	r0, r3
 800647e:	3730      	adds	r7, #48	; 0x30
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064be:	f023 030c 	bic.w	r3, r3, #12
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	430b      	orrs	r3, r1
 80064ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2c      	ldr	r2, [pc, #176]	; (8006598 <UART_SetConfig+0x114>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d103      	bne.n	80064f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064ec:	f7fe f832 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	e002      	b.n	80064fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fe f81a 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 80064f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009a      	lsls	r2, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <UART_SetConfig+0x118>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	0119      	lsls	r1, r3, #4
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009a      	lsls	r2, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006530:	4b1a      	ldr	r3, [pc, #104]	; (800659c <UART_SetConfig+0x118>)
 8006532:	fba3 0302 	umull	r0, r3, r3, r2
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	2064      	movs	r0, #100	; 0x64
 800653a:	fb00 f303 	mul.w	r3, r0, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	3332      	adds	r3, #50	; 0x32
 8006544:	4a15      	ldr	r2, [pc, #84]	; (800659c <UART_SetConfig+0x118>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006550:	4419      	add	r1, r3
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009a      	lsls	r2, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	fbb2 f2f3 	udiv	r2, r2, r3
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <UART_SetConfig+0x118>)
 800656a:	fba3 0302 	umull	r0, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	2064      	movs	r0, #100	; 0x64
 8006572:	fb00 f303 	mul.w	r3, r0, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	3332      	adds	r3, #50	; 0x32
 800657c:	4a07      	ldr	r2, [pc, #28]	; (800659c <UART_SetConfig+0x118>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	440a      	add	r2, r1
 800658e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006590:	bf00      	nop
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40013800 	.word	0x40013800
 800659c:	51eb851f 	.word	0x51eb851f

080065a0 <__errno>:
 80065a0:	4b01      	ldr	r3, [pc, #4]	; (80065a8 <__errno+0x8>)
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	2000000c 	.word	0x2000000c

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	2600      	movs	r6, #0
 80065b0:	4d0c      	ldr	r5, [pc, #48]	; (80065e4 <__libc_init_array+0x38>)
 80065b2:	4c0d      	ldr	r4, [pc, #52]	; (80065e8 <__libc_init_array+0x3c>)
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	f002 feba 	bl	8009334 <_init>
 80065c0:	2600      	movs	r6, #0
 80065c2:	4d0a      	ldr	r5, [pc, #40]	; (80065ec <__libc_init_array+0x40>)
 80065c4:	4c0a      	ldr	r4, [pc, #40]	; (80065f0 <__libc_init_array+0x44>)
 80065c6:	1b64      	subs	r4, r4, r5
 80065c8:	10a4      	asrs	r4, r4, #2
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	080097b4 	.word	0x080097b4
 80065e8:	080097b4 	.word	0x080097b4
 80065ec:	080097b4 	.word	0x080097b4
 80065f0:	080097b8 	.word	0x080097b8

080065f4 <memset>:
 80065f4:	4603      	mov	r3, r0
 80065f6:	4402      	add	r2, r0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <__cvt>:
 8006604:	2b00      	cmp	r3, #0
 8006606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660a:	461f      	mov	r7, r3
 800660c:	bfbb      	ittet	lt
 800660e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006612:	461f      	movlt	r7, r3
 8006614:	2300      	movge	r3, #0
 8006616:	232d      	movlt	r3, #45	; 0x2d
 8006618:	b088      	sub	sp, #32
 800661a:	4614      	mov	r4, r2
 800661c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800661e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006620:	7013      	strb	r3, [r2, #0]
 8006622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006624:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006628:	f023 0820 	bic.w	r8, r3, #32
 800662c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006630:	d005      	beq.n	800663e <__cvt+0x3a>
 8006632:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006636:	d100      	bne.n	800663a <__cvt+0x36>
 8006638:	3501      	adds	r5, #1
 800663a:	2302      	movs	r3, #2
 800663c:	e000      	b.n	8006640 <__cvt+0x3c>
 800663e:	2303      	movs	r3, #3
 8006640:	aa07      	add	r2, sp, #28
 8006642:	9204      	str	r2, [sp, #16]
 8006644:	aa06      	add	r2, sp, #24
 8006646:	e9cd a202 	strd	sl, r2, [sp, #8]
 800664a:	e9cd 3500 	strd	r3, r5, [sp]
 800664e:	4622      	mov	r2, r4
 8006650:	463b      	mov	r3, r7
 8006652:	f000 fce5 	bl	8007020 <_dtoa_r>
 8006656:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800665a:	4606      	mov	r6, r0
 800665c:	d102      	bne.n	8006664 <__cvt+0x60>
 800665e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006660:	07db      	lsls	r3, r3, #31
 8006662:	d522      	bpl.n	80066aa <__cvt+0xa6>
 8006664:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006668:	eb06 0905 	add.w	r9, r6, r5
 800666c:	d110      	bne.n	8006690 <__cvt+0x8c>
 800666e:	7833      	ldrb	r3, [r6, #0]
 8006670:	2b30      	cmp	r3, #48	; 0x30
 8006672:	d10a      	bne.n	800668a <__cvt+0x86>
 8006674:	2200      	movs	r2, #0
 8006676:	2300      	movs	r3, #0
 8006678:	4620      	mov	r0, r4
 800667a:	4639      	mov	r1, r7
 800667c:	f7fa f994 	bl	80009a8 <__aeabi_dcmpeq>
 8006680:	b918      	cbnz	r0, 800668a <__cvt+0x86>
 8006682:	f1c5 0501 	rsb	r5, r5, #1
 8006686:	f8ca 5000 	str.w	r5, [sl]
 800668a:	f8da 3000 	ldr.w	r3, [sl]
 800668e:	4499      	add	r9, r3
 8006690:	2200      	movs	r2, #0
 8006692:	2300      	movs	r3, #0
 8006694:	4620      	mov	r0, r4
 8006696:	4639      	mov	r1, r7
 8006698:	f7fa f986 	bl	80009a8 <__aeabi_dcmpeq>
 800669c:	b108      	cbz	r0, 80066a2 <__cvt+0x9e>
 800669e:	f8cd 901c 	str.w	r9, [sp, #28]
 80066a2:	2230      	movs	r2, #48	; 0x30
 80066a4:	9b07      	ldr	r3, [sp, #28]
 80066a6:	454b      	cmp	r3, r9
 80066a8:	d307      	bcc.n	80066ba <__cvt+0xb6>
 80066aa:	4630      	mov	r0, r6
 80066ac:	9b07      	ldr	r3, [sp, #28]
 80066ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	b008      	add	sp, #32
 80066b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	9107      	str	r1, [sp, #28]
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	e7f0      	b.n	80066a4 <__cvt+0xa0>

080066c2 <__exponent>:
 80066c2:	4603      	mov	r3, r0
 80066c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c6:	2900      	cmp	r1, #0
 80066c8:	f803 2b02 	strb.w	r2, [r3], #2
 80066cc:	bfb6      	itet	lt
 80066ce:	222d      	movlt	r2, #45	; 0x2d
 80066d0:	222b      	movge	r2, #43	; 0x2b
 80066d2:	4249      	neglt	r1, r1
 80066d4:	2909      	cmp	r1, #9
 80066d6:	7042      	strb	r2, [r0, #1]
 80066d8:	dd2b      	ble.n	8006732 <__exponent+0x70>
 80066da:	f10d 0407 	add.w	r4, sp, #7
 80066de:	46a4      	mov	ip, r4
 80066e0:	270a      	movs	r7, #10
 80066e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80066e6:	460a      	mov	r2, r1
 80066e8:	46a6      	mov	lr, r4
 80066ea:	fb07 1516 	mls	r5, r7, r6, r1
 80066ee:	2a63      	cmp	r2, #99	; 0x63
 80066f0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80066f4:	4631      	mov	r1, r6
 80066f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80066fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066fe:	dcf0      	bgt.n	80066e2 <__exponent+0x20>
 8006700:	3130      	adds	r1, #48	; 0x30
 8006702:	f1ae 0502 	sub.w	r5, lr, #2
 8006706:	f804 1c01 	strb.w	r1, [r4, #-1]
 800670a:	4629      	mov	r1, r5
 800670c:	1c44      	adds	r4, r0, #1
 800670e:	4561      	cmp	r1, ip
 8006710:	d30a      	bcc.n	8006728 <__exponent+0x66>
 8006712:	f10d 0209 	add.w	r2, sp, #9
 8006716:	eba2 020e 	sub.w	r2, r2, lr
 800671a:	4565      	cmp	r5, ip
 800671c:	bf88      	it	hi
 800671e:	2200      	movhi	r2, #0
 8006720:	4413      	add	r3, r2
 8006722:	1a18      	subs	r0, r3, r0
 8006724:	b003      	add	sp, #12
 8006726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006728:	f811 2b01 	ldrb.w	r2, [r1], #1
 800672c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006730:	e7ed      	b.n	800670e <__exponent+0x4c>
 8006732:	2330      	movs	r3, #48	; 0x30
 8006734:	3130      	adds	r1, #48	; 0x30
 8006736:	7083      	strb	r3, [r0, #2]
 8006738:	70c1      	strb	r1, [r0, #3]
 800673a:	1d03      	adds	r3, r0, #4
 800673c:	e7f1      	b.n	8006722 <__exponent+0x60>
	...

08006740 <_printf_float>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	b091      	sub	sp, #68	; 0x44
 8006746:	460c      	mov	r4, r1
 8006748:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800674c:	4616      	mov	r6, r2
 800674e:	461f      	mov	r7, r3
 8006750:	4605      	mov	r5, r0
 8006752:	f001 fa53 	bl	8007bfc <_localeconv_r>
 8006756:	6803      	ldr	r3, [r0, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	9309      	str	r3, [sp, #36]	; 0x24
 800675c:	f7f9 fcf8 	bl	8000150 <strlen>
 8006760:	2300      	movs	r3, #0
 8006762:	930e      	str	r3, [sp, #56]	; 0x38
 8006764:	f8d8 3000 	ldr.w	r3, [r8]
 8006768:	900a      	str	r0, [sp, #40]	; 0x28
 800676a:	3307      	adds	r3, #7
 800676c:	f023 0307 	bic.w	r3, r3, #7
 8006770:	f103 0208 	add.w	r2, r3, #8
 8006774:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006778:	f8d4 b000 	ldr.w	fp, [r4]
 800677c:	f8c8 2000 	str.w	r2, [r8]
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006788:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800678c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006790:	930b      	str	r3, [sp, #44]	; 0x2c
 8006792:	f04f 32ff 	mov.w	r2, #4294967295
 8006796:	4640      	mov	r0, r8
 8006798:	4b9c      	ldr	r3, [pc, #624]	; (8006a0c <_printf_float+0x2cc>)
 800679a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800679c:	f7fa f936 	bl	8000a0c <__aeabi_dcmpun>
 80067a0:	bb70      	cbnz	r0, 8006800 <_printf_float+0xc0>
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295
 80067a6:	4640      	mov	r0, r8
 80067a8:	4b98      	ldr	r3, [pc, #608]	; (8006a0c <_printf_float+0x2cc>)
 80067aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ac:	f7fa f910 	bl	80009d0 <__aeabi_dcmple>
 80067b0:	bb30      	cbnz	r0, 8006800 <_printf_float+0xc0>
 80067b2:	2200      	movs	r2, #0
 80067b4:	2300      	movs	r3, #0
 80067b6:	4640      	mov	r0, r8
 80067b8:	4651      	mov	r1, sl
 80067ba:	f7fa f8ff 	bl	80009bc <__aeabi_dcmplt>
 80067be:	b110      	cbz	r0, 80067c6 <_printf_float+0x86>
 80067c0:	232d      	movs	r3, #45	; 0x2d
 80067c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c6:	4b92      	ldr	r3, [pc, #584]	; (8006a10 <_printf_float+0x2d0>)
 80067c8:	4892      	ldr	r0, [pc, #584]	; (8006a14 <_printf_float+0x2d4>)
 80067ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80067ce:	bf94      	ite	ls
 80067d0:	4698      	movls	r8, r3
 80067d2:	4680      	movhi	r8, r0
 80067d4:	2303      	movs	r3, #3
 80067d6:	f04f 0a00 	mov.w	sl, #0
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	f02b 0304 	bic.w	r3, fp, #4
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	4633      	mov	r3, r6
 80067e4:	4621      	mov	r1, r4
 80067e6:	4628      	mov	r0, r5
 80067e8:	9700      	str	r7, [sp, #0]
 80067ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80067ec:	f000 f9d4 	bl	8006b98 <_printf_common>
 80067f0:	3001      	adds	r0, #1
 80067f2:	f040 8090 	bne.w	8006916 <_printf_float+0x1d6>
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	b011      	add	sp, #68	; 0x44
 80067fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006800:	4642      	mov	r2, r8
 8006802:	4653      	mov	r3, sl
 8006804:	4640      	mov	r0, r8
 8006806:	4651      	mov	r1, sl
 8006808:	f7fa f900 	bl	8000a0c <__aeabi_dcmpun>
 800680c:	b148      	cbz	r0, 8006822 <_printf_float+0xe2>
 800680e:	f1ba 0f00 	cmp.w	sl, #0
 8006812:	bfb8      	it	lt
 8006814:	232d      	movlt	r3, #45	; 0x2d
 8006816:	4880      	ldr	r0, [pc, #512]	; (8006a18 <_printf_float+0x2d8>)
 8006818:	bfb8      	it	lt
 800681a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800681e:	4b7f      	ldr	r3, [pc, #508]	; (8006a1c <_printf_float+0x2dc>)
 8006820:	e7d3      	b.n	80067ca <_printf_float+0x8a>
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	d142      	bne.n	80068b2 <_printf_float+0x172>
 800682c:	2306      	movs	r3, #6
 800682e:	6063      	str	r3, [r4, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	9206      	str	r2, [sp, #24]
 8006834:	aa0e      	add	r2, sp, #56	; 0x38
 8006836:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800683a:	aa0d      	add	r2, sp, #52	; 0x34
 800683c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006840:	9203      	str	r2, [sp, #12]
 8006842:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006846:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	4642      	mov	r2, r8
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4628      	mov	r0, r5
 8006854:	4653      	mov	r3, sl
 8006856:	910b      	str	r1, [sp, #44]	; 0x2c
 8006858:	f7ff fed4 	bl	8006604 <__cvt>
 800685c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800685e:	4680      	mov	r8, r0
 8006860:	2947      	cmp	r1, #71	; 0x47
 8006862:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006864:	d108      	bne.n	8006878 <_printf_float+0x138>
 8006866:	1cc8      	adds	r0, r1, #3
 8006868:	db02      	blt.n	8006870 <_printf_float+0x130>
 800686a:	6863      	ldr	r3, [r4, #4]
 800686c:	4299      	cmp	r1, r3
 800686e:	dd40      	ble.n	80068f2 <_printf_float+0x1b2>
 8006870:	f1a9 0902 	sub.w	r9, r9, #2
 8006874:	fa5f f989 	uxtb.w	r9, r9
 8006878:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800687c:	d81f      	bhi.n	80068be <_printf_float+0x17e>
 800687e:	464a      	mov	r2, r9
 8006880:	3901      	subs	r1, #1
 8006882:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006886:	910d      	str	r1, [sp, #52]	; 0x34
 8006888:	f7ff ff1b 	bl	80066c2 <__exponent>
 800688c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800688e:	4682      	mov	sl, r0
 8006890:	1813      	adds	r3, r2, r0
 8006892:	2a01      	cmp	r2, #1
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	dc02      	bgt.n	800689e <_printf_float+0x15e>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	07d2      	lsls	r2, r2, #31
 800689c:	d501      	bpl.n	80068a2 <_printf_float+0x162>
 800689e:	3301      	adds	r3, #1
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d09b      	beq.n	80067e2 <_printf_float+0xa2>
 80068aa:	232d      	movs	r3, #45	; 0x2d
 80068ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b0:	e797      	b.n	80067e2 <_printf_float+0xa2>
 80068b2:	2947      	cmp	r1, #71	; 0x47
 80068b4:	d1bc      	bne.n	8006830 <_printf_float+0xf0>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1ba      	bne.n	8006830 <_printf_float+0xf0>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7b7      	b.n	800682e <_printf_float+0xee>
 80068be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068c2:	d118      	bne.n	80068f6 <_printf_float+0x1b6>
 80068c4:	2900      	cmp	r1, #0
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	dd0b      	ble.n	80068e2 <_printf_float+0x1a2>
 80068ca:	6121      	str	r1, [r4, #16]
 80068cc:	b913      	cbnz	r3, 80068d4 <_printf_float+0x194>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	07d0      	lsls	r0, r2, #31
 80068d2:	d502      	bpl.n	80068da <_printf_float+0x19a>
 80068d4:	3301      	adds	r3, #1
 80068d6:	440b      	add	r3, r1
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	f04f 0a00 	mov.w	sl, #0
 80068de:	65a1      	str	r1, [r4, #88]	; 0x58
 80068e0:	e7df      	b.n	80068a2 <_printf_float+0x162>
 80068e2:	b913      	cbnz	r3, 80068ea <_printf_float+0x1aa>
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	07d2      	lsls	r2, r2, #31
 80068e8:	d501      	bpl.n	80068ee <_printf_float+0x1ae>
 80068ea:	3302      	adds	r3, #2
 80068ec:	e7f4      	b.n	80068d8 <_printf_float+0x198>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e7f2      	b.n	80068d8 <_printf_float+0x198>
 80068f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f8:	4299      	cmp	r1, r3
 80068fa:	db05      	blt.n	8006908 <_printf_float+0x1c8>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	6121      	str	r1, [r4, #16]
 8006900:	07d8      	lsls	r0, r3, #31
 8006902:	d5ea      	bpl.n	80068da <_printf_float+0x19a>
 8006904:	1c4b      	adds	r3, r1, #1
 8006906:	e7e7      	b.n	80068d8 <_printf_float+0x198>
 8006908:	2900      	cmp	r1, #0
 800690a:	bfcc      	ite	gt
 800690c:	2201      	movgt	r2, #1
 800690e:	f1c1 0202 	rsble	r2, r1, #2
 8006912:	4413      	add	r3, r2
 8006914:	e7e0      	b.n	80068d8 <_printf_float+0x198>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	055a      	lsls	r2, r3, #21
 800691a:	d407      	bmi.n	800692c <_printf_float+0x1ec>
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	4642      	mov	r2, r8
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	d12b      	bne.n	8006982 <_printf_float+0x242>
 800692a:	e764      	b.n	80067f6 <_printf_float+0xb6>
 800692c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006930:	f240 80dd 	bls.w	8006aee <_printf_float+0x3ae>
 8006934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006938:	2200      	movs	r2, #0
 800693a:	2300      	movs	r3, #0
 800693c:	f7fa f834 	bl	80009a8 <__aeabi_dcmpeq>
 8006940:	2800      	cmp	r0, #0
 8006942:	d033      	beq.n	80069ac <_printf_float+0x26c>
 8006944:	2301      	movs	r3, #1
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	4a35      	ldr	r2, [pc, #212]	; (8006a20 <_printf_float+0x2e0>)
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f af51 	beq.w	80067f6 <_printf_float+0xb6>
 8006954:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006958:	429a      	cmp	r2, r3
 800695a:	db02      	blt.n	8006962 <_printf_float+0x222>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	07d8      	lsls	r0, r3, #31
 8006960:	d50f      	bpl.n	8006982 <_printf_float+0x242>
 8006962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f af42 	beq.w	80067f6 <_printf_float+0xb6>
 8006972:	f04f 0800 	mov.w	r8, #0
 8006976:	f104 091a 	add.w	r9, r4, #26
 800697a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800697c:	3b01      	subs	r3, #1
 800697e:	4543      	cmp	r3, r8
 8006980:	dc09      	bgt.n	8006996 <_printf_float+0x256>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	079b      	lsls	r3, r3, #30
 8006986:	f100 8102 	bmi.w	8006b8e <_printf_float+0x44e>
 800698a:	68e0      	ldr	r0, [r4, #12]
 800698c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800698e:	4298      	cmp	r0, r3
 8006990:	bfb8      	it	lt
 8006992:	4618      	movlt	r0, r3
 8006994:	e731      	b.n	80067fa <_printf_float+0xba>
 8006996:	2301      	movs	r3, #1
 8006998:	464a      	mov	r2, r9
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f af28 	beq.w	80067f6 <_printf_float+0xb6>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	e7e6      	b.n	800697a <_printf_float+0x23a>
 80069ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc38      	bgt.n	8006a24 <_printf_float+0x2e4>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <_printf_float+0x2e0>)
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f af1a 	beq.w	80067f6 <_printf_float+0xb6>
 80069c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069c6:	4313      	orrs	r3, r2
 80069c8:	d102      	bne.n	80069d0 <_printf_float+0x290>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	07d9      	lsls	r1, r3, #31
 80069ce:	d5d8      	bpl.n	8006982 <_printf_float+0x242>
 80069d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af0b 	beq.w	80067f6 <_printf_float+0xb6>
 80069e0:	f04f 0900 	mov.w	r9, #0
 80069e4:	f104 0a1a 	add.w	sl, r4, #26
 80069e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ea:	425b      	negs	r3, r3
 80069ec:	454b      	cmp	r3, r9
 80069ee:	dc01      	bgt.n	80069f4 <_printf_float+0x2b4>
 80069f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f2:	e794      	b.n	800691e <_printf_float+0x1de>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4652      	mov	r2, sl
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f aef9 	beq.w	80067f6 <_printf_float+0xb6>
 8006a04:	f109 0901 	add.w	r9, r9, #1
 8006a08:	e7ee      	b.n	80069e8 <_printf_float+0x2a8>
 8006a0a:	bf00      	nop
 8006a0c:	7fefffff 	.word	0x7fefffff
 8006a10:	080093d8 	.word	0x080093d8
 8006a14:	080093dc 	.word	0x080093dc
 8006a18:	080093e4 	.word	0x080093e4
 8006a1c:	080093e0 	.word	0x080093e0
 8006a20:	080093e8 	.word	0x080093e8
 8006a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	bfa8      	it	ge
 8006a2c:	461a      	movge	r2, r3
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	4691      	mov	r9, r2
 8006a32:	dc37      	bgt.n	8006aa4 <_printf_float+0x364>
 8006a34:	f04f 0b00 	mov.w	fp, #0
 8006a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a3c:	f104 021a 	add.w	r2, r4, #26
 8006a40:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a44:	ebaa 0309 	sub.w	r3, sl, r9
 8006a48:	455b      	cmp	r3, fp
 8006a4a:	dc33      	bgt.n	8006ab4 <_printf_float+0x374>
 8006a4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a50:	429a      	cmp	r2, r3
 8006a52:	db3b      	blt.n	8006acc <_printf_float+0x38c>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	07da      	lsls	r2, r3, #31
 8006a58:	d438      	bmi.n	8006acc <_printf_float+0x38c>
 8006a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a5e:	eba2 030a 	sub.w	r3, r2, sl
 8006a62:	eba2 0901 	sub.w	r9, r2, r1
 8006a66:	4599      	cmp	r9, r3
 8006a68:	bfa8      	it	ge
 8006a6a:	4699      	movge	r9, r3
 8006a6c:	f1b9 0f00 	cmp.w	r9, #0
 8006a70:	dc34      	bgt.n	8006adc <_printf_float+0x39c>
 8006a72:	f04f 0800 	mov.w	r8, #0
 8006a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a7a:	f104 0a1a 	add.w	sl, r4, #26
 8006a7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	eba3 0309 	sub.w	r3, r3, r9
 8006a88:	4543      	cmp	r3, r8
 8006a8a:	f77f af7a 	ble.w	8006982 <_printf_float+0x242>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4652      	mov	r2, sl
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f43f aeac 	beq.w	80067f6 <_printf_float+0xb6>
 8006a9e:	f108 0801 	add.w	r8, r8, #1
 8006aa2:	e7ec      	b.n	8006a7e <_printf_float+0x33e>
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d1c0      	bne.n	8006a34 <_printf_float+0x2f4>
 8006ab2:	e6a0      	b.n	80067f6 <_printf_float+0xb6>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	920b      	str	r2, [sp, #44]	; 0x2c
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f ae99 	beq.w	80067f6 <_printf_float+0xb6>
 8006ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ac6:	f10b 0b01 	add.w	fp, fp, #1
 8006aca:	e7b9      	b.n	8006a40 <_printf_float+0x300>
 8006acc:	4631      	mov	r1, r6
 8006ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d1bf      	bne.n	8006a5a <_printf_float+0x31a>
 8006ada:	e68c      	b.n	80067f6 <_printf_float+0xb6>
 8006adc:	464b      	mov	r3, r9
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	eb08 020a 	add.w	r2, r8, sl
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d1c2      	bne.n	8006a72 <_printf_float+0x332>
 8006aec:	e683      	b.n	80067f6 <_printf_float+0xb6>
 8006aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006af0:	2a01      	cmp	r2, #1
 8006af2:	dc01      	bgt.n	8006af8 <_printf_float+0x3b8>
 8006af4:	07db      	lsls	r3, r3, #31
 8006af6:	d537      	bpl.n	8006b68 <_printf_float+0x428>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4642      	mov	r2, r8
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f ae77 	beq.w	80067f6 <_printf_float+0xb6>
 8006b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	f43f ae6f 	beq.w	80067f6 <_printf_float+0xb6>
 8006b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f7f9 ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8006b24:	b9d8      	cbnz	r0, 8006b5e <_printf_float+0x41e>
 8006b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b28:	f108 0201 	add.w	r2, r8, #1
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	d10e      	bne.n	8006b56 <_printf_float+0x416>
 8006b38:	e65d      	b.n	80067f6 <_printf_float+0xb6>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	464a      	mov	r2, r9
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f ae56 	beq.w	80067f6 <_printf_float+0xb6>
 8006b4a:	f108 0801 	add.w	r8, r8, #1
 8006b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b50:	3b01      	subs	r3, #1
 8006b52:	4543      	cmp	r3, r8
 8006b54:	dcf1      	bgt.n	8006b3a <_printf_float+0x3fa>
 8006b56:	4653      	mov	r3, sl
 8006b58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b5c:	e6e0      	b.n	8006920 <_printf_float+0x1e0>
 8006b5e:	f04f 0800 	mov.w	r8, #0
 8006b62:	f104 091a 	add.w	r9, r4, #26
 8006b66:	e7f2      	b.n	8006b4e <_printf_float+0x40e>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	4642      	mov	r2, r8
 8006b6c:	e7df      	b.n	8006b2e <_printf_float+0x3ee>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	464a      	mov	r2, r9
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f43f ae3c 	beq.w	80067f6 <_printf_float+0xb6>
 8006b7e:	f108 0801 	add.w	r8, r8, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	4543      	cmp	r3, r8
 8006b8a:	dcf0      	bgt.n	8006b6e <_printf_float+0x42e>
 8006b8c:	e6fd      	b.n	800698a <_printf_float+0x24a>
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	f104 0919 	add.w	r9, r4, #25
 8006b96:	e7f4      	b.n	8006b82 <_printf_float+0x442>

08006b98 <_printf_common>:
 8006b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	4699      	mov	r9, r3
 8006ba0:	688a      	ldr	r2, [r1, #8]
 8006ba2:	690b      	ldr	r3, [r1, #16]
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	bfb8      	it	lt
 8006baa:	4613      	movlt	r3, r2
 8006bac:	6033      	str	r3, [r6, #0]
 8006bae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb8:	b10a      	cbz	r2, 8006bbe <_printf_common+0x26>
 8006bba:	3301      	adds	r3, #1
 8006bbc:	6033      	str	r3, [r6, #0]
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	0699      	lsls	r1, r3, #26
 8006bc2:	bf42      	ittt	mi
 8006bc4:	6833      	ldrmi	r3, [r6, #0]
 8006bc6:	3302      	addmi	r3, #2
 8006bc8:	6033      	strmi	r3, [r6, #0]
 8006bca:	6825      	ldr	r5, [r4, #0]
 8006bcc:	f015 0506 	ands.w	r5, r5, #6
 8006bd0:	d106      	bne.n	8006be0 <_printf_common+0x48>
 8006bd2:	f104 0a19 	add.w	sl, r4, #25
 8006bd6:	68e3      	ldr	r3, [r4, #12]
 8006bd8:	6832      	ldr	r2, [r6, #0]
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	42ab      	cmp	r3, r5
 8006bde:	dc28      	bgt.n	8006c32 <_printf_common+0x9a>
 8006be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006be4:	1e13      	subs	r3, r2, #0
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	bf18      	it	ne
 8006bea:	2301      	movne	r3, #1
 8006bec:	0692      	lsls	r2, r2, #26
 8006bee:	d42d      	bmi.n	8006c4c <_printf_common+0xb4>
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bf8:	47c0      	blx	r8
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d020      	beq.n	8006c40 <_printf_common+0xa8>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	68e5      	ldr	r5, [r4, #12]
 8006c02:	f003 0306 	and.w	r3, r3, #6
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	bf18      	it	ne
 8006c0a:	2500      	movne	r5, #0
 8006c0c:	6832      	ldr	r2, [r6, #0]
 8006c0e:	f04f 0600 	mov.w	r6, #0
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	bf08      	it	eq
 8006c16:	1aad      	subeq	r5, r5, r2
 8006c18:	6922      	ldr	r2, [r4, #16]
 8006c1a:	bf08      	it	eq
 8006c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bfc4      	itt	gt
 8006c24:	1a9b      	subgt	r3, r3, r2
 8006c26:	18ed      	addgt	r5, r5, r3
 8006c28:	341a      	adds	r4, #26
 8006c2a:	42b5      	cmp	r5, r6
 8006c2c:	d11a      	bne.n	8006c64 <_printf_common+0xcc>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	e008      	b.n	8006c44 <_printf_common+0xac>
 8006c32:	2301      	movs	r3, #1
 8006c34:	4652      	mov	r2, sl
 8006c36:	4649      	mov	r1, r9
 8006c38:	4638      	mov	r0, r7
 8006c3a:	47c0      	blx	r8
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d103      	bne.n	8006c48 <_printf_common+0xb0>
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c48:	3501      	adds	r5, #1
 8006c4a:	e7c4      	b.n	8006bd6 <_printf_common+0x3e>
 8006c4c:	2030      	movs	r0, #48	; 0x30
 8006c4e:	18e1      	adds	r1, r4, r3
 8006c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c5a:	4422      	add	r2, r4
 8006c5c:	3302      	adds	r3, #2
 8006c5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c62:	e7c5      	b.n	8006bf0 <_printf_common+0x58>
 8006c64:	2301      	movs	r3, #1
 8006c66:	4622      	mov	r2, r4
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c0      	blx	r8
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d0e6      	beq.n	8006c40 <_printf_common+0xa8>
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7d9      	b.n	8006c2a <_printf_common+0x92>
	...

08006c78 <_printf_i>:
 8006c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	7e27      	ldrb	r7, [r4, #24]
 8006c80:	4691      	mov	r9, r2
 8006c82:	2f78      	cmp	r7, #120	; 0x78
 8006c84:	4680      	mov	r8, r0
 8006c86:	469a      	mov	sl, r3
 8006c88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c8e:	d807      	bhi.n	8006ca0 <_printf_i+0x28>
 8006c90:	2f62      	cmp	r7, #98	; 0x62
 8006c92:	d80a      	bhi.n	8006caa <_printf_i+0x32>
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	f000 80d9 	beq.w	8006e4c <_printf_i+0x1d4>
 8006c9a:	2f58      	cmp	r7, #88	; 0x58
 8006c9c:	f000 80a4 	beq.w	8006de8 <_printf_i+0x170>
 8006ca0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ca8:	e03a      	b.n	8006d20 <_printf_i+0xa8>
 8006caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cae:	2b15      	cmp	r3, #21
 8006cb0:	d8f6      	bhi.n	8006ca0 <_printf_i+0x28>
 8006cb2:	a001      	add	r0, pc, #4	; (adr r0, 8006cb8 <_printf_i+0x40>)
 8006cb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d25 	.word	0x08006d25
 8006cc0:	08006ca1 	.word	0x08006ca1
 8006cc4:	08006ca1 	.word	0x08006ca1
 8006cc8:	08006ca1 	.word	0x08006ca1
 8006ccc:	08006ca1 	.word	0x08006ca1
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006ca1 	.word	0x08006ca1
 8006cd8:	08006ca1 	.word	0x08006ca1
 8006cdc:	08006ca1 	.word	0x08006ca1
 8006ce0:	08006ca1 	.word	0x08006ca1
 8006ce4:	08006e33 	.word	0x08006e33
 8006ce8:	08006d55 	.word	0x08006d55
 8006cec:	08006e15 	.word	0x08006e15
 8006cf0:	08006ca1 	.word	0x08006ca1
 8006cf4:	08006ca1 	.word	0x08006ca1
 8006cf8:	08006e55 	.word	0x08006e55
 8006cfc:	08006ca1 	.word	0x08006ca1
 8006d00:	08006d55 	.word	0x08006d55
 8006d04:	08006ca1 	.word	0x08006ca1
 8006d08:	08006ca1 	.word	0x08006ca1
 8006d0c:	08006e1d 	.word	0x08006e1d
 8006d10:	680b      	ldr	r3, [r1, #0]
 8006d12:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d16:	1d1a      	adds	r2, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	600a      	str	r2, [r1, #0]
 8006d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d20:	2301      	movs	r3, #1
 8006d22:	e0a4      	b.n	8006e6e <_printf_i+0x1f6>
 8006d24:	6825      	ldr	r5, [r4, #0]
 8006d26:	6808      	ldr	r0, [r1, #0]
 8006d28:	062e      	lsls	r6, r5, #24
 8006d2a:	f100 0304 	add.w	r3, r0, #4
 8006d2e:	d50a      	bpl.n	8006d46 <_printf_i+0xce>
 8006d30:	6805      	ldr	r5, [r0, #0]
 8006d32:	600b      	str	r3, [r1, #0]
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	da03      	bge.n	8006d40 <_printf_i+0xc8>
 8006d38:	232d      	movs	r3, #45	; 0x2d
 8006d3a:	426d      	negs	r5, r5
 8006d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d40:	230a      	movs	r3, #10
 8006d42:	485e      	ldr	r0, [pc, #376]	; (8006ebc <_printf_i+0x244>)
 8006d44:	e019      	b.n	8006d7a <_printf_i+0x102>
 8006d46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d4a:	6805      	ldr	r5, [r0, #0]
 8006d4c:	600b      	str	r3, [r1, #0]
 8006d4e:	bf18      	it	ne
 8006d50:	b22d      	sxthne	r5, r5
 8006d52:	e7ef      	b.n	8006d34 <_printf_i+0xbc>
 8006d54:	680b      	ldr	r3, [r1, #0]
 8006d56:	6825      	ldr	r5, [r4, #0]
 8006d58:	1d18      	adds	r0, r3, #4
 8006d5a:	6008      	str	r0, [r1, #0]
 8006d5c:	0628      	lsls	r0, r5, #24
 8006d5e:	d501      	bpl.n	8006d64 <_printf_i+0xec>
 8006d60:	681d      	ldr	r5, [r3, #0]
 8006d62:	e002      	b.n	8006d6a <_printf_i+0xf2>
 8006d64:	0669      	lsls	r1, r5, #25
 8006d66:	d5fb      	bpl.n	8006d60 <_printf_i+0xe8>
 8006d68:	881d      	ldrh	r5, [r3, #0]
 8006d6a:	2f6f      	cmp	r7, #111	; 0x6f
 8006d6c:	bf0c      	ite	eq
 8006d6e:	2308      	moveq	r3, #8
 8006d70:	230a      	movne	r3, #10
 8006d72:	4852      	ldr	r0, [pc, #328]	; (8006ebc <_printf_i+0x244>)
 8006d74:	2100      	movs	r1, #0
 8006d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d7a:	6866      	ldr	r6, [r4, #4]
 8006d7c:	2e00      	cmp	r6, #0
 8006d7e:	bfa8      	it	ge
 8006d80:	6821      	ldrge	r1, [r4, #0]
 8006d82:	60a6      	str	r6, [r4, #8]
 8006d84:	bfa4      	itt	ge
 8006d86:	f021 0104 	bicge.w	r1, r1, #4
 8006d8a:	6021      	strge	r1, [r4, #0]
 8006d8c:	b90d      	cbnz	r5, 8006d92 <_printf_i+0x11a>
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	d04d      	beq.n	8006e2e <_printf_i+0x1b6>
 8006d92:	4616      	mov	r6, r2
 8006d94:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d98:	fb03 5711 	mls	r7, r3, r1, r5
 8006d9c:	5dc7      	ldrb	r7, [r0, r7]
 8006d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006da2:	462f      	mov	r7, r5
 8006da4:	42bb      	cmp	r3, r7
 8006da6:	460d      	mov	r5, r1
 8006da8:	d9f4      	bls.n	8006d94 <_printf_i+0x11c>
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d10b      	bne.n	8006dc6 <_printf_i+0x14e>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	07df      	lsls	r7, r3, #31
 8006db2:	d508      	bpl.n	8006dc6 <_printf_i+0x14e>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	6861      	ldr	r1, [r4, #4]
 8006db8:	4299      	cmp	r1, r3
 8006dba:	bfde      	ittt	le
 8006dbc:	2330      	movle	r3, #48	; 0x30
 8006dbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dc6:	1b92      	subs	r2, r2, r6
 8006dc8:	6122      	str	r2, [r4, #16]
 8006dca:	464b      	mov	r3, r9
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4640      	mov	r0, r8
 8006dd0:	f8cd a000 	str.w	sl, [sp]
 8006dd4:	aa03      	add	r2, sp, #12
 8006dd6:	f7ff fedf 	bl	8006b98 <_printf_common>
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d14c      	bne.n	8006e78 <_printf_i+0x200>
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	b004      	add	sp, #16
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	4834      	ldr	r0, [pc, #208]	; (8006ebc <_printf_i+0x244>)
 8006dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006dee:	680e      	ldr	r6, [r1, #0]
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006df6:	061f      	lsls	r7, r3, #24
 8006df8:	600e      	str	r6, [r1, #0]
 8006dfa:	d514      	bpl.n	8006e26 <_printf_i+0x1ae>
 8006dfc:	07d9      	lsls	r1, r3, #31
 8006dfe:	bf44      	itt	mi
 8006e00:	f043 0320 	orrmi.w	r3, r3, #32
 8006e04:	6023      	strmi	r3, [r4, #0]
 8006e06:	b91d      	cbnz	r5, 8006e10 <_printf_i+0x198>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	f023 0320 	bic.w	r3, r3, #32
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	2310      	movs	r3, #16
 8006e12:	e7af      	b.n	8006d74 <_printf_i+0xfc>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	f043 0320 	orr.w	r3, r3, #32
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	2378      	movs	r3, #120	; 0x78
 8006e1e:	4828      	ldr	r0, [pc, #160]	; (8006ec0 <_printf_i+0x248>)
 8006e20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e24:	e7e3      	b.n	8006dee <_printf_i+0x176>
 8006e26:	065e      	lsls	r6, r3, #25
 8006e28:	bf48      	it	mi
 8006e2a:	b2ad      	uxthmi	r5, r5
 8006e2c:	e7e6      	b.n	8006dfc <_printf_i+0x184>
 8006e2e:	4616      	mov	r6, r2
 8006e30:	e7bb      	b.n	8006daa <_printf_i+0x132>
 8006e32:	680b      	ldr	r3, [r1, #0]
 8006e34:	6826      	ldr	r6, [r4, #0]
 8006e36:	1d1d      	adds	r5, r3, #4
 8006e38:	6960      	ldr	r0, [r4, #20]
 8006e3a:	600d      	str	r5, [r1, #0]
 8006e3c:	0635      	lsls	r5, r6, #24
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	d501      	bpl.n	8006e46 <_printf_i+0x1ce>
 8006e42:	6018      	str	r0, [r3, #0]
 8006e44:	e002      	b.n	8006e4c <_printf_i+0x1d4>
 8006e46:	0671      	lsls	r1, r6, #25
 8006e48:	d5fb      	bpl.n	8006e42 <_printf_i+0x1ca>
 8006e4a:	8018      	strh	r0, [r3, #0]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4616      	mov	r6, r2
 8006e50:	6123      	str	r3, [r4, #16]
 8006e52:	e7ba      	b.n	8006dca <_printf_i+0x152>
 8006e54:	680b      	ldr	r3, [r1, #0]
 8006e56:	1d1a      	adds	r2, r3, #4
 8006e58:	600a      	str	r2, [r1, #0]
 8006e5a:	681e      	ldr	r6, [r3, #0]
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4630      	mov	r0, r6
 8006e60:	6862      	ldr	r2, [r4, #4]
 8006e62:	f000 fed7 	bl	8007c14 <memchr>
 8006e66:	b108      	cbz	r0, 8006e6c <_printf_i+0x1f4>
 8006e68:	1b80      	subs	r0, r0, r6
 8006e6a:	6060      	str	r0, [r4, #4]
 8006e6c:	6863      	ldr	r3, [r4, #4]
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	2300      	movs	r3, #0
 8006e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e76:	e7a8      	b.n	8006dca <_printf_i+0x152>
 8006e78:	4632      	mov	r2, r6
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	47d0      	blx	sl
 8006e82:	3001      	adds	r0, #1
 8006e84:	d0ab      	beq.n	8006dde <_printf_i+0x166>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	079b      	lsls	r3, r3, #30
 8006e8a:	d413      	bmi.n	8006eb4 <_printf_i+0x23c>
 8006e8c:	68e0      	ldr	r0, [r4, #12]
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	4298      	cmp	r0, r3
 8006e92:	bfb8      	it	lt
 8006e94:	4618      	movlt	r0, r3
 8006e96:	e7a4      	b.n	8006de2 <_printf_i+0x16a>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	47d0      	blx	sl
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d09b      	beq.n	8006dde <_printf_i+0x166>
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	68e3      	ldr	r3, [r4, #12]
 8006eaa:	9903      	ldr	r1, [sp, #12]
 8006eac:	1a5b      	subs	r3, r3, r1
 8006eae:	42ab      	cmp	r3, r5
 8006eb0:	dcf2      	bgt.n	8006e98 <_printf_i+0x220>
 8006eb2:	e7eb      	b.n	8006e8c <_printf_i+0x214>
 8006eb4:	2500      	movs	r5, #0
 8006eb6:	f104 0619 	add.w	r6, r4, #25
 8006eba:	e7f5      	b.n	8006ea8 <_printf_i+0x230>
 8006ebc:	080093ea 	.word	0x080093ea
 8006ec0:	080093fb 	.word	0x080093fb

08006ec4 <siprintf>:
 8006ec4:	b40e      	push	{r1, r2, r3}
 8006ec6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eca:	b500      	push	{lr}
 8006ecc:	b09c      	sub	sp, #112	; 0x70
 8006ece:	ab1d      	add	r3, sp, #116	; 0x74
 8006ed0:	9002      	str	r0, [sp, #8]
 8006ed2:	9006      	str	r0, [sp, #24]
 8006ed4:	9107      	str	r1, [sp, #28]
 8006ed6:	9104      	str	r1, [sp, #16]
 8006ed8:	4808      	ldr	r0, [pc, #32]	; (8006efc <siprintf+0x38>)
 8006eda:	4909      	ldr	r1, [pc, #36]	; (8006f00 <siprintf+0x3c>)
 8006edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee0:	9105      	str	r1, [sp, #20]
 8006ee2:	6800      	ldr	r0, [r0, #0]
 8006ee4:	a902      	add	r1, sp, #8
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	f001 fb42 	bl	8008570 <_svfiprintf_r>
 8006eec:	2200      	movs	r2, #0
 8006eee:	9b02      	ldr	r3, [sp, #8]
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	b01c      	add	sp, #112	; 0x70
 8006ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef8:	b003      	add	sp, #12
 8006efa:	4770      	bx	lr
 8006efc:	2000000c 	.word	0x2000000c
 8006f00:	ffff0208 	.word	0xffff0208

08006f04 <quorem>:
 8006f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	6903      	ldr	r3, [r0, #16]
 8006f0a:	690c      	ldr	r4, [r1, #16]
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	42a3      	cmp	r3, r4
 8006f10:	f2c0 8083 	blt.w	800701a <quorem+0x116>
 8006f14:	3c01      	subs	r4, #1
 8006f16:	f100 0514 	add.w	r5, r0, #20
 8006f1a:	f101 0814 	add.w	r8, r1, #20
 8006f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f3c:	d332      	bcc.n	8006fa4 <quorem+0xa0>
 8006f3e:	f04f 0e00 	mov.w	lr, #0
 8006f42:	4640      	mov	r0, r8
 8006f44:	46ac      	mov	ip, r5
 8006f46:	46f2      	mov	sl, lr
 8006f48:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f4c:	b293      	uxth	r3, r2
 8006f4e:	fb06 e303 	mla	r3, r6, r3, lr
 8006f52:	0c12      	lsrs	r2, r2, #16
 8006f54:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f58:	fb06 e202 	mla	r2, r6, r2, lr
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	ebaa 0303 	sub.w	r3, sl, r3
 8006f62:	f8dc a000 	ldr.w	sl, [ip]
 8006f66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f6a:	fa1f fa8a 	uxth.w	sl, sl
 8006f6e:	4453      	add	r3, sl
 8006f70:	fa1f fa82 	uxth.w	sl, r2
 8006f74:	f8dc 2000 	ldr.w	r2, [ip]
 8006f78:	4581      	cmp	r9, r0
 8006f7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f88:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f8c:	f84c 3b04 	str.w	r3, [ip], #4
 8006f90:	d2da      	bcs.n	8006f48 <quorem+0x44>
 8006f92:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f96:	b92b      	cbnz	r3, 8006fa4 <quorem+0xa0>
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	3b04      	subs	r3, #4
 8006f9c:	429d      	cmp	r5, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	d32f      	bcc.n	8007002 <quorem+0xfe>
 8006fa2:	613c      	str	r4, [r7, #16]
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	f001 f8cb 	bl	8008140 <__mcmp>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	db25      	blt.n	8006ffa <quorem+0xf6>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f04f 0c00 	mov.w	ip, #0
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	f858 1b04 	ldr.w	r1, [r8], #4
 8006fba:	f8d0 e000 	ldr.w	lr, [r0]
 8006fbe:	b28b      	uxth	r3, r1
 8006fc0:	ebac 0303 	sub.w	r3, ip, r3
 8006fc4:	fa1f f28e 	uxth.w	r2, lr
 8006fc8:	4413      	add	r3, r2
 8006fca:	0c0a      	lsrs	r2, r1, #16
 8006fcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fda:	45c1      	cmp	r9, r8
 8006fdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fe0:	f840 3b04 	str.w	r3, [r0], #4
 8006fe4:	d2e7      	bcs.n	8006fb6 <quorem+0xb2>
 8006fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fee:	b922      	cbnz	r2, 8006ffa <quorem+0xf6>
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	429d      	cmp	r5, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	d30a      	bcc.n	800700e <quorem+0x10a>
 8006ff8:	613c      	str	r4, [r7, #16]
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	b003      	add	sp, #12
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	3b04      	subs	r3, #4
 8007006:	2a00      	cmp	r2, #0
 8007008:	d1cb      	bne.n	8006fa2 <quorem+0x9e>
 800700a:	3c01      	subs	r4, #1
 800700c:	e7c6      	b.n	8006f9c <quorem+0x98>
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	3b04      	subs	r3, #4
 8007012:	2a00      	cmp	r2, #0
 8007014:	d1f0      	bne.n	8006ff8 <quorem+0xf4>
 8007016:	3c01      	subs	r4, #1
 8007018:	e7eb      	b.n	8006ff2 <quorem+0xee>
 800701a:	2000      	movs	r0, #0
 800701c:	e7ee      	b.n	8006ffc <quorem+0xf8>
	...

08007020 <_dtoa_r>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	4616      	mov	r6, r2
 8007026:	461f      	mov	r7, r3
 8007028:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800702a:	b099      	sub	sp, #100	; 0x64
 800702c:	4605      	mov	r5, r0
 800702e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007032:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007036:	b974      	cbnz	r4, 8007056 <_dtoa_r+0x36>
 8007038:	2010      	movs	r0, #16
 800703a:	f000 fde3 	bl	8007c04 <malloc>
 800703e:	4602      	mov	r2, r0
 8007040:	6268      	str	r0, [r5, #36]	; 0x24
 8007042:	b920      	cbnz	r0, 800704e <_dtoa_r+0x2e>
 8007044:	21ea      	movs	r1, #234	; 0xea
 8007046:	4bae      	ldr	r3, [pc, #696]	; (8007300 <_dtoa_r+0x2e0>)
 8007048:	48ae      	ldr	r0, [pc, #696]	; (8007304 <_dtoa_r+0x2e4>)
 800704a:	f001 fba1 	bl	8008790 <__assert_func>
 800704e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007052:	6004      	str	r4, [r0, #0]
 8007054:	60c4      	str	r4, [r0, #12]
 8007056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007058:	6819      	ldr	r1, [r3, #0]
 800705a:	b151      	cbz	r1, 8007072 <_dtoa_r+0x52>
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	2301      	movs	r3, #1
 8007060:	4093      	lsls	r3, r2
 8007062:	604a      	str	r2, [r1, #4]
 8007064:	608b      	str	r3, [r1, #8]
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fe30 	bl	8007ccc <_Bfree>
 800706c:	2200      	movs	r2, #0
 800706e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	1e3b      	subs	r3, r7, #0
 8007074:	bfaf      	iteee	ge
 8007076:	2300      	movge	r3, #0
 8007078:	2201      	movlt	r2, #1
 800707a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800707e:	9305      	strlt	r3, [sp, #20]
 8007080:	bfa8      	it	ge
 8007082:	f8c8 3000 	strge.w	r3, [r8]
 8007086:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800708a:	4b9f      	ldr	r3, [pc, #636]	; (8007308 <_dtoa_r+0x2e8>)
 800708c:	bfb8      	it	lt
 800708e:	f8c8 2000 	strlt.w	r2, [r8]
 8007092:	ea33 0309 	bics.w	r3, r3, r9
 8007096:	d119      	bne.n	80070cc <_dtoa_r+0xac>
 8007098:	f242 730f 	movw	r3, #9999	; 0x270f
 800709c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070a4:	4333      	orrs	r3, r6
 80070a6:	f000 8580 	beq.w	8007baa <_dtoa_r+0xb8a>
 80070aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070ac:	b953      	cbnz	r3, 80070c4 <_dtoa_r+0xa4>
 80070ae:	4b97      	ldr	r3, [pc, #604]	; (800730c <_dtoa_r+0x2ec>)
 80070b0:	e022      	b.n	80070f8 <_dtoa_r+0xd8>
 80070b2:	4b97      	ldr	r3, [pc, #604]	; (8007310 <_dtoa_r+0x2f0>)
 80070b4:	9308      	str	r3, [sp, #32]
 80070b6:	3308      	adds	r3, #8
 80070b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	9808      	ldr	r0, [sp, #32]
 80070be:	b019      	add	sp, #100	; 0x64
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	4b91      	ldr	r3, [pc, #580]	; (800730c <_dtoa_r+0x2ec>)
 80070c6:	9308      	str	r3, [sp, #32]
 80070c8:	3303      	adds	r3, #3
 80070ca:	e7f5      	b.n	80070b8 <_dtoa_r+0x98>
 80070cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80070d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	f7f9 fc64 	bl	80009a8 <__aeabi_dcmpeq>
 80070e0:	4680      	mov	r8, r0
 80070e2:	b158      	cbz	r0, 80070fc <_dtoa_r+0xdc>
 80070e4:	2301      	movs	r3, #1
 80070e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8559 	beq.w	8007ba4 <_dtoa_r+0xb84>
 80070f2:	4888      	ldr	r0, [pc, #544]	; (8007314 <_dtoa_r+0x2f4>)
 80070f4:	6018      	str	r0, [r3, #0]
 80070f6:	1e43      	subs	r3, r0, #1
 80070f8:	9308      	str	r3, [sp, #32]
 80070fa:	e7df      	b.n	80070bc <_dtoa_r+0x9c>
 80070fc:	ab16      	add	r3, sp, #88	; 0x58
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	ab17      	add	r3, sp, #92	; 0x5c
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4628      	mov	r0, r5
 8007106:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800710a:	f001 f8c5 	bl	8008298 <__d2b>
 800710e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007112:	4682      	mov	sl, r0
 8007114:	2c00      	cmp	r4, #0
 8007116:	d07e      	beq.n	8007216 <_dtoa_r+0x1f6>
 8007118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800711c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007126:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800712a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800712e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007132:	2200      	movs	r2, #0
 8007134:	4b78      	ldr	r3, [pc, #480]	; (8007318 <_dtoa_r+0x2f8>)
 8007136:	f7f9 f817 	bl	8000168 <__aeabi_dsub>
 800713a:	a36b      	add	r3, pc, #428	; (adr r3, 80072e8 <_dtoa_r+0x2c8>)
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f7f9 f9ca 	bl	80004d8 <__aeabi_dmul>
 8007144:	a36a      	add	r3, pc, #424	; (adr r3, 80072f0 <_dtoa_r+0x2d0>)
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 f80f 	bl	800016c <__adddf3>
 800714e:	4606      	mov	r6, r0
 8007150:	4620      	mov	r0, r4
 8007152:	460f      	mov	r7, r1
 8007154:	f7f9 f956 	bl	8000404 <__aeabi_i2d>
 8007158:	a367      	add	r3, pc, #412	; (adr r3, 80072f8 <_dtoa_r+0x2d8>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 f9bb 	bl	80004d8 <__aeabi_dmul>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4630      	mov	r0, r6
 8007168:	4639      	mov	r1, r7
 800716a:	f7f8 ffff 	bl	800016c <__adddf3>
 800716e:	4606      	mov	r6, r0
 8007170:	460f      	mov	r7, r1
 8007172:	f7f9 fc61 	bl	8000a38 <__aeabi_d2iz>
 8007176:	2200      	movs	r2, #0
 8007178:	4681      	mov	r9, r0
 800717a:	2300      	movs	r3, #0
 800717c:	4630      	mov	r0, r6
 800717e:	4639      	mov	r1, r7
 8007180:	f7f9 fc1c 	bl	80009bc <__aeabi_dcmplt>
 8007184:	b148      	cbz	r0, 800719a <_dtoa_r+0x17a>
 8007186:	4648      	mov	r0, r9
 8007188:	f7f9 f93c 	bl	8000404 <__aeabi_i2d>
 800718c:	4632      	mov	r2, r6
 800718e:	463b      	mov	r3, r7
 8007190:	f7f9 fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007194:	b908      	cbnz	r0, 800719a <_dtoa_r+0x17a>
 8007196:	f109 39ff 	add.w	r9, r9, #4294967295
 800719a:	f1b9 0f16 	cmp.w	r9, #22
 800719e:	d857      	bhi.n	8007250 <_dtoa_r+0x230>
 80071a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071a4:	4b5d      	ldr	r3, [pc, #372]	; (800731c <_dtoa_r+0x2fc>)
 80071a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 fc05 	bl	80009bc <__aeabi_dcmplt>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d04e      	beq.n	8007254 <_dtoa_r+0x234>
 80071b6:	2300      	movs	r3, #0
 80071b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80071bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80071be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071c0:	1b1c      	subs	r4, r3, r4
 80071c2:	1e63      	subs	r3, r4, #1
 80071c4:	9309      	str	r3, [sp, #36]	; 0x24
 80071c6:	bf49      	itett	mi
 80071c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80071cc:	2300      	movpl	r3, #0
 80071ce:	9306      	strmi	r3, [sp, #24]
 80071d0:	2300      	movmi	r3, #0
 80071d2:	bf54      	ite	pl
 80071d4:	9306      	strpl	r3, [sp, #24]
 80071d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	db3c      	blt.n	8007258 <_dtoa_r+0x238>
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80071e4:	444b      	add	r3, r9
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	2300      	movs	r3, #0
 80071ea:	930a      	str	r3, [sp, #40]	; 0x28
 80071ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	d86c      	bhi.n	80072cc <_dtoa_r+0x2ac>
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	bfc4      	itt	gt
 80071f6:	3b04      	subgt	r3, #4
 80071f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80071fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071fc:	bfc8      	it	gt
 80071fe:	2400      	movgt	r4, #0
 8007200:	f1a3 0302 	sub.w	r3, r3, #2
 8007204:	bfd8      	it	le
 8007206:	2401      	movle	r4, #1
 8007208:	2b03      	cmp	r3, #3
 800720a:	f200 808b 	bhi.w	8007324 <_dtoa_r+0x304>
 800720e:	e8df f003 	tbb	[pc, r3]
 8007212:	4f2d      	.short	0x4f2d
 8007214:	5b4d      	.short	0x5b4d
 8007216:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800721a:	441c      	add	r4, r3
 800721c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007220:	2b20      	cmp	r3, #32
 8007222:	bfc3      	ittte	gt
 8007224:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007228:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800722c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007230:	f1c3 0320 	rsble	r3, r3, #32
 8007234:	bfc6      	itte	gt
 8007236:	fa26 f000 	lsrgt.w	r0, r6, r0
 800723a:	4318      	orrgt	r0, r3
 800723c:	fa06 f003 	lslle.w	r0, r6, r3
 8007240:	f7f9 f8d0 	bl	80003e4 <__aeabi_ui2d>
 8007244:	2301      	movs	r3, #1
 8007246:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800724a:	3c01      	subs	r4, #1
 800724c:	9313      	str	r3, [sp, #76]	; 0x4c
 800724e:	e770      	b.n	8007132 <_dtoa_r+0x112>
 8007250:	2301      	movs	r3, #1
 8007252:	e7b3      	b.n	80071bc <_dtoa_r+0x19c>
 8007254:	900f      	str	r0, [sp, #60]	; 0x3c
 8007256:	e7b2      	b.n	80071be <_dtoa_r+0x19e>
 8007258:	9b06      	ldr	r3, [sp, #24]
 800725a:	eba3 0309 	sub.w	r3, r3, r9
 800725e:	9306      	str	r3, [sp, #24]
 8007260:	f1c9 0300 	rsb	r3, r9, #0
 8007264:	930a      	str	r3, [sp, #40]	; 0x28
 8007266:	2300      	movs	r3, #0
 8007268:	930e      	str	r3, [sp, #56]	; 0x38
 800726a:	e7bf      	b.n	80071ec <_dtoa_r+0x1cc>
 800726c:	2300      	movs	r3, #0
 800726e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007270:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007272:	2b00      	cmp	r3, #0
 8007274:	dc59      	bgt.n	800732a <_dtoa_r+0x30a>
 8007276:	f04f 0b01 	mov.w	fp, #1
 800727a:	465b      	mov	r3, fp
 800727c:	f8cd b008 	str.w	fp, [sp, #8]
 8007280:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007284:	2200      	movs	r2, #0
 8007286:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007288:	6042      	str	r2, [r0, #4]
 800728a:	2204      	movs	r2, #4
 800728c:	f102 0614 	add.w	r6, r2, #20
 8007290:	429e      	cmp	r6, r3
 8007292:	6841      	ldr	r1, [r0, #4]
 8007294:	d94f      	bls.n	8007336 <_dtoa_r+0x316>
 8007296:	4628      	mov	r0, r5
 8007298:	f000 fcd8 	bl	8007c4c <_Balloc>
 800729c:	9008      	str	r0, [sp, #32]
 800729e:	2800      	cmp	r0, #0
 80072a0:	d14d      	bne.n	800733e <_dtoa_r+0x31e>
 80072a2:	4602      	mov	r2, r0
 80072a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <_dtoa_r+0x300>)
 80072aa:	e6cd      	b.n	8007048 <_dtoa_r+0x28>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e7de      	b.n	800726e <_dtoa_r+0x24e>
 80072b0:	2300      	movs	r3, #0
 80072b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072b6:	eb09 0b03 	add.w	fp, r9, r3
 80072ba:	f10b 0301 	add.w	r3, fp, #1
 80072be:	2b01      	cmp	r3, #1
 80072c0:	9302      	str	r3, [sp, #8]
 80072c2:	bfb8      	it	lt
 80072c4:	2301      	movlt	r3, #1
 80072c6:	e7dd      	b.n	8007284 <_dtoa_r+0x264>
 80072c8:	2301      	movs	r3, #1
 80072ca:	e7f2      	b.n	80072b2 <_dtoa_r+0x292>
 80072cc:	2401      	movs	r4, #1
 80072ce:	2300      	movs	r3, #0
 80072d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80072d2:	9322      	str	r3, [sp, #136]	; 0x88
 80072d4:	f04f 3bff 	mov.w	fp, #4294967295
 80072d8:	2200      	movs	r2, #0
 80072da:	2312      	movs	r3, #18
 80072dc:	f8cd b008 	str.w	fp, [sp, #8]
 80072e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80072e2:	e7cf      	b.n	8007284 <_dtoa_r+0x264>
 80072e4:	f3af 8000 	nop.w
 80072e8:	636f4361 	.word	0x636f4361
 80072ec:	3fd287a7 	.word	0x3fd287a7
 80072f0:	8b60c8b3 	.word	0x8b60c8b3
 80072f4:	3fc68a28 	.word	0x3fc68a28
 80072f8:	509f79fb 	.word	0x509f79fb
 80072fc:	3fd34413 	.word	0x3fd34413
 8007300:	08009419 	.word	0x08009419
 8007304:	08009430 	.word	0x08009430
 8007308:	7ff00000 	.word	0x7ff00000
 800730c:	08009415 	.word	0x08009415
 8007310:	0800940c 	.word	0x0800940c
 8007314:	080093e9 	.word	0x080093e9
 8007318:	3ff80000 	.word	0x3ff80000
 800731c:	08009528 	.word	0x08009528
 8007320:	0800948f 	.word	0x0800948f
 8007324:	2301      	movs	r3, #1
 8007326:	930b      	str	r3, [sp, #44]	; 0x2c
 8007328:	e7d4      	b.n	80072d4 <_dtoa_r+0x2b4>
 800732a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800732e:	465b      	mov	r3, fp
 8007330:	f8cd b008 	str.w	fp, [sp, #8]
 8007334:	e7a6      	b.n	8007284 <_dtoa_r+0x264>
 8007336:	3101      	adds	r1, #1
 8007338:	6041      	str	r1, [r0, #4]
 800733a:	0052      	lsls	r2, r2, #1
 800733c:	e7a6      	b.n	800728c <_dtoa_r+0x26c>
 800733e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007340:	9a08      	ldr	r2, [sp, #32]
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	9b02      	ldr	r3, [sp, #8]
 8007346:	2b0e      	cmp	r3, #14
 8007348:	f200 80a8 	bhi.w	800749c <_dtoa_r+0x47c>
 800734c:	2c00      	cmp	r4, #0
 800734e:	f000 80a5 	beq.w	800749c <_dtoa_r+0x47c>
 8007352:	f1b9 0f00 	cmp.w	r9, #0
 8007356:	dd34      	ble.n	80073c2 <_dtoa_r+0x3a2>
 8007358:	4a9a      	ldr	r2, [pc, #616]	; (80075c4 <_dtoa_r+0x5a4>)
 800735a:	f009 030f 	and.w	r3, r9, #15
 800735e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007362:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007366:	e9d3 3400 	ldrd	r3, r4, [r3]
 800736a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800736e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007372:	d016      	beq.n	80073a2 <_dtoa_r+0x382>
 8007374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007378:	4b93      	ldr	r3, [pc, #588]	; (80075c8 <_dtoa_r+0x5a8>)
 800737a:	2703      	movs	r7, #3
 800737c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007380:	f7f9 f9d4 	bl	800072c <__aeabi_ddiv>
 8007384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007388:	f004 040f 	and.w	r4, r4, #15
 800738c:	4e8e      	ldr	r6, [pc, #568]	; (80075c8 <_dtoa_r+0x5a8>)
 800738e:	b954      	cbnz	r4, 80073a6 <_dtoa_r+0x386>
 8007390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007398:	f7f9 f9c8 	bl	800072c <__aeabi_ddiv>
 800739c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a0:	e029      	b.n	80073f6 <_dtoa_r+0x3d6>
 80073a2:	2702      	movs	r7, #2
 80073a4:	e7f2      	b.n	800738c <_dtoa_r+0x36c>
 80073a6:	07e1      	lsls	r1, r4, #31
 80073a8:	d508      	bpl.n	80073bc <_dtoa_r+0x39c>
 80073aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073b2:	f7f9 f891 	bl	80004d8 <__aeabi_dmul>
 80073b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073ba:	3701      	adds	r7, #1
 80073bc:	1064      	asrs	r4, r4, #1
 80073be:	3608      	adds	r6, #8
 80073c0:	e7e5      	b.n	800738e <_dtoa_r+0x36e>
 80073c2:	f000 80a5 	beq.w	8007510 <_dtoa_r+0x4f0>
 80073c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073ca:	f1c9 0400 	rsb	r4, r9, #0
 80073ce:	4b7d      	ldr	r3, [pc, #500]	; (80075c4 <_dtoa_r+0x5a4>)
 80073d0:	f004 020f 	and.w	r2, r4, #15
 80073d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f9 f87c 	bl	80004d8 <__aeabi_dmul>
 80073e0:	2702      	movs	r7, #2
 80073e2:	2300      	movs	r3, #0
 80073e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073e8:	4e77      	ldr	r6, [pc, #476]	; (80075c8 <_dtoa_r+0x5a8>)
 80073ea:	1124      	asrs	r4, r4, #4
 80073ec:	2c00      	cmp	r4, #0
 80073ee:	f040 8084 	bne.w	80074fa <_dtoa_r+0x4da>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1d2      	bne.n	800739c <_dtoa_r+0x37c>
 80073f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 808b 	beq.w	8007514 <_dtoa_r+0x4f4>
 80073fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007402:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007406:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800740a:	2200      	movs	r2, #0
 800740c:	4b6f      	ldr	r3, [pc, #444]	; (80075cc <_dtoa_r+0x5ac>)
 800740e:	f7f9 fad5 	bl	80009bc <__aeabi_dcmplt>
 8007412:	2800      	cmp	r0, #0
 8007414:	d07e      	beq.n	8007514 <_dtoa_r+0x4f4>
 8007416:	9b02      	ldr	r3, [sp, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d07b      	beq.n	8007514 <_dtoa_r+0x4f4>
 800741c:	f1bb 0f00 	cmp.w	fp, #0
 8007420:	dd38      	ble.n	8007494 <_dtoa_r+0x474>
 8007422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007426:	2200      	movs	r2, #0
 8007428:	4b69      	ldr	r3, [pc, #420]	; (80075d0 <_dtoa_r+0x5b0>)
 800742a:	f7f9 f855 	bl	80004d8 <__aeabi_dmul>
 800742e:	465c      	mov	r4, fp
 8007430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007434:	f109 38ff 	add.w	r8, r9, #4294967295
 8007438:	3701      	adds	r7, #1
 800743a:	4638      	mov	r0, r7
 800743c:	f7f8 ffe2 	bl	8000404 <__aeabi_i2d>
 8007440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007444:	f7f9 f848 	bl	80004d8 <__aeabi_dmul>
 8007448:	2200      	movs	r2, #0
 800744a:	4b62      	ldr	r3, [pc, #392]	; (80075d4 <_dtoa_r+0x5b4>)
 800744c:	f7f8 fe8e 	bl	800016c <__adddf3>
 8007450:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007454:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007458:	9611      	str	r6, [sp, #68]	; 0x44
 800745a:	2c00      	cmp	r4, #0
 800745c:	d15d      	bne.n	800751a <_dtoa_r+0x4fa>
 800745e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007462:	2200      	movs	r2, #0
 8007464:	4b5c      	ldr	r3, [pc, #368]	; (80075d8 <_dtoa_r+0x5b8>)
 8007466:	f7f8 fe7f 	bl	8000168 <__aeabi_dsub>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007472:	4633      	mov	r3, r6
 8007474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007476:	f7f9 fabf 	bl	80009f8 <__aeabi_dcmpgt>
 800747a:	2800      	cmp	r0, #0
 800747c:	f040 829e 	bne.w	80079bc <_dtoa_r+0x99c>
 8007480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007486:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800748a:	f7f9 fa97 	bl	80009bc <__aeabi_dcmplt>
 800748e:	2800      	cmp	r0, #0
 8007490:	f040 8292 	bne.w	80079b8 <_dtoa_r+0x998>
 8007494:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007498:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800749c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f2c0 8153 	blt.w	800774a <_dtoa_r+0x72a>
 80074a4:	f1b9 0f0e 	cmp.w	r9, #14
 80074a8:	f300 814f 	bgt.w	800774a <_dtoa_r+0x72a>
 80074ac:	4b45      	ldr	r3, [pc, #276]	; (80075c4 <_dtoa_r+0x5a4>)
 80074ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80074b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80074ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f280 80db 	bge.w	8007678 <_dtoa_r+0x658>
 80074c2:	9b02      	ldr	r3, [sp, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f300 80d7 	bgt.w	8007678 <_dtoa_r+0x658>
 80074ca:	f040 8274 	bne.w	80079b6 <_dtoa_r+0x996>
 80074ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074d2:	2200      	movs	r2, #0
 80074d4:	4b40      	ldr	r3, [pc, #256]	; (80075d8 <_dtoa_r+0x5b8>)
 80074d6:	f7f8 ffff 	bl	80004d8 <__aeabi_dmul>
 80074da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074de:	f7f9 fa81 	bl	80009e4 <__aeabi_dcmpge>
 80074e2:	9c02      	ldr	r4, [sp, #8]
 80074e4:	4626      	mov	r6, r4
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f040 824a 	bne.w	8007980 <_dtoa_r+0x960>
 80074ec:	2331      	movs	r3, #49	; 0x31
 80074ee:	9f08      	ldr	r7, [sp, #32]
 80074f0:	f109 0901 	add.w	r9, r9, #1
 80074f4:	f807 3b01 	strb.w	r3, [r7], #1
 80074f8:	e246      	b.n	8007988 <_dtoa_r+0x968>
 80074fa:	07e2      	lsls	r2, r4, #31
 80074fc:	d505      	bpl.n	800750a <_dtoa_r+0x4ea>
 80074fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007502:	f7f8 ffe9 	bl	80004d8 <__aeabi_dmul>
 8007506:	2301      	movs	r3, #1
 8007508:	3701      	adds	r7, #1
 800750a:	1064      	asrs	r4, r4, #1
 800750c:	3608      	adds	r6, #8
 800750e:	e76d      	b.n	80073ec <_dtoa_r+0x3cc>
 8007510:	2702      	movs	r7, #2
 8007512:	e770      	b.n	80073f6 <_dtoa_r+0x3d6>
 8007514:	46c8      	mov	r8, r9
 8007516:	9c02      	ldr	r4, [sp, #8]
 8007518:	e78f      	b.n	800743a <_dtoa_r+0x41a>
 800751a:	9908      	ldr	r1, [sp, #32]
 800751c:	4b29      	ldr	r3, [pc, #164]	; (80075c4 <_dtoa_r+0x5a4>)
 800751e:	4421      	add	r1, r4
 8007520:	9112      	str	r1, [sp, #72]	; 0x48
 8007522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007524:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007528:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800752c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007530:	2900      	cmp	r1, #0
 8007532:	d055      	beq.n	80075e0 <_dtoa_r+0x5c0>
 8007534:	2000      	movs	r0, #0
 8007536:	4929      	ldr	r1, [pc, #164]	; (80075dc <_dtoa_r+0x5bc>)
 8007538:	f7f9 f8f8 	bl	800072c <__aeabi_ddiv>
 800753c:	463b      	mov	r3, r7
 800753e:	4632      	mov	r2, r6
 8007540:	f7f8 fe12 	bl	8000168 <__aeabi_dsub>
 8007544:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007548:	9f08      	ldr	r7, [sp, #32]
 800754a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800754e:	f7f9 fa73 	bl	8000a38 <__aeabi_d2iz>
 8007552:	4604      	mov	r4, r0
 8007554:	f7f8 ff56 	bl	8000404 <__aeabi_i2d>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007560:	f7f8 fe02 	bl	8000168 <__aeabi_dsub>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	3430      	adds	r4, #48	; 0x30
 800756a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800756e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007572:	f807 4b01 	strb.w	r4, [r7], #1
 8007576:	f7f9 fa21 	bl	80009bc <__aeabi_dcmplt>
 800757a:	2800      	cmp	r0, #0
 800757c:	d174      	bne.n	8007668 <_dtoa_r+0x648>
 800757e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007582:	2000      	movs	r0, #0
 8007584:	4911      	ldr	r1, [pc, #68]	; (80075cc <_dtoa_r+0x5ac>)
 8007586:	f7f8 fdef 	bl	8000168 <__aeabi_dsub>
 800758a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800758e:	f7f9 fa15 	bl	80009bc <__aeabi_dcmplt>
 8007592:	2800      	cmp	r0, #0
 8007594:	f040 80b6 	bne.w	8007704 <_dtoa_r+0x6e4>
 8007598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800759a:	429f      	cmp	r7, r3
 800759c:	f43f af7a 	beq.w	8007494 <_dtoa_r+0x474>
 80075a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075a4:	2200      	movs	r2, #0
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <_dtoa_r+0x5b0>)
 80075a8:	f7f8 ff96 	bl	80004d8 <__aeabi_dmul>
 80075ac:	2200      	movs	r2, #0
 80075ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075b6:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <_dtoa_r+0x5b0>)
 80075b8:	f7f8 ff8e 	bl	80004d8 <__aeabi_dmul>
 80075bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c0:	e7c3      	b.n	800754a <_dtoa_r+0x52a>
 80075c2:	bf00      	nop
 80075c4:	08009528 	.word	0x08009528
 80075c8:	08009500 	.word	0x08009500
 80075cc:	3ff00000 	.word	0x3ff00000
 80075d0:	40240000 	.word	0x40240000
 80075d4:	401c0000 	.word	0x401c0000
 80075d8:	40140000 	.word	0x40140000
 80075dc:	3fe00000 	.word	0x3fe00000
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f8 ff78 	bl	80004d8 <__aeabi_dmul>
 80075e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075ee:	9c08      	ldr	r4, [sp, #32]
 80075f0:	9314      	str	r3, [sp, #80]	; 0x50
 80075f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f6:	f7f9 fa1f 	bl	8000a38 <__aeabi_d2iz>
 80075fa:	9015      	str	r0, [sp, #84]	; 0x54
 80075fc:	f7f8 ff02 	bl	8000404 <__aeabi_i2d>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007608:	f7f8 fdae 	bl	8000168 <__aeabi_dsub>
 800760c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800760e:	4606      	mov	r6, r0
 8007610:	3330      	adds	r3, #48	; 0x30
 8007612:	f804 3b01 	strb.w	r3, [r4], #1
 8007616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007618:	460f      	mov	r7, r1
 800761a:	429c      	cmp	r4, r3
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	d124      	bne.n	800766c <_dtoa_r+0x64c>
 8007622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007626:	4bb3      	ldr	r3, [pc, #716]	; (80078f4 <_dtoa_r+0x8d4>)
 8007628:	f7f8 fda0 	bl	800016c <__adddf3>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f9 f9e0 	bl	80009f8 <__aeabi_dcmpgt>
 8007638:	2800      	cmp	r0, #0
 800763a:	d162      	bne.n	8007702 <_dtoa_r+0x6e2>
 800763c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007640:	2000      	movs	r0, #0
 8007642:	49ac      	ldr	r1, [pc, #688]	; (80078f4 <_dtoa_r+0x8d4>)
 8007644:	f7f8 fd90 	bl	8000168 <__aeabi_dsub>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f7f9 f9b4 	bl	80009bc <__aeabi_dcmplt>
 8007654:	2800      	cmp	r0, #0
 8007656:	f43f af1d 	beq.w	8007494 <_dtoa_r+0x474>
 800765a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800765c:	1e7b      	subs	r3, r7, #1
 800765e:	9314      	str	r3, [sp, #80]	; 0x50
 8007660:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007664:	2b30      	cmp	r3, #48	; 0x30
 8007666:	d0f8      	beq.n	800765a <_dtoa_r+0x63a>
 8007668:	46c1      	mov	r9, r8
 800766a:	e03a      	b.n	80076e2 <_dtoa_r+0x6c2>
 800766c:	4ba2      	ldr	r3, [pc, #648]	; (80078f8 <_dtoa_r+0x8d8>)
 800766e:	f7f8 ff33 	bl	80004d8 <__aeabi_dmul>
 8007672:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007676:	e7bc      	b.n	80075f2 <_dtoa_r+0x5d2>
 8007678:	9f08      	ldr	r7, [sp, #32]
 800767a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800767e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007682:	f7f9 f853 	bl	800072c <__aeabi_ddiv>
 8007686:	f7f9 f9d7 	bl	8000a38 <__aeabi_d2iz>
 800768a:	4604      	mov	r4, r0
 800768c:	f7f8 feba 	bl	8000404 <__aeabi_i2d>
 8007690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007694:	f7f8 ff20 	bl	80004d8 <__aeabi_dmul>
 8007698:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800769c:	460b      	mov	r3, r1
 800769e:	4602      	mov	r2, r0
 80076a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a4:	f7f8 fd60 	bl	8000168 <__aeabi_dsub>
 80076a8:	f807 6b01 	strb.w	r6, [r7], #1
 80076ac:	9e08      	ldr	r6, [sp, #32]
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	1bbe      	subs	r6, r7, r6
 80076b2:	42b3      	cmp	r3, r6
 80076b4:	d13a      	bne.n	800772c <_dtoa_r+0x70c>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	f7f8 fd57 	bl	800016c <__adddf3>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ca:	f7f9 f995 	bl	80009f8 <__aeabi_dcmpgt>
 80076ce:	bb58      	cbnz	r0, 8007728 <_dtoa_r+0x708>
 80076d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d8:	f7f9 f966 	bl	80009a8 <__aeabi_dcmpeq>
 80076dc:	b108      	cbz	r0, 80076e2 <_dtoa_r+0x6c2>
 80076de:	07e1      	lsls	r1, r4, #31
 80076e0:	d422      	bmi.n	8007728 <_dtoa_r+0x708>
 80076e2:	4628      	mov	r0, r5
 80076e4:	4651      	mov	r1, sl
 80076e6:	f000 faf1 	bl	8007ccc <_Bfree>
 80076ea:	2300      	movs	r3, #0
 80076ec:	703b      	strb	r3, [r7, #0]
 80076ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076f0:	f109 0001 	add.w	r0, r9, #1
 80076f4:	6018      	str	r0, [r3, #0]
 80076f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f43f acdf 	beq.w	80070bc <_dtoa_r+0x9c>
 80076fe:	601f      	str	r7, [r3, #0]
 8007700:	e4dc      	b.n	80070bc <_dtoa_r+0x9c>
 8007702:	4627      	mov	r7, r4
 8007704:	463b      	mov	r3, r7
 8007706:	461f      	mov	r7, r3
 8007708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800770c:	2a39      	cmp	r2, #57	; 0x39
 800770e:	d107      	bne.n	8007720 <_dtoa_r+0x700>
 8007710:	9a08      	ldr	r2, [sp, #32]
 8007712:	429a      	cmp	r2, r3
 8007714:	d1f7      	bne.n	8007706 <_dtoa_r+0x6e6>
 8007716:	2230      	movs	r2, #48	; 0x30
 8007718:	9908      	ldr	r1, [sp, #32]
 800771a:	f108 0801 	add.w	r8, r8, #1
 800771e:	700a      	strb	r2, [r1, #0]
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	3201      	adds	r2, #1
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e79f      	b.n	8007668 <_dtoa_r+0x648>
 8007728:	46c8      	mov	r8, r9
 800772a:	e7eb      	b.n	8007704 <_dtoa_r+0x6e4>
 800772c:	2200      	movs	r2, #0
 800772e:	4b72      	ldr	r3, [pc, #456]	; (80078f8 <_dtoa_r+0x8d8>)
 8007730:	f7f8 fed2 	bl	80004d8 <__aeabi_dmul>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800773c:	2200      	movs	r2, #0
 800773e:	2300      	movs	r3, #0
 8007740:	f7f9 f932 	bl	80009a8 <__aeabi_dcmpeq>
 8007744:	2800      	cmp	r0, #0
 8007746:	d098      	beq.n	800767a <_dtoa_r+0x65a>
 8007748:	e7cb      	b.n	80076e2 <_dtoa_r+0x6c2>
 800774a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800774c:	2a00      	cmp	r2, #0
 800774e:	f000 80cd 	beq.w	80078ec <_dtoa_r+0x8cc>
 8007752:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007754:	2a01      	cmp	r2, #1
 8007756:	f300 80af 	bgt.w	80078b8 <_dtoa_r+0x898>
 800775a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800775c:	2a00      	cmp	r2, #0
 800775e:	f000 80a7 	beq.w	80078b0 <_dtoa_r+0x890>
 8007762:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007766:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007768:	9f06      	ldr	r7, [sp, #24]
 800776a:	9a06      	ldr	r2, [sp, #24]
 800776c:	2101      	movs	r1, #1
 800776e:	441a      	add	r2, r3
 8007770:	9206      	str	r2, [sp, #24]
 8007772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007774:	4628      	mov	r0, r5
 8007776:	441a      	add	r2, r3
 8007778:	9209      	str	r2, [sp, #36]	; 0x24
 800777a:	f000 fb61 	bl	8007e40 <__i2b>
 800777e:	4606      	mov	r6, r0
 8007780:	2f00      	cmp	r7, #0
 8007782:	dd0c      	ble.n	800779e <_dtoa_r+0x77e>
 8007784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd09      	ble.n	800779e <_dtoa_r+0x77e>
 800778a:	42bb      	cmp	r3, r7
 800778c:	bfa8      	it	ge
 800778e:	463b      	movge	r3, r7
 8007790:	9a06      	ldr	r2, [sp, #24]
 8007792:	1aff      	subs	r7, r7, r3
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	9206      	str	r2, [sp, #24]
 8007798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	9309      	str	r3, [sp, #36]	; 0x24
 800779e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a0:	b1f3      	cbz	r3, 80077e0 <_dtoa_r+0x7c0>
 80077a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80a9 	beq.w	80078fc <_dtoa_r+0x8dc>
 80077aa:	2c00      	cmp	r4, #0
 80077ac:	dd10      	ble.n	80077d0 <_dtoa_r+0x7b0>
 80077ae:	4631      	mov	r1, r6
 80077b0:	4622      	mov	r2, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 fbfe 	bl	8007fb4 <__pow5mult>
 80077b8:	4652      	mov	r2, sl
 80077ba:	4601      	mov	r1, r0
 80077bc:	4606      	mov	r6, r0
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 fb54 	bl	8007e6c <__multiply>
 80077c4:	4680      	mov	r8, r0
 80077c6:	4651      	mov	r1, sl
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 fa7f 	bl	8007ccc <_Bfree>
 80077ce:	46c2      	mov	sl, r8
 80077d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d2:	1b1a      	subs	r2, r3, r4
 80077d4:	d004      	beq.n	80077e0 <_dtoa_r+0x7c0>
 80077d6:	4651      	mov	r1, sl
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 fbeb 	bl	8007fb4 <__pow5mult>
 80077de:	4682      	mov	sl, r0
 80077e0:	2101      	movs	r1, #1
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 fb2c 	bl	8007e40 <__i2b>
 80077e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ea:	4604      	mov	r4, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f340 8087 	ble.w	8007900 <_dtoa_r+0x8e0>
 80077f2:	461a      	mov	r2, r3
 80077f4:	4601      	mov	r1, r0
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 fbdc 	bl	8007fb4 <__pow5mult>
 80077fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077fe:	4604      	mov	r4, r0
 8007800:	2b01      	cmp	r3, #1
 8007802:	f340 8080 	ble.w	8007906 <_dtoa_r+0x8e6>
 8007806:	f04f 0800 	mov.w	r8, #0
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007810:	6918      	ldr	r0, [r3, #16]
 8007812:	f000 fac7 	bl	8007da4 <__hi0bits>
 8007816:	f1c0 0020 	rsb	r0, r0, #32
 800781a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781c:	4418      	add	r0, r3
 800781e:	f010 001f 	ands.w	r0, r0, #31
 8007822:	f000 8092 	beq.w	800794a <_dtoa_r+0x92a>
 8007826:	f1c0 0320 	rsb	r3, r0, #32
 800782a:	2b04      	cmp	r3, #4
 800782c:	f340 808a 	ble.w	8007944 <_dtoa_r+0x924>
 8007830:	f1c0 001c 	rsb	r0, r0, #28
 8007834:	9b06      	ldr	r3, [sp, #24]
 8007836:	4407      	add	r7, r0
 8007838:	4403      	add	r3, r0
 800783a:	9306      	str	r3, [sp, #24]
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	4403      	add	r3, r0
 8007840:	9309      	str	r3, [sp, #36]	; 0x24
 8007842:	9b06      	ldr	r3, [sp, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd05      	ble.n	8007854 <_dtoa_r+0x834>
 8007848:	4651      	mov	r1, sl
 800784a:	461a      	mov	r2, r3
 800784c:	4628      	mov	r0, r5
 800784e:	f000 fc0b 	bl	8008068 <__lshift>
 8007852:	4682      	mov	sl, r0
 8007854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007856:	2b00      	cmp	r3, #0
 8007858:	dd05      	ble.n	8007866 <_dtoa_r+0x846>
 800785a:	4621      	mov	r1, r4
 800785c:	461a      	mov	r2, r3
 800785e:	4628      	mov	r0, r5
 8007860:	f000 fc02 	bl	8008068 <__lshift>
 8007864:	4604      	mov	r4, r0
 8007866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d070      	beq.n	800794e <_dtoa_r+0x92e>
 800786c:	4621      	mov	r1, r4
 800786e:	4650      	mov	r0, sl
 8007870:	f000 fc66 	bl	8008140 <__mcmp>
 8007874:	2800      	cmp	r0, #0
 8007876:	da6a      	bge.n	800794e <_dtoa_r+0x92e>
 8007878:	2300      	movs	r3, #0
 800787a:	4651      	mov	r1, sl
 800787c:	220a      	movs	r2, #10
 800787e:	4628      	mov	r0, r5
 8007880:	f000 fa46 	bl	8007d10 <__multadd>
 8007884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007886:	4682      	mov	sl, r0
 8007888:	f109 39ff 	add.w	r9, r9, #4294967295
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 8193 	beq.w	8007bb8 <_dtoa_r+0xb98>
 8007892:	4631      	mov	r1, r6
 8007894:	2300      	movs	r3, #0
 8007896:	220a      	movs	r2, #10
 8007898:	4628      	mov	r0, r5
 800789a:	f000 fa39 	bl	8007d10 <__multadd>
 800789e:	f1bb 0f00 	cmp.w	fp, #0
 80078a2:	4606      	mov	r6, r0
 80078a4:	f300 8093 	bgt.w	80079ce <_dtoa_r+0x9ae>
 80078a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	dc57      	bgt.n	800795e <_dtoa_r+0x93e>
 80078ae:	e08e      	b.n	80079ce <_dtoa_r+0x9ae>
 80078b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078b6:	e756      	b.n	8007766 <_dtoa_r+0x746>
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	1e5c      	subs	r4, r3, #1
 80078bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078be:	42a3      	cmp	r3, r4
 80078c0:	bfb7      	itett	lt
 80078c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078c4:	1b1c      	subge	r4, r3, r4
 80078c6:	1ae2      	sublt	r2, r4, r3
 80078c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80078ca:	bfbe      	ittt	lt
 80078cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80078ce:	189b      	addlt	r3, r3, r2
 80078d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80078d2:	9b02      	ldr	r3, [sp, #8]
 80078d4:	bfb8      	it	lt
 80078d6:	2400      	movlt	r4, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bfbb      	ittet	lt
 80078dc:	9b06      	ldrlt	r3, [sp, #24]
 80078de:	9a02      	ldrlt	r2, [sp, #8]
 80078e0:	9f06      	ldrge	r7, [sp, #24]
 80078e2:	1a9f      	sublt	r7, r3, r2
 80078e4:	bfac      	ite	ge
 80078e6:	9b02      	ldrge	r3, [sp, #8]
 80078e8:	2300      	movlt	r3, #0
 80078ea:	e73e      	b.n	800776a <_dtoa_r+0x74a>
 80078ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078ee:	9f06      	ldr	r7, [sp, #24]
 80078f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078f2:	e745      	b.n	8007780 <_dtoa_r+0x760>
 80078f4:	3fe00000 	.word	0x3fe00000
 80078f8:	40240000 	.word	0x40240000
 80078fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078fe:	e76a      	b.n	80077d6 <_dtoa_r+0x7b6>
 8007900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007902:	2b01      	cmp	r3, #1
 8007904:	dc19      	bgt.n	800793a <_dtoa_r+0x91a>
 8007906:	9b04      	ldr	r3, [sp, #16]
 8007908:	b9bb      	cbnz	r3, 800793a <_dtoa_r+0x91a>
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007910:	b99b      	cbnz	r3, 800793a <_dtoa_r+0x91a>
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007918:	0d1b      	lsrs	r3, r3, #20
 800791a:	051b      	lsls	r3, r3, #20
 800791c:	b183      	cbz	r3, 8007940 <_dtoa_r+0x920>
 800791e:	f04f 0801 	mov.w	r8, #1
 8007922:	9b06      	ldr	r3, [sp, #24]
 8007924:	3301      	adds	r3, #1
 8007926:	9306      	str	r3, [sp, #24]
 8007928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792a:	3301      	adds	r3, #1
 800792c:	9309      	str	r3, [sp, #36]	; 0x24
 800792e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	f47f af6a 	bne.w	800780a <_dtoa_r+0x7ea>
 8007936:	2001      	movs	r0, #1
 8007938:	e76f      	b.n	800781a <_dtoa_r+0x7fa>
 800793a:	f04f 0800 	mov.w	r8, #0
 800793e:	e7f6      	b.n	800792e <_dtoa_r+0x90e>
 8007940:	4698      	mov	r8, r3
 8007942:	e7f4      	b.n	800792e <_dtoa_r+0x90e>
 8007944:	f43f af7d 	beq.w	8007842 <_dtoa_r+0x822>
 8007948:	4618      	mov	r0, r3
 800794a:	301c      	adds	r0, #28
 800794c:	e772      	b.n	8007834 <_dtoa_r+0x814>
 800794e:	9b02      	ldr	r3, [sp, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	dc36      	bgt.n	80079c2 <_dtoa_r+0x9a2>
 8007954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007956:	2b02      	cmp	r3, #2
 8007958:	dd33      	ble.n	80079c2 <_dtoa_r+0x9a2>
 800795a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800795e:	f1bb 0f00 	cmp.w	fp, #0
 8007962:	d10d      	bne.n	8007980 <_dtoa_r+0x960>
 8007964:	4621      	mov	r1, r4
 8007966:	465b      	mov	r3, fp
 8007968:	2205      	movs	r2, #5
 800796a:	4628      	mov	r0, r5
 800796c:	f000 f9d0 	bl	8007d10 <__multadd>
 8007970:	4601      	mov	r1, r0
 8007972:	4604      	mov	r4, r0
 8007974:	4650      	mov	r0, sl
 8007976:	f000 fbe3 	bl	8008140 <__mcmp>
 800797a:	2800      	cmp	r0, #0
 800797c:	f73f adb6 	bgt.w	80074ec <_dtoa_r+0x4cc>
 8007980:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007982:	9f08      	ldr	r7, [sp, #32]
 8007984:	ea6f 0903 	mvn.w	r9, r3
 8007988:	f04f 0800 	mov.w	r8, #0
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f99c 	bl	8007ccc <_Bfree>
 8007994:	2e00      	cmp	r6, #0
 8007996:	f43f aea4 	beq.w	80076e2 <_dtoa_r+0x6c2>
 800799a:	f1b8 0f00 	cmp.w	r8, #0
 800799e:	d005      	beq.n	80079ac <_dtoa_r+0x98c>
 80079a0:	45b0      	cmp	r8, r6
 80079a2:	d003      	beq.n	80079ac <_dtoa_r+0x98c>
 80079a4:	4641      	mov	r1, r8
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 f990 	bl	8007ccc <_Bfree>
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f98c 	bl	8007ccc <_Bfree>
 80079b4:	e695      	b.n	80076e2 <_dtoa_r+0x6c2>
 80079b6:	2400      	movs	r4, #0
 80079b8:	4626      	mov	r6, r4
 80079ba:	e7e1      	b.n	8007980 <_dtoa_r+0x960>
 80079bc:	46c1      	mov	r9, r8
 80079be:	4626      	mov	r6, r4
 80079c0:	e594      	b.n	80074ec <_dtoa_r+0x4cc>
 80079c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80fc 	beq.w	8007bc6 <_dtoa_r+0xba6>
 80079ce:	2f00      	cmp	r7, #0
 80079d0:	dd05      	ble.n	80079de <_dtoa_r+0x9be>
 80079d2:	4631      	mov	r1, r6
 80079d4:	463a      	mov	r2, r7
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 fb46 	bl	8008068 <__lshift>
 80079dc:	4606      	mov	r6, r0
 80079de:	f1b8 0f00 	cmp.w	r8, #0
 80079e2:	d05c      	beq.n	8007a9e <_dtoa_r+0xa7e>
 80079e4:	4628      	mov	r0, r5
 80079e6:	6871      	ldr	r1, [r6, #4]
 80079e8:	f000 f930 	bl	8007c4c <_Balloc>
 80079ec:	4607      	mov	r7, r0
 80079ee:	b928      	cbnz	r0, 80079fc <_dtoa_r+0x9dc>
 80079f0:	4602      	mov	r2, r0
 80079f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079f6:	4b7e      	ldr	r3, [pc, #504]	; (8007bf0 <_dtoa_r+0xbd0>)
 80079f8:	f7ff bb26 	b.w	8007048 <_dtoa_r+0x28>
 80079fc:	6932      	ldr	r2, [r6, #16]
 80079fe:	f106 010c 	add.w	r1, r6, #12
 8007a02:	3202      	adds	r2, #2
 8007a04:	0092      	lsls	r2, r2, #2
 8007a06:	300c      	adds	r0, #12
 8007a08:	f000 f912 	bl	8007c30 <memcpy>
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	4639      	mov	r1, r7
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 fb29 	bl	8008068 <__lshift>
 8007a16:	46b0      	mov	r8, r6
 8007a18:	4606      	mov	r6, r0
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	9302      	str	r3, [sp, #8]
 8007a20:	9b08      	ldr	r3, [sp, #32]
 8007a22:	445b      	add	r3, fp
 8007a24:	930a      	str	r3, [sp, #40]	; 0x28
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2e:	9b02      	ldr	r3, [sp, #8]
 8007a30:	4621      	mov	r1, r4
 8007a32:	4650      	mov	r0, sl
 8007a34:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a38:	f7ff fa64 	bl	8006f04 <quorem>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	4641      	mov	r1, r8
 8007a40:	3330      	adds	r3, #48	; 0x30
 8007a42:	9004      	str	r0, [sp, #16]
 8007a44:	4650      	mov	r0, sl
 8007a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a48:	f000 fb7a 	bl	8008140 <__mcmp>
 8007a4c:	4632      	mov	r2, r6
 8007a4e:	9006      	str	r0, [sp, #24]
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 fb90 	bl	8008178 <__mdiff>
 8007a58:	68c2      	ldr	r2, [r0, #12]
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5e:	bb02      	cbnz	r2, 8007aa2 <_dtoa_r+0xa82>
 8007a60:	4601      	mov	r1, r0
 8007a62:	4650      	mov	r0, sl
 8007a64:	f000 fb6c 	bl	8008140 <__mcmp>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	4628      	mov	r0, r5
 8007a70:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007a74:	f000 f92a 	bl	8007ccc <_Bfree>
 8007a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a7c:	9f02      	ldr	r7, [sp, #8]
 8007a7e:	ea43 0102 	orr.w	r1, r3, r2
 8007a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a84:	430b      	orrs	r3, r1
 8007a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a88:	d10d      	bne.n	8007aa6 <_dtoa_r+0xa86>
 8007a8a:	2b39      	cmp	r3, #57	; 0x39
 8007a8c:	d027      	beq.n	8007ade <_dtoa_r+0xabe>
 8007a8e:	9a06      	ldr	r2, [sp, #24]
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	dd01      	ble.n	8007a98 <_dtoa_r+0xa78>
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	3331      	adds	r3, #49	; 0x31
 8007a98:	f88b 3000 	strb.w	r3, [fp]
 8007a9c:	e776      	b.n	800798c <_dtoa_r+0x96c>
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	e7b9      	b.n	8007a16 <_dtoa_r+0x9f6>
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	e7e2      	b.n	8007a6c <_dtoa_r+0xa4c>
 8007aa6:	9906      	ldr	r1, [sp, #24]
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	db04      	blt.n	8007ab6 <_dtoa_r+0xa96>
 8007aac:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007aae:	4301      	orrs	r1, r0
 8007ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ab2:	4301      	orrs	r1, r0
 8007ab4:	d120      	bne.n	8007af8 <_dtoa_r+0xad8>
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	ddee      	ble.n	8007a98 <_dtoa_r+0xa78>
 8007aba:	4651      	mov	r1, sl
 8007abc:	2201      	movs	r2, #1
 8007abe:	4628      	mov	r0, r5
 8007ac0:	9302      	str	r3, [sp, #8]
 8007ac2:	f000 fad1 	bl	8008068 <__lshift>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4682      	mov	sl, r0
 8007aca:	f000 fb39 	bl	8008140 <__mcmp>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	dc02      	bgt.n	8007ada <_dtoa_r+0xaba>
 8007ad4:	d1e0      	bne.n	8007a98 <_dtoa_r+0xa78>
 8007ad6:	07da      	lsls	r2, r3, #31
 8007ad8:	d5de      	bpl.n	8007a98 <_dtoa_r+0xa78>
 8007ada:	2b39      	cmp	r3, #57	; 0x39
 8007adc:	d1da      	bne.n	8007a94 <_dtoa_r+0xa74>
 8007ade:	2339      	movs	r3, #57	; 0x39
 8007ae0:	f88b 3000 	strb.w	r3, [fp]
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	2a39      	cmp	r2, #57	; 0x39
 8007af0:	d050      	beq.n	8007b94 <_dtoa_r+0xb74>
 8007af2:	3201      	adds	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e749      	b.n	800798c <_dtoa_r+0x96c>
 8007af8:	2a00      	cmp	r2, #0
 8007afa:	dd03      	ble.n	8007b04 <_dtoa_r+0xae4>
 8007afc:	2b39      	cmp	r3, #57	; 0x39
 8007afe:	d0ee      	beq.n	8007ade <_dtoa_r+0xabe>
 8007b00:	3301      	adds	r3, #1
 8007b02:	e7c9      	b.n	8007a98 <_dtoa_r+0xa78>
 8007b04:	9a02      	ldr	r2, [sp, #8]
 8007b06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b0c:	428a      	cmp	r2, r1
 8007b0e:	d02a      	beq.n	8007b66 <_dtoa_r+0xb46>
 8007b10:	4651      	mov	r1, sl
 8007b12:	2300      	movs	r3, #0
 8007b14:	220a      	movs	r2, #10
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f8fa 	bl	8007d10 <__multadd>
 8007b1c:	45b0      	cmp	r8, r6
 8007b1e:	4682      	mov	sl, r0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	f04f 020a 	mov.w	r2, #10
 8007b28:	4641      	mov	r1, r8
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	d107      	bne.n	8007b3e <_dtoa_r+0xb1e>
 8007b2e:	f000 f8ef 	bl	8007d10 <__multadd>
 8007b32:	4680      	mov	r8, r0
 8007b34:	4606      	mov	r6, r0
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	9302      	str	r3, [sp, #8]
 8007b3c:	e777      	b.n	8007a2e <_dtoa_r+0xa0e>
 8007b3e:	f000 f8e7 	bl	8007d10 <__multadd>
 8007b42:	4631      	mov	r1, r6
 8007b44:	4680      	mov	r8, r0
 8007b46:	2300      	movs	r3, #0
 8007b48:	220a      	movs	r2, #10
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 f8e0 	bl	8007d10 <__multadd>
 8007b50:	4606      	mov	r6, r0
 8007b52:	e7f0      	b.n	8007b36 <_dtoa_r+0xb16>
 8007b54:	f1bb 0f00 	cmp.w	fp, #0
 8007b58:	bfcc      	ite	gt
 8007b5a:	465f      	movgt	r7, fp
 8007b5c:	2701      	movle	r7, #1
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	9a08      	ldr	r2, [sp, #32]
 8007b64:	4417      	add	r7, r2
 8007b66:	4651      	mov	r1, sl
 8007b68:	2201      	movs	r2, #1
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	9302      	str	r3, [sp, #8]
 8007b6e:	f000 fa7b 	bl	8008068 <__lshift>
 8007b72:	4621      	mov	r1, r4
 8007b74:	4682      	mov	sl, r0
 8007b76:	f000 fae3 	bl	8008140 <__mcmp>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	dcb2      	bgt.n	8007ae4 <_dtoa_r+0xac4>
 8007b7e:	d102      	bne.n	8007b86 <_dtoa_r+0xb66>
 8007b80:	9b02      	ldr	r3, [sp, #8]
 8007b82:	07db      	lsls	r3, r3, #31
 8007b84:	d4ae      	bmi.n	8007ae4 <_dtoa_r+0xac4>
 8007b86:	463b      	mov	r3, r7
 8007b88:	461f      	mov	r7, r3
 8007b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b8e:	2a30      	cmp	r2, #48	; 0x30
 8007b90:	d0fa      	beq.n	8007b88 <_dtoa_r+0xb68>
 8007b92:	e6fb      	b.n	800798c <_dtoa_r+0x96c>
 8007b94:	9a08      	ldr	r2, [sp, #32]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d1a5      	bne.n	8007ae6 <_dtoa_r+0xac6>
 8007b9a:	2331      	movs	r3, #49	; 0x31
 8007b9c:	f109 0901 	add.w	r9, r9, #1
 8007ba0:	7013      	strb	r3, [r2, #0]
 8007ba2:	e6f3      	b.n	800798c <_dtoa_r+0x96c>
 8007ba4:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <_dtoa_r+0xbd4>)
 8007ba6:	f7ff baa7 	b.w	80070f8 <_dtoa_r+0xd8>
 8007baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f47f aa80 	bne.w	80070b2 <_dtoa_r+0x92>
 8007bb2:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <_dtoa_r+0xbd8>)
 8007bb4:	f7ff baa0 	b.w	80070f8 <_dtoa_r+0xd8>
 8007bb8:	f1bb 0f00 	cmp.w	fp, #0
 8007bbc:	dc03      	bgt.n	8007bc6 <_dtoa_r+0xba6>
 8007bbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	f73f aecc 	bgt.w	800795e <_dtoa_r+0x93e>
 8007bc6:	9f08      	ldr	r7, [sp, #32]
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4650      	mov	r0, sl
 8007bcc:	f7ff f99a 	bl	8006f04 <quorem>
 8007bd0:	9a08      	ldr	r2, [sp, #32]
 8007bd2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007bd6:	f807 3b01 	strb.w	r3, [r7], #1
 8007bda:	1aba      	subs	r2, r7, r2
 8007bdc:	4593      	cmp	fp, r2
 8007bde:	ddb9      	ble.n	8007b54 <_dtoa_r+0xb34>
 8007be0:	4651      	mov	r1, sl
 8007be2:	2300      	movs	r3, #0
 8007be4:	220a      	movs	r2, #10
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 f892 	bl	8007d10 <__multadd>
 8007bec:	4682      	mov	sl, r0
 8007bee:	e7eb      	b.n	8007bc8 <_dtoa_r+0xba8>
 8007bf0:	0800948f 	.word	0x0800948f
 8007bf4:	080093e8 	.word	0x080093e8
 8007bf8:	0800940c 	.word	0x0800940c

08007bfc <_localeconv_r>:
 8007bfc:	4800      	ldr	r0, [pc, #0]	; (8007c00 <_localeconv_r+0x4>)
 8007bfe:	4770      	bx	lr
 8007c00:	20000160 	.word	0x20000160

08007c04 <malloc>:
 8007c04:	4b02      	ldr	r3, [pc, #8]	; (8007c10 <malloc+0xc>)
 8007c06:	4601      	mov	r1, r0
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	f000 bbfb 	b.w	8008404 <_malloc_r>
 8007c0e:	bf00      	nop
 8007c10:	2000000c 	.word	0x2000000c

08007c14 <memchr>:
 8007c14:	4603      	mov	r3, r0
 8007c16:	b510      	push	{r4, lr}
 8007c18:	b2c9      	uxtb	r1, r1
 8007c1a:	4402      	add	r2, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	d101      	bne.n	8007c26 <memchr+0x12>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e003      	b.n	8007c2e <memchr+0x1a>
 8007c26:	7804      	ldrb	r4, [r0, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	428c      	cmp	r4, r1
 8007c2c:	d1f6      	bne.n	8007c1c <memchr+0x8>
 8007c2e:	bd10      	pop	{r4, pc}

08007c30 <memcpy>:
 8007c30:	440a      	add	r2, r1
 8007c32:	4291      	cmp	r1, r2
 8007c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c38:	d100      	bne.n	8007c3c <memcpy+0xc>
 8007c3a:	4770      	bx	lr
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c42:	4291      	cmp	r1, r2
 8007c44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c48:	d1f9      	bne.n	8007c3e <memcpy+0xe>
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <_Balloc>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c50:	4604      	mov	r4, r0
 8007c52:	460d      	mov	r5, r1
 8007c54:	b976      	cbnz	r6, 8007c74 <_Balloc+0x28>
 8007c56:	2010      	movs	r0, #16
 8007c58:	f7ff ffd4 	bl	8007c04 <malloc>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6260      	str	r0, [r4, #36]	; 0x24
 8007c60:	b920      	cbnz	r0, 8007c6c <_Balloc+0x20>
 8007c62:	2166      	movs	r1, #102	; 0x66
 8007c64:	4b17      	ldr	r3, [pc, #92]	; (8007cc4 <_Balloc+0x78>)
 8007c66:	4818      	ldr	r0, [pc, #96]	; (8007cc8 <_Balloc+0x7c>)
 8007c68:	f000 fd92 	bl	8008790 <__assert_func>
 8007c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c70:	6006      	str	r6, [r0, #0]
 8007c72:	60c6      	str	r6, [r0, #12]
 8007c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c76:	68f3      	ldr	r3, [r6, #12]
 8007c78:	b183      	cbz	r3, 8007c9c <_Balloc+0x50>
 8007c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c82:	b9b8      	cbnz	r0, 8007cb4 <_Balloc+0x68>
 8007c84:	2101      	movs	r1, #1
 8007c86:	fa01 f605 	lsl.w	r6, r1, r5
 8007c8a:	1d72      	adds	r2, r6, #5
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	f000 fb5e 	bl	8008350 <_calloc_r>
 8007c94:	b160      	cbz	r0, 8007cb0 <_Balloc+0x64>
 8007c96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c9a:	e00e      	b.n	8007cba <_Balloc+0x6e>
 8007c9c:	2221      	movs	r2, #33	; 0x21
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fb55 	bl	8008350 <_calloc_r>
 8007ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca8:	60f0      	str	r0, [r6, #12]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e4      	bne.n	8007c7a <_Balloc+0x2e>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	6802      	ldr	r2, [r0, #0]
 8007cb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cc0:	e7f7      	b.n	8007cb2 <_Balloc+0x66>
 8007cc2:	bf00      	nop
 8007cc4:	08009419 	.word	0x08009419
 8007cc8:	080094a0 	.word	0x080094a0

08007ccc <_Bfree>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	b976      	cbnz	r6, 8007cf4 <_Bfree+0x28>
 8007cd6:	2010      	movs	r0, #16
 8007cd8:	f7ff ff94 	bl	8007c04 <malloc>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6268      	str	r0, [r5, #36]	; 0x24
 8007ce0:	b920      	cbnz	r0, 8007cec <_Bfree+0x20>
 8007ce2:	218a      	movs	r1, #138	; 0x8a
 8007ce4:	4b08      	ldr	r3, [pc, #32]	; (8007d08 <_Bfree+0x3c>)
 8007ce6:	4809      	ldr	r0, [pc, #36]	; (8007d0c <_Bfree+0x40>)
 8007ce8:	f000 fd52 	bl	8008790 <__assert_func>
 8007cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf0:	6006      	str	r6, [r0, #0]
 8007cf2:	60c6      	str	r6, [r0, #12]
 8007cf4:	b13c      	cbz	r4, 8007d06 <_Bfree+0x3a>
 8007cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cf8:	6862      	ldr	r2, [r4, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d00:	6021      	str	r1, [r4, #0]
 8007d02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	08009419 	.word	0x08009419
 8007d0c:	080094a0 	.word	0x080094a0

08007d10 <__multadd>:
 8007d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d14:	4698      	mov	r8, r3
 8007d16:	460c      	mov	r4, r1
 8007d18:	2300      	movs	r3, #0
 8007d1a:	690e      	ldr	r6, [r1, #16]
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	f101 0014 	add.w	r0, r1, #20
 8007d22:	6805      	ldr	r5, [r0, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	b2a9      	uxth	r1, r5
 8007d28:	fb02 8101 	mla	r1, r2, r1, r8
 8007d2c:	0c2d      	lsrs	r5, r5, #16
 8007d2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d32:	fb02 c505 	mla	r5, r2, r5, ip
 8007d36:	b289      	uxth	r1, r1
 8007d38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d3c:	429e      	cmp	r6, r3
 8007d3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d42:	f840 1b04 	str.w	r1, [r0], #4
 8007d46:	dcec      	bgt.n	8007d22 <__multadd+0x12>
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	d022      	beq.n	8007d94 <__multadd+0x84>
 8007d4e:	68a3      	ldr	r3, [r4, #8]
 8007d50:	42b3      	cmp	r3, r6
 8007d52:	dc19      	bgt.n	8007d88 <__multadd+0x78>
 8007d54:	6861      	ldr	r1, [r4, #4]
 8007d56:	4638      	mov	r0, r7
 8007d58:	3101      	adds	r1, #1
 8007d5a:	f7ff ff77 	bl	8007c4c <_Balloc>
 8007d5e:	4605      	mov	r5, r0
 8007d60:	b928      	cbnz	r0, 8007d6e <__multadd+0x5e>
 8007d62:	4602      	mov	r2, r0
 8007d64:	21b5      	movs	r1, #181	; 0xb5
 8007d66:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <__multadd+0x8c>)
 8007d68:	480d      	ldr	r0, [pc, #52]	; (8007da0 <__multadd+0x90>)
 8007d6a:	f000 fd11 	bl	8008790 <__assert_func>
 8007d6e:	6922      	ldr	r2, [r4, #16]
 8007d70:	f104 010c 	add.w	r1, r4, #12
 8007d74:	3202      	adds	r2, #2
 8007d76:	0092      	lsls	r2, r2, #2
 8007d78:	300c      	adds	r0, #12
 8007d7a:	f7ff ff59 	bl	8007c30 <memcpy>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4638      	mov	r0, r7
 8007d82:	f7ff ffa3 	bl	8007ccc <_Bfree>
 8007d86:	462c      	mov	r4, r5
 8007d88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007d8c:	3601      	adds	r6, #1
 8007d8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007d92:	6126      	str	r6, [r4, #16]
 8007d94:	4620      	mov	r0, r4
 8007d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9a:	bf00      	nop
 8007d9c:	0800948f 	.word	0x0800948f
 8007da0:	080094a0 	.word	0x080094a0

08007da4 <__hi0bits>:
 8007da4:	0c02      	lsrs	r2, r0, #16
 8007da6:	0412      	lsls	r2, r2, #16
 8007da8:	4603      	mov	r3, r0
 8007daa:	b9ca      	cbnz	r2, 8007de0 <__hi0bits+0x3c>
 8007dac:	0403      	lsls	r3, r0, #16
 8007dae:	2010      	movs	r0, #16
 8007db0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007db4:	bf04      	itt	eq
 8007db6:	021b      	lsleq	r3, r3, #8
 8007db8:	3008      	addeq	r0, #8
 8007dba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007dbe:	bf04      	itt	eq
 8007dc0:	011b      	lsleq	r3, r3, #4
 8007dc2:	3004      	addeq	r0, #4
 8007dc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dc8:	bf04      	itt	eq
 8007dca:	009b      	lsleq	r3, r3, #2
 8007dcc:	3002      	addeq	r0, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	db05      	blt.n	8007dde <__hi0bits+0x3a>
 8007dd2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007dd6:	f100 0001 	add.w	r0, r0, #1
 8007dda:	bf08      	it	eq
 8007ddc:	2020      	moveq	r0, #32
 8007dde:	4770      	bx	lr
 8007de0:	2000      	movs	r0, #0
 8007de2:	e7e5      	b.n	8007db0 <__hi0bits+0xc>

08007de4 <__lo0bits>:
 8007de4:	6803      	ldr	r3, [r0, #0]
 8007de6:	4602      	mov	r2, r0
 8007de8:	f013 0007 	ands.w	r0, r3, #7
 8007dec:	d00b      	beq.n	8007e06 <__lo0bits+0x22>
 8007dee:	07d9      	lsls	r1, r3, #31
 8007df0:	d422      	bmi.n	8007e38 <__lo0bits+0x54>
 8007df2:	0798      	lsls	r0, r3, #30
 8007df4:	bf49      	itett	mi
 8007df6:	085b      	lsrmi	r3, r3, #1
 8007df8:	089b      	lsrpl	r3, r3, #2
 8007dfa:	2001      	movmi	r0, #1
 8007dfc:	6013      	strmi	r3, [r2, #0]
 8007dfe:	bf5c      	itt	pl
 8007e00:	2002      	movpl	r0, #2
 8007e02:	6013      	strpl	r3, [r2, #0]
 8007e04:	4770      	bx	lr
 8007e06:	b299      	uxth	r1, r3
 8007e08:	b909      	cbnz	r1, 8007e0e <__lo0bits+0x2a>
 8007e0a:	2010      	movs	r0, #16
 8007e0c:	0c1b      	lsrs	r3, r3, #16
 8007e0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e12:	bf04      	itt	eq
 8007e14:	0a1b      	lsreq	r3, r3, #8
 8007e16:	3008      	addeq	r0, #8
 8007e18:	0719      	lsls	r1, r3, #28
 8007e1a:	bf04      	itt	eq
 8007e1c:	091b      	lsreq	r3, r3, #4
 8007e1e:	3004      	addeq	r0, #4
 8007e20:	0799      	lsls	r1, r3, #30
 8007e22:	bf04      	itt	eq
 8007e24:	089b      	lsreq	r3, r3, #2
 8007e26:	3002      	addeq	r0, #2
 8007e28:	07d9      	lsls	r1, r3, #31
 8007e2a:	d403      	bmi.n	8007e34 <__lo0bits+0x50>
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	f100 0001 	add.w	r0, r0, #1
 8007e32:	d003      	beq.n	8007e3c <__lo0bits+0x58>
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	4770      	bx	lr
 8007e38:	2000      	movs	r0, #0
 8007e3a:	4770      	bx	lr
 8007e3c:	2020      	movs	r0, #32
 8007e3e:	4770      	bx	lr

08007e40 <__i2b>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	2101      	movs	r1, #1
 8007e46:	f7ff ff01 	bl	8007c4c <_Balloc>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__i2b+0x1a>
 8007e4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e52:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <__i2b+0x24>)
 8007e54:	4804      	ldr	r0, [pc, #16]	; (8007e68 <__i2b+0x28>)
 8007e56:	f000 fc9b 	bl	8008790 <__assert_func>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	6144      	str	r4, [r0, #20]
 8007e5e:	6103      	str	r3, [r0, #16]
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	0800948f 	.word	0x0800948f
 8007e68:	080094a0 	.word	0x080094a0

08007e6c <__multiply>:
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	4614      	mov	r4, r2
 8007e72:	690a      	ldr	r2, [r1, #16]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	460d      	mov	r5, r1
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	bfbe      	ittt	lt
 8007e7c:	460b      	movlt	r3, r1
 8007e7e:	4625      	movlt	r5, r4
 8007e80:	461c      	movlt	r4, r3
 8007e82:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007e86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e8a:	68ab      	ldr	r3, [r5, #8]
 8007e8c:	6869      	ldr	r1, [r5, #4]
 8007e8e:	eb0a 0709 	add.w	r7, sl, r9
 8007e92:	42bb      	cmp	r3, r7
 8007e94:	b085      	sub	sp, #20
 8007e96:	bfb8      	it	lt
 8007e98:	3101      	addlt	r1, #1
 8007e9a:	f7ff fed7 	bl	8007c4c <_Balloc>
 8007e9e:	b930      	cbnz	r0, 8007eae <__multiply+0x42>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	f240 115d 	movw	r1, #349	; 0x15d
 8007ea6:	4b41      	ldr	r3, [pc, #260]	; (8007fac <__multiply+0x140>)
 8007ea8:	4841      	ldr	r0, [pc, #260]	; (8007fb0 <__multiply+0x144>)
 8007eaa:	f000 fc71 	bl	8008790 <__assert_func>
 8007eae:	f100 0614 	add.w	r6, r0, #20
 8007eb2:	4633      	mov	r3, r6
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007eba:	4543      	cmp	r3, r8
 8007ebc:	d31e      	bcc.n	8007efc <__multiply+0x90>
 8007ebe:	f105 0c14 	add.w	ip, r5, #20
 8007ec2:	f104 0314 	add.w	r3, r4, #20
 8007ec6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007eca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007ece:	9202      	str	r2, [sp, #8]
 8007ed0:	ebac 0205 	sub.w	r2, ip, r5
 8007ed4:	3a15      	subs	r2, #21
 8007ed6:	f022 0203 	bic.w	r2, r2, #3
 8007eda:	3204      	adds	r2, #4
 8007edc:	f105 0115 	add.w	r1, r5, #21
 8007ee0:	458c      	cmp	ip, r1
 8007ee2:	bf38      	it	cc
 8007ee4:	2204      	movcc	r2, #4
 8007ee6:	9201      	str	r2, [sp, #4]
 8007ee8:	9a02      	ldr	r2, [sp, #8]
 8007eea:	9303      	str	r3, [sp, #12]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d808      	bhi.n	8007f02 <__multiply+0x96>
 8007ef0:	2f00      	cmp	r7, #0
 8007ef2:	dc55      	bgt.n	8007fa0 <__multiply+0x134>
 8007ef4:	6107      	str	r7, [r0, #16]
 8007ef6:	b005      	add	sp, #20
 8007ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efc:	f843 2b04 	str.w	r2, [r3], #4
 8007f00:	e7db      	b.n	8007eba <__multiply+0x4e>
 8007f02:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f06:	f1ba 0f00 	cmp.w	sl, #0
 8007f0a:	d020      	beq.n	8007f4e <__multiply+0xe2>
 8007f0c:	46b1      	mov	r9, r6
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f105 0e14 	add.w	lr, r5, #20
 8007f14:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007f18:	f8d9 b000 	ldr.w	fp, [r9]
 8007f1c:	b2a1      	uxth	r1, r4
 8007f1e:	fa1f fb8b 	uxth.w	fp, fp
 8007f22:	fb0a b101 	mla	r1, sl, r1, fp
 8007f26:	4411      	add	r1, r2
 8007f28:	f8d9 2000 	ldr.w	r2, [r9]
 8007f2c:	0c24      	lsrs	r4, r4, #16
 8007f2e:	0c12      	lsrs	r2, r2, #16
 8007f30:	fb0a 2404 	mla	r4, sl, r4, r2
 8007f34:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007f38:	b289      	uxth	r1, r1
 8007f3a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f3e:	45f4      	cmp	ip, lr
 8007f40:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007f44:	f849 1b04 	str.w	r1, [r9], #4
 8007f48:	d8e4      	bhi.n	8007f14 <__multiply+0xa8>
 8007f4a:	9901      	ldr	r1, [sp, #4]
 8007f4c:	5072      	str	r2, [r6, r1]
 8007f4e:	9a03      	ldr	r2, [sp, #12]
 8007f50:	3304      	adds	r3, #4
 8007f52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f56:	f1b9 0f00 	cmp.w	r9, #0
 8007f5a:	d01f      	beq.n	8007f9c <__multiply+0x130>
 8007f5c:	46b6      	mov	lr, r6
 8007f5e:	f04f 0a00 	mov.w	sl, #0
 8007f62:	6834      	ldr	r4, [r6, #0]
 8007f64:	f105 0114 	add.w	r1, r5, #20
 8007f68:	880a      	ldrh	r2, [r1, #0]
 8007f6a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007f6e:	b2a4      	uxth	r4, r4
 8007f70:	fb09 b202 	mla	r2, r9, r2, fp
 8007f74:	4492      	add	sl, r2
 8007f76:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007f7a:	f84e 4b04 	str.w	r4, [lr], #4
 8007f7e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007f82:	f8be 2000 	ldrh.w	r2, [lr]
 8007f86:	0c24      	lsrs	r4, r4, #16
 8007f88:	fb09 2404 	mla	r4, r9, r4, r2
 8007f8c:	458c      	cmp	ip, r1
 8007f8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007f92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007f96:	d8e7      	bhi.n	8007f68 <__multiply+0xfc>
 8007f98:	9a01      	ldr	r2, [sp, #4]
 8007f9a:	50b4      	str	r4, [r6, r2]
 8007f9c:	3604      	adds	r6, #4
 8007f9e:	e7a3      	b.n	8007ee8 <__multiply+0x7c>
 8007fa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1a5      	bne.n	8007ef4 <__multiply+0x88>
 8007fa8:	3f01      	subs	r7, #1
 8007faa:	e7a1      	b.n	8007ef0 <__multiply+0x84>
 8007fac:	0800948f 	.word	0x0800948f
 8007fb0:	080094a0 	.word	0x080094a0

08007fb4 <__pow5mult>:
 8007fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	4615      	mov	r5, r2
 8007fba:	f012 0203 	ands.w	r2, r2, #3
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	d007      	beq.n	8007fd4 <__pow5mult+0x20>
 8007fc4:	4c25      	ldr	r4, [pc, #148]	; (800805c <__pow5mult+0xa8>)
 8007fc6:	3a01      	subs	r2, #1
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fce:	f7ff fe9f 	bl	8007d10 <__multadd>
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	10ad      	asrs	r5, r5, #2
 8007fd6:	d03d      	beq.n	8008054 <__pow5mult+0xa0>
 8007fd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fda:	b97c      	cbnz	r4, 8007ffc <__pow5mult+0x48>
 8007fdc:	2010      	movs	r0, #16
 8007fde:	f7ff fe11 	bl	8007c04 <malloc>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6270      	str	r0, [r6, #36]	; 0x24
 8007fe6:	b928      	cbnz	r0, 8007ff4 <__pow5mult+0x40>
 8007fe8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fec:	4b1c      	ldr	r3, [pc, #112]	; (8008060 <__pow5mult+0xac>)
 8007fee:	481d      	ldr	r0, [pc, #116]	; (8008064 <__pow5mult+0xb0>)
 8007ff0:	f000 fbce 	bl	8008790 <__assert_func>
 8007ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ff8:	6004      	str	r4, [r0, #0]
 8007ffa:	60c4      	str	r4, [r0, #12]
 8007ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008004:	b94c      	cbnz	r4, 800801a <__pow5mult+0x66>
 8008006:	f240 2171 	movw	r1, #625	; 0x271
 800800a:	4630      	mov	r0, r6
 800800c:	f7ff ff18 	bl	8007e40 <__i2b>
 8008010:	2300      	movs	r3, #0
 8008012:	4604      	mov	r4, r0
 8008014:	f8c8 0008 	str.w	r0, [r8, #8]
 8008018:	6003      	str	r3, [r0, #0]
 800801a:	f04f 0900 	mov.w	r9, #0
 800801e:	07eb      	lsls	r3, r5, #31
 8008020:	d50a      	bpl.n	8008038 <__pow5mult+0x84>
 8008022:	4639      	mov	r1, r7
 8008024:	4622      	mov	r2, r4
 8008026:	4630      	mov	r0, r6
 8008028:	f7ff ff20 	bl	8007e6c <__multiply>
 800802c:	4680      	mov	r8, r0
 800802e:	4639      	mov	r1, r7
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff fe4b 	bl	8007ccc <_Bfree>
 8008036:	4647      	mov	r7, r8
 8008038:	106d      	asrs	r5, r5, #1
 800803a:	d00b      	beq.n	8008054 <__pow5mult+0xa0>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	b938      	cbnz	r0, 8008050 <__pow5mult+0x9c>
 8008040:	4622      	mov	r2, r4
 8008042:	4621      	mov	r1, r4
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff ff11 	bl	8007e6c <__multiply>
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	f8c0 9000 	str.w	r9, [r0]
 8008050:	4604      	mov	r4, r0
 8008052:	e7e4      	b.n	800801e <__pow5mult+0x6a>
 8008054:	4638      	mov	r0, r7
 8008056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805a:	bf00      	nop
 800805c:	080095f0 	.word	0x080095f0
 8008060:	08009419 	.word	0x08009419
 8008064:	080094a0 	.word	0x080094a0

08008068 <__lshift>:
 8008068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	460c      	mov	r4, r1
 800806e:	4607      	mov	r7, r0
 8008070:	4691      	mov	r9, r2
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	6849      	ldr	r1, [r1, #4]
 8008076:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008080:	f108 0601 	add.w	r6, r8, #1
 8008084:	42b3      	cmp	r3, r6
 8008086:	db0b      	blt.n	80080a0 <__lshift+0x38>
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff fddf 	bl	8007c4c <_Balloc>
 800808e:	4605      	mov	r5, r0
 8008090:	b948      	cbnz	r0, 80080a6 <__lshift+0x3e>
 8008092:	4602      	mov	r2, r0
 8008094:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008098:	4b27      	ldr	r3, [pc, #156]	; (8008138 <__lshift+0xd0>)
 800809a:	4828      	ldr	r0, [pc, #160]	; (800813c <__lshift+0xd4>)
 800809c:	f000 fb78 	bl	8008790 <__assert_func>
 80080a0:	3101      	adds	r1, #1
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	e7ee      	b.n	8008084 <__lshift+0x1c>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f100 0114 	add.w	r1, r0, #20
 80080ac:	f100 0210 	add.w	r2, r0, #16
 80080b0:	4618      	mov	r0, r3
 80080b2:	4553      	cmp	r3, sl
 80080b4:	db33      	blt.n	800811e <__lshift+0xb6>
 80080b6:	6920      	ldr	r0, [r4, #16]
 80080b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080bc:	f104 0314 	add.w	r3, r4, #20
 80080c0:	f019 091f 	ands.w	r9, r9, #31
 80080c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080cc:	d02b      	beq.n	8008126 <__lshift+0xbe>
 80080ce:	468a      	mov	sl, r1
 80080d0:	2200      	movs	r2, #0
 80080d2:	f1c9 0e20 	rsb	lr, r9, #32
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	fa00 f009 	lsl.w	r0, r0, r9
 80080dc:	4302      	orrs	r2, r0
 80080de:	f84a 2b04 	str.w	r2, [sl], #4
 80080e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e6:	459c      	cmp	ip, r3
 80080e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80080ec:	d8f3      	bhi.n	80080d6 <__lshift+0x6e>
 80080ee:	ebac 0304 	sub.w	r3, ip, r4
 80080f2:	3b15      	subs	r3, #21
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	3304      	adds	r3, #4
 80080fa:	f104 0015 	add.w	r0, r4, #21
 80080fe:	4584      	cmp	ip, r0
 8008100:	bf38      	it	cc
 8008102:	2304      	movcc	r3, #4
 8008104:	50ca      	str	r2, [r1, r3]
 8008106:	b10a      	cbz	r2, 800810c <__lshift+0xa4>
 8008108:	f108 0602 	add.w	r6, r8, #2
 800810c:	3e01      	subs	r6, #1
 800810e:	4638      	mov	r0, r7
 8008110:	4621      	mov	r1, r4
 8008112:	612e      	str	r6, [r5, #16]
 8008114:	f7ff fdda 	bl	8007ccc <_Bfree>
 8008118:	4628      	mov	r0, r5
 800811a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008122:	3301      	adds	r3, #1
 8008124:	e7c5      	b.n	80080b2 <__lshift+0x4a>
 8008126:	3904      	subs	r1, #4
 8008128:	f853 2b04 	ldr.w	r2, [r3], #4
 800812c:	459c      	cmp	ip, r3
 800812e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008132:	d8f9      	bhi.n	8008128 <__lshift+0xc0>
 8008134:	e7ea      	b.n	800810c <__lshift+0xa4>
 8008136:	bf00      	nop
 8008138:	0800948f 	.word	0x0800948f
 800813c:	080094a0 	.word	0x080094a0

08008140 <__mcmp>:
 8008140:	4603      	mov	r3, r0
 8008142:	690a      	ldr	r2, [r1, #16]
 8008144:	6900      	ldr	r0, [r0, #16]
 8008146:	b530      	push	{r4, r5, lr}
 8008148:	1a80      	subs	r0, r0, r2
 800814a:	d10d      	bne.n	8008168 <__mcmp+0x28>
 800814c:	3314      	adds	r3, #20
 800814e:	3114      	adds	r1, #20
 8008150:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008154:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800815c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008160:	4295      	cmp	r5, r2
 8008162:	d002      	beq.n	800816a <__mcmp+0x2a>
 8008164:	d304      	bcc.n	8008170 <__mcmp+0x30>
 8008166:	2001      	movs	r0, #1
 8008168:	bd30      	pop	{r4, r5, pc}
 800816a:	42a3      	cmp	r3, r4
 800816c:	d3f4      	bcc.n	8008158 <__mcmp+0x18>
 800816e:	e7fb      	b.n	8008168 <__mcmp+0x28>
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	e7f8      	b.n	8008168 <__mcmp+0x28>
	...

08008178 <__mdiff>:
 8008178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	4606      	mov	r6, r0
 8008180:	4611      	mov	r1, r2
 8008182:	4620      	mov	r0, r4
 8008184:	4692      	mov	sl, r2
 8008186:	f7ff ffdb 	bl	8008140 <__mcmp>
 800818a:	1e05      	subs	r5, r0, #0
 800818c:	d111      	bne.n	80081b2 <__mdiff+0x3a>
 800818e:	4629      	mov	r1, r5
 8008190:	4630      	mov	r0, r6
 8008192:	f7ff fd5b 	bl	8007c4c <_Balloc>
 8008196:	4602      	mov	r2, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__mdiff+0x2e>
 800819a:	f240 2132 	movw	r1, #562	; 0x232
 800819e:	4b3c      	ldr	r3, [pc, #240]	; (8008290 <__mdiff+0x118>)
 80081a0:	483c      	ldr	r0, [pc, #240]	; (8008294 <__mdiff+0x11c>)
 80081a2:	f000 faf5 	bl	8008790 <__assert_func>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081ac:	4610      	mov	r0, r2
 80081ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b2:	bfa4      	itt	ge
 80081b4:	4653      	movge	r3, sl
 80081b6:	46a2      	movge	sl, r4
 80081b8:	4630      	mov	r0, r6
 80081ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 80081be:	bfa6      	itte	ge
 80081c0:	461c      	movge	r4, r3
 80081c2:	2500      	movge	r5, #0
 80081c4:	2501      	movlt	r5, #1
 80081c6:	f7ff fd41 	bl	8007c4c <_Balloc>
 80081ca:	4602      	mov	r2, r0
 80081cc:	b918      	cbnz	r0, 80081d6 <__mdiff+0x5e>
 80081ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081d2:	4b2f      	ldr	r3, [pc, #188]	; (8008290 <__mdiff+0x118>)
 80081d4:	e7e4      	b.n	80081a0 <__mdiff+0x28>
 80081d6:	f100 0814 	add.w	r8, r0, #20
 80081da:	f8da 7010 	ldr.w	r7, [sl, #16]
 80081de:	60c5      	str	r5, [r0, #12]
 80081e0:	f04f 0c00 	mov.w	ip, #0
 80081e4:	f10a 0514 	add.w	r5, sl, #20
 80081e8:	f10a 0010 	add.w	r0, sl, #16
 80081ec:	46c2      	mov	sl, r8
 80081ee:	6926      	ldr	r6, [r4, #16]
 80081f0:	f104 0914 	add.w	r9, r4, #20
 80081f4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80081f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081fc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008200:	f859 3b04 	ldr.w	r3, [r9], #4
 8008204:	fa1f f18b 	uxth.w	r1, fp
 8008208:	4461      	add	r1, ip
 800820a:	fa1f fc83 	uxth.w	ip, r3
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	eba1 010c 	sub.w	r1, r1, ip
 8008214:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008218:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800821c:	b289      	uxth	r1, r1
 800821e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008222:	454e      	cmp	r6, r9
 8008224:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008228:	f84a 3b04 	str.w	r3, [sl], #4
 800822c:	d8e6      	bhi.n	80081fc <__mdiff+0x84>
 800822e:	1b33      	subs	r3, r6, r4
 8008230:	3b15      	subs	r3, #21
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	3415      	adds	r4, #21
 8008238:	3304      	adds	r3, #4
 800823a:	42a6      	cmp	r6, r4
 800823c:	bf38      	it	cc
 800823e:	2304      	movcc	r3, #4
 8008240:	441d      	add	r5, r3
 8008242:	4443      	add	r3, r8
 8008244:	461e      	mov	r6, r3
 8008246:	462c      	mov	r4, r5
 8008248:	4574      	cmp	r4, lr
 800824a:	d30e      	bcc.n	800826a <__mdiff+0xf2>
 800824c:	f10e 0103 	add.w	r1, lr, #3
 8008250:	1b49      	subs	r1, r1, r5
 8008252:	f021 0103 	bic.w	r1, r1, #3
 8008256:	3d03      	subs	r5, #3
 8008258:	45ae      	cmp	lr, r5
 800825a:	bf38      	it	cc
 800825c:	2100      	movcc	r1, #0
 800825e:	4419      	add	r1, r3
 8008260:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008264:	b18b      	cbz	r3, 800828a <__mdiff+0x112>
 8008266:	6117      	str	r7, [r2, #16]
 8008268:	e7a0      	b.n	80081ac <__mdiff+0x34>
 800826a:	f854 8b04 	ldr.w	r8, [r4], #4
 800826e:	fa1f f188 	uxth.w	r1, r8
 8008272:	4461      	add	r1, ip
 8008274:	1408      	asrs	r0, r1, #16
 8008276:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800827a:	b289      	uxth	r1, r1
 800827c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008280:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008284:	f846 1b04 	str.w	r1, [r6], #4
 8008288:	e7de      	b.n	8008248 <__mdiff+0xd0>
 800828a:	3f01      	subs	r7, #1
 800828c:	e7e8      	b.n	8008260 <__mdiff+0xe8>
 800828e:	bf00      	nop
 8008290:	0800948f 	.word	0x0800948f
 8008294:	080094a0 	.word	0x080094a0

08008298 <__d2b>:
 8008298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800829c:	2101      	movs	r1, #1
 800829e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80082a2:	4690      	mov	r8, r2
 80082a4:	461d      	mov	r5, r3
 80082a6:	f7ff fcd1 	bl	8007c4c <_Balloc>
 80082aa:	4604      	mov	r4, r0
 80082ac:	b930      	cbnz	r0, 80082bc <__d2b+0x24>
 80082ae:	4602      	mov	r2, r0
 80082b0:	f240 310a 	movw	r1, #778	; 0x30a
 80082b4:	4b24      	ldr	r3, [pc, #144]	; (8008348 <__d2b+0xb0>)
 80082b6:	4825      	ldr	r0, [pc, #148]	; (800834c <__d2b+0xb4>)
 80082b8:	f000 fa6a 	bl	8008790 <__assert_func>
 80082bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80082c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80082c4:	bb2d      	cbnz	r5, 8008312 <__d2b+0x7a>
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	f1b8 0300 	subs.w	r3, r8, #0
 80082cc:	d026      	beq.n	800831c <__d2b+0x84>
 80082ce:	4668      	mov	r0, sp
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	f7ff fd87 	bl	8007de4 <__lo0bits>
 80082d6:	9900      	ldr	r1, [sp, #0]
 80082d8:	b1f0      	cbz	r0, 8008318 <__d2b+0x80>
 80082da:	9a01      	ldr	r2, [sp, #4]
 80082dc:	f1c0 0320 	rsb	r3, r0, #32
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	430b      	orrs	r3, r1
 80082e6:	40c2      	lsrs	r2, r0
 80082e8:	6163      	str	r3, [r4, #20]
 80082ea:	9201      	str	r2, [sp, #4]
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bf14      	ite	ne
 80082f2:	2102      	movne	r1, #2
 80082f4:	2101      	moveq	r1, #1
 80082f6:	61a3      	str	r3, [r4, #24]
 80082f8:	6121      	str	r1, [r4, #16]
 80082fa:	b1c5      	cbz	r5, 800832e <__d2b+0x96>
 80082fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008300:	4405      	add	r5, r0
 8008302:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008306:	603d      	str	r5, [r7, #0]
 8008308:	6030      	str	r0, [r6, #0]
 800830a:	4620      	mov	r0, r4
 800830c:	b002      	add	sp, #8
 800830e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008316:	e7d6      	b.n	80082c6 <__d2b+0x2e>
 8008318:	6161      	str	r1, [r4, #20]
 800831a:	e7e7      	b.n	80082ec <__d2b+0x54>
 800831c:	a801      	add	r0, sp, #4
 800831e:	f7ff fd61 	bl	8007de4 <__lo0bits>
 8008322:	2101      	movs	r1, #1
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	6121      	str	r1, [r4, #16]
 8008328:	6163      	str	r3, [r4, #20]
 800832a:	3020      	adds	r0, #32
 800832c:	e7e5      	b.n	80082fa <__d2b+0x62>
 800832e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008332:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008336:	6038      	str	r0, [r7, #0]
 8008338:	6918      	ldr	r0, [r3, #16]
 800833a:	f7ff fd33 	bl	8007da4 <__hi0bits>
 800833e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008342:	6031      	str	r1, [r6, #0]
 8008344:	e7e1      	b.n	800830a <__d2b+0x72>
 8008346:	bf00      	nop
 8008348:	0800948f 	.word	0x0800948f
 800834c:	080094a0 	.word	0x080094a0

08008350 <_calloc_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	fb02 f501 	mul.w	r5, r2, r1
 8008356:	4629      	mov	r1, r5
 8008358:	f000 f854 	bl	8008404 <_malloc_r>
 800835c:	4604      	mov	r4, r0
 800835e:	b118      	cbz	r0, 8008368 <_calloc_r+0x18>
 8008360:	462a      	mov	r2, r5
 8008362:	2100      	movs	r1, #0
 8008364:	f7fe f946 	bl	80065f4 <memset>
 8008368:	4620      	mov	r0, r4
 800836a:	bd38      	pop	{r3, r4, r5, pc}

0800836c <_free_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4605      	mov	r5, r0
 8008370:	2900      	cmp	r1, #0
 8008372:	d043      	beq.n	80083fc <_free_r+0x90>
 8008374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008378:	1f0c      	subs	r4, r1, #4
 800837a:	2b00      	cmp	r3, #0
 800837c:	bfb8      	it	lt
 800837e:	18e4      	addlt	r4, r4, r3
 8008380:	f000 fa62 	bl	8008848 <__malloc_lock>
 8008384:	4a1e      	ldr	r2, [pc, #120]	; (8008400 <_free_r+0x94>)
 8008386:	6813      	ldr	r3, [r2, #0]
 8008388:	4610      	mov	r0, r2
 800838a:	b933      	cbnz	r3, 800839a <_free_r+0x2e>
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	6014      	str	r4, [r2, #0]
 8008390:	4628      	mov	r0, r5
 8008392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008396:	f000 ba5d 	b.w	8008854 <__malloc_unlock>
 800839a:	42a3      	cmp	r3, r4
 800839c:	d90a      	bls.n	80083b4 <_free_r+0x48>
 800839e:	6821      	ldr	r1, [r4, #0]
 80083a0:	1862      	adds	r2, r4, r1
 80083a2:	4293      	cmp	r3, r2
 80083a4:	bf01      	itttt	eq
 80083a6:	681a      	ldreq	r2, [r3, #0]
 80083a8:	685b      	ldreq	r3, [r3, #4]
 80083aa:	1852      	addeq	r2, r2, r1
 80083ac:	6022      	streq	r2, [r4, #0]
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	6004      	str	r4, [r0, #0]
 80083b2:	e7ed      	b.n	8008390 <_free_r+0x24>
 80083b4:	461a      	mov	r2, r3
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	b10b      	cbz	r3, 80083be <_free_r+0x52>
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	d9fa      	bls.n	80083b4 <_free_r+0x48>
 80083be:	6811      	ldr	r1, [r2, #0]
 80083c0:	1850      	adds	r0, r2, r1
 80083c2:	42a0      	cmp	r0, r4
 80083c4:	d10b      	bne.n	80083de <_free_r+0x72>
 80083c6:	6820      	ldr	r0, [r4, #0]
 80083c8:	4401      	add	r1, r0
 80083ca:	1850      	adds	r0, r2, r1
 80083cc:	4283      	cmp	r3, r0
 80083ce:	6011      	str	r1, [r2, #0]
 80083d0:	d1de      	bne.n	8008390 <_free_r+0x24>
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4401      	add	r1, r0
 80083d8:	6011      	str	r1, [r2, #0]
 80083da:	6053      	str	r3, [r2, #4]
 80083dc:	e7d8      	b.n	8008390 <_free_r+0x24>
 80083de:	d902      	bls.n	80083e6 <_free_r+0x7a>
 80083e0:	230c      	movs	r3, #12
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	e7d4      	b.n	8008390 <_free_r+0x24>
 80083e6:	6820      	ldr	r0, [r4, #0]
 80083e8:	1821      	adds	r1, r4, r0
 80083ea:	428b      	cmp	r3, r1
 80083ec:	bf01      	itttt	eq
 80083ee:	6819      	ldreq	r1, [r3, #0]
 80083f0:	685b      	ldreq	r3, [r3, #4]
 80083f2:	1809      	addeq	r1, r1, r0
 80083f4:	6021      	streq	r1, [r4, #0]
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	6054      	str	r4, [r2, #4]
 80083fa:	e7c9      	b.n	8008390 <_free_r+0x24>
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	bf00      	nop
 8008400:	20000220 	.word	0x20000220

08008404 <_malloc_r>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	1ccd      	adds	r5, r1, #3
 8008408:	f025 0503 	bic.w	r5, r5, #3
 800840c:	3508      	adds	r5, #8
 800840e:	2d0c      	cmp	r5, #12
 8008410:	bf38      	it	cc
 8008412:	250c      	movcc	r5, #12
 8008414:	2d00      	cmp	r5, #0
 8008416:	4606      	mov	r6, r0
 8008418:	db01      	blt.n	800841e <_malloc_r+0x1a>
 800841a:	42a9      	cmp	r1, r5
 800841c:	d903      	bls.n	8008426 <_malloc_r+0x22>
 800841e:	230c      	movs	r3, #12
 8008420:	6033      	str	r3, [r6, #0]
 8008422:	2000      	movs	r0, #0
 8008424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008426:	f000 fa0f 	bl	8008848 <__malloc_lock>
 800842a:	4921      	ldr	r1, [pc, #132]	; (80084b0 <_malloc_r+0xac>)
 800842c:	680a      	ldr	r2, [r1, #0]
 800842e:	4614      	mov	r4, r2
 8008430:	b99c      	cbnz	r4, 800845a <_malloc_r+0x56>
 8008432:	4f20      	ldr	r7, [pc, #128]	; (80084b4 <_malloc_r+0xb0>)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	b923      	cbnz	r3, 8008442 <_malloc_r+0x3e>
 8008438:	4621      	mov	r1, r4
 800843a:	4630      	mov	r0, r6
 800843c:	f000 f998 	bl	8008770 <_sbrk_r>
 8008440:	6038      	str	r0, [r7, #0]
 8008442:	4629      	mov	r1, r5
 8008444:	4630      	mov	r0, r6
 8008446:	f000 f993 	bl	8008770 <_sbrk_r>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	d123      	bne.n	8008496 <_malloc_r+0x92>
 800844e:	230c      	movs	r3, #12
 8008450:	4630      	mov	r0, r6
 8008452:	6033      	str	r3, [r6, #0]
 8008454:	f000 f9fe 	bl	8008854 <__malloc_unlock>
 8008458:	e7e3      	b.n	8008422 <_malloc_r+0x1e>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	1b5b      	subs	r3, r3, r5
 800845e:	d417      	bmi.n	8008490 <_malloc_r+0x8c>
 8008460:	2b0b      	cmp	r3, #11
 8008462:	d903      	bls.n	800846c <_malloc_r+0x68>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	441c      	add	r4, r3
 8008468:	6025      	str	r5, [r4, #0]
 800846a:	e004      	b.n	8008476 <_malloc_r+0x72>
 800846c:	6863      	ldr	r3, [r4, #4]
 800846e:	42a2      	cmp	r2, r4
 8008470:	bf0c      	ite	eq
 8008472:	600b      	streq	r3, [r1, #0]
 8008474:	6053      	strne	r3, [r2, #4]
 8008476:	4630      	mov	r0, r6
 8008478:	f000 f9ec 	bl	8008854 <__malloc_unlock>
 800847c:	f104 000b 	add.w	r0, r4, #11
 8008480:	1d23      	adds	r3, r4, #4
 8008482:	f020 0007 	bic.w	r0, r0, #7
 8008486:	1ac2      	subs	r2, r0, r3
 8008488:	d0cc      	beq.n	8008424 <_malloc_r+0x20>
 800848a:	1a1b      	subs	r3, r3, r0
 800848c:	50a3      	str	r3, [r4, r2]
 800848e:	e7c9      	b.n	8008424 <_malloc_r+0x20>
 8008490:	4622      	mov	r2, r4
 8008492:	6864      	ldr	r4, [r4, #4]
 8008494:	e7cc      	b.n	8008430 <_malloc_r+0x2c>
 8008496:	1cc4      	adds	r4, r0, #3
 8008498:	f024 0403 	bic.w	r4, r4, #3
 800849c:	42a0      	cmp	r0, r4
 800849e:	d0e3      	beq.n	8008468 <_malloc_r+0x64>
 80084a0:	1a21      	subs	r1, r4, r0
 80084a2:	4630      	mov	r0, r6
 80084a4:	f000 f964 	bl	8008770 <_sbrk_r>
 80084a8:	3001      	adds	r0, #1
 80084aa:	d1dd      	bne.n	8008468 <_malloc_r+0x64>
 80084ac:	e7cf      	b.n	800844e <_malloc_r+0x4a>
 80084ae:	bf00      	nop
 80084b0:	20000220 	.word	0x20000220
 80084b4:	20000224 	.word	0x20000224

080084b8 <__ssputs_r>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	688e      	ldr	r6, [r1, #8]
 80084be:	4682      	mov	sl, r0
 80084c0:	429e      	cmp	r6, r3
 80084c2:	460c      	mov	r4, r1
 80084c4:	4690      	mov	r8, r2
 80084c6:	461f      	mov	r7, r3
 80084c8:	d838      	bhi.n	800853c <__ssputs_r+0x84>
 80084ca:	898a      	ldrh	r2, [r1, #12]
 80084cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084d0:	d032      	beq.n	8008538 <__ssputs_r+0x80>
 80084d2:	6825      	ldr	r5, [r4, #0]
 80084d4:	6909      	ldr	r1, [r1, #16]
 80084d6:	3301      	adds	r3, #1
 80084d8:	eba5 0901 	sub.w	r9, r5, r1
 80084dc:	6965      	ldr	r5, [r4, #20]
 80084de:	444b      	add	r3, r9
 80084e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084e8:	106d      	asrs	r5, r5, #1
 80084ea:	429d      	cmp	r5, r3
 80084ec:	bf38      	it	cc
 80084ee:	461d      	movcc	r5, r3
 80084f0:	0553      	lsls	r3, r2, #21
 80084f2:	d531      	bpl.n	8008558 <__ssputs_r+0xa0>
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7ff ff85 	bl	8008404 <_malloc_r>
 80084fa:	4606      	mov	r6, r0
 80084fc:	b950      	cbnz	r0, 8008514 <__ssputs_r+0x5c>
 80084fe:	230c      	movs	r3, #12
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	f8ca 3000 	str.w	r3, [sl]
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008514:	464a      	mov	r2, r9
 8008516:	6921      	ldr	r1, [r4, #16]
 8008518:	f7ff fb8a 	bl	8007c30 <memcpy>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	6126      	str	r6, [r4, #16]
 800852a:	444e      	add	r6, r9
 800852c:	6026      	str	r6, [r4, #0]
 800852e:	463e      	mov	r6, r7
 8008530:	6165      	str	r5, [r4, #20]
 8008532:	eba5 0509 	sub.w	r5, r5, r9
 8008536:	60a5      	str	r5, [r4, #8]
 8008538:	42be      	cmp	r6, r7
 800853a:	d900      	bls.n	800853e <__ssputs_r+0x86>
 800853c:	463e      	mov	r6, r7
 800853e:	4632      	mov	r2, r6
 8008540:	4641      	mov	r1, r8
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	f000 f966 	bl	8008814 <memmove>
 8008548:	68a3      	ldr	r3, [r4, #8]
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	1b9b      	subs	r3, r3, r6
 800854e:	4432      	add	r2, r6
 8008550:	2000      	movs	r0, #0
 8008552:	60a3      	str	r3, [r4, #8]
 8008554:	6022      	str	r2, [r4, #0]
 8008556:	e7db      	b.n	8008510 <__ssputs_r+0x58>
 8008558:	462a      	mov	r2, r5
 800855a:	f000 f981 	bl	8008860 <_realloc_r>
 800855e:	4606      	mov	r6, r0
 8008560:	2800      	cmp	r0, #0
 8008562:	d1e1      	bne.n	8008528 <__ssputs_r+0x70>
 8008564:	4650      	mov	r0, sl
 8008566:	6921      	ldr	r1, [r4, #16]
 8008568:	f7ff ff00 	bl	800836c <_free_r>
 800856c:	e7c7      	b.n	80084fe <__ssputs_r+0x46>
	...

08008570 <_svfiprintf_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	4698      	mov	r8, r3
 8008576:	898b      	ldrh	r3, [r1, #12]
 8008578:	4607      	mov	r7, r0
 800857a:	061b      	lsls	r3, r3, #24
 800857c:	460d      	mov	r5, r1
 800857e:	4614      	mov	r4, r2
 8008580:	b09d      	sub	sp, #116	; 0x74
 8008582:	d50e      	bpl.n	80085a2 <_svfiprintf_r+0x32>
 8008584:	690b      	ldr	r3, [r1, #16]
 8008586:	b963      	cbnz	r3, 80085a2 <_svfiprintf_r+0x32>
 8008588:	2140      	movs	r1, #64	; 0x40
 800858a:	f7ff ff3b 	bl	8008404 <_malloc_r>
 800858e:	6028      	str	r0, [r5, #0]
 8008590:	6128      	str	r0, [r5, #16]
 8008592:	b920      	cbnz	r0, 800859e <_svfiprintf_r+0x2e>
 8008594:	230c      	movs	r3, #12
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e0d1      	b.n	8008742 <_svfiprintf_r+0x1d2>
 800859e:	2340      	movs	r3, #64	; 0x40
 80085a0:	616b      	str	r3, [r5, #20]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9309      	str	r3, [sp, #36]	; 0x24
 80085a6:	2320      	movs	r3, #32
 80085a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ac:	2330      	movs	r3, #48	; 0x30
 80085ae:	f04f 0901 	mov.w	r9, #1
 80085b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800875c <_svfiprintf_r+0x1ec>
 80085ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085be:	4623      	mov	r3, r4
 80085c0:	469a      	mov	sl, r3
 80085c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c6:	b10a      	cbz	r2, 80085cc <_svfiprintf_r+0x5c>
 80085c8:	2a25      	cmp	r2, #37	; 0x25
 80085ca:	d1f9      	bne.n	80085c0 <_svfiprintf_r+0x50>
 80085cc:	ebba 0b04 	subs.w	fp, sl, r4
 80085d0:	d00b      	beq.n	80085ea <_svfiprintf_r+0x7a>
 80085d2:	465b      	mov	r3, fp
 80085d4:	4622      	mov	r2, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff ff6d 	bl	80084b8 <__ssputs_r>
 80085de:	3001      	adds	r0, #1
 80085e0:	f000 80aa 	beq.w	8008738 <_svfiprintf_r+0x1c8>
 80085e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085e6:	445a      	add	r2, fp
 80085e8:	9209      	str	r2, [sp, #36]	; 0x24
 80085ea:	f89a 3000 	ldrb.w	r3, [sl]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80a2 	beq.w	8008738 <_svfiprintf_r+0x1c8>
 80085f4:	2300      	movs	r3, #0
 80085f6:	f04f 32ff 	mov.w	r2, #4294967295
 80085fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085fe:	f10a 0a01 	add.w	sl, sl, #1
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	9307      	str	r3, [sp, #28]
 8008606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800860a:	931a      	str	r3, [sp, #104]	; 0x68
 800860c:	4654      	mov	r4, sl
 800860e:	2205      	movs	r2, #5
 8008610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008614:	4851      	ldr	r0, [pc, #324]	; (800875c <_svfiprintf_r+0x1ec>)
 8008616:	f7ff fafd 	bl	8007c14 <memchr>
 800861a:	9a04      	ldr	r2, [sp, #16]
 800861c:	b9d8      	cbnz	r0, 8008656 <_svfiprintf_r+0xe6>
 800861e:	06d0      	lsls	r0, r2, #27
 8008620:	bf44      	itt	mi
 8008622:	2320      	movmi	r3, #32
 8008624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008628:	0711      	lsls	r1, r2, #28
 800862a:	bf44      	itt	mi
 800862c:	232b      	movmi	r3, #43	; 0x2b
 800862e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008632:	f89a 3000 	ldrb.w	r3, [sl]
 8008636:	2b2a      	cmp	r3, #42	; 0x2a
 8008638:	d015      	beq.n	8008666 <_svfiprintf_r+0xf6>
 800863a:	4654      	mov	r4, sl
 800863c:	2000      	movs	r0, #0
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	9a07      	ldr	r2, [sp, #28]
 8008644:	4621      	mov	r1, r4
 8008646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864a:	3b30      	subs	r3, #48	; 0x30
 800864c:	2b09      	cmp	r3, #9
 800864e:	d94e      	bls.n	80086ee <_svfiprintf_r+0x17e>
 8008650:	b1b0      	cbz	r0, 8008680 <_svfiprintf_r+0x110>
 8008652:	9207      	str	r2, [sp, #28]
 8008654:	e014      	b.n	8008680 <_svfiprintf_r+0x110>
 8008656:	eba0 0308 	sub.w	r3, r0, r8
 800865a:	fa09 f303 	lsl.w	r3, r9, r3
 800865e:	4313      	orrs	r3, r2
 8008660:	46a2      	mov	sl, r4
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	e7d2      	b.n	800860c <_svfiprintf_r+0x9c>
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	1d19      	adds	r1, r3, #4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	9103      	str	r1, [sp, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	bfbb      	ittet	lt
 8008672:	425b      	neglt	r3, r3
 8008674:	f042 0202 	orrlt.w	r2, r2, #2
 8008678:	9307      	strge	r3, [sp, #28]
 800867a:	9307      	strlt	r3, [sp, #28]
 800867c:	bfb8      	it	lt
 800867e:	9204      	strlt	r2, [sp, #16]
 8008680:	7823      	ldrb	r3, [r4, #0]
 8008682:	2b2e      	cmp	r3, #46	; 0x2e
 8008684:	d10c      	bne.n	80086a0 <_svfiprintf_r+0x130>
 8008686:	7863      	ldrb	r3, [r4, #1]
 8008688:	2b2a      	cmp	r3, #42	; 0x2a
 800868a:	d135      	bne.n	80086f8 <_svfiprintf_r+0x188>
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	3402      	adds	r4, #2
 8008690:	1d1a      	adds	r2, r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9203      	str	r2, [sp, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	bfb8      	it	lt
 800869a:	f04f 33ff 	movlt.w	r3, #4294967295
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800876c <_svfiprintf_r+0x1fc>
 80086a4:	2203      	movs	r2, #3
 80086a6:	4650      	mov	r0, sl
 80086a8:	7821      	ldrb	r1, [r4, #0]
 80086aa:	f7ff fab3 	bl	8007c14 <memchr>
 80086ae:	b140      	cbz	r0, 80086c2 <_svfiprintf_r+0x152>
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	eba0 000a 	sub.w	r0, r0, sl
 80086b6:	fa03 f000 	lsl.w	r0, r3, r0
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	3401      	adds	r4, #1
 80086be:	4303      	orrs	r3, r0
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c6:	2206      	movs	r2, #6
 80086c8:	4825      	ldr	r0, [pc, #148]	; (8008760 <_svfiprintf_r+0x1f0>)
 80086ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ce:	f7ff faa1 	bl	8007c14 <memchr>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d038      	beq.n	8008748 <_svfiprintf_r+0x1d8>
 80086d6:	4b23      	ldr	r3, [pc, #140]	; (8008764 <_svfiprintf_r+0x1f4>)
 80086d8:	bb1b      	cbnz	r3, 8008722 <_svfiprintf_r+0x1b2>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	3307      	adds	r3, #7
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	3308      	adds	r3, #8
 80086e4:	9303      	str	r3, [sp, #12]
 80086e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e8:	4433      	add	r3, r6
 80086ea:	9309      	str	r3, [sp, #36]	; 0x24
 80086ec:	e767      	b.n	80085be <_svfiprintf_r+0x4e>
 80086ee:	460c      	mov	r4, r1
 80086f0:	2001      	movs	r0, #1
 80086f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f6:	e7a5      	b.n	8008644 <_svfiprintf_r+0xd4>
 80086f8:	2300      	movs	r3, #0
 80086fa:	f04f 0c0a 	mov.w	ip, #10
 80086fe:	4619      	mov	r1, r3
 8008700:	3401      	adds	r4, #1
 8008702:	9305      	str	r3, [sp, #20]
 8008704:	4620      	mov	r0, r4
 8008706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800870a:	3a30      	subs	r2, #48	; 0x30
 800870c:	2a09      	cmp	r2, #9
 800870e:	d903      	bls.n	8008718 <_svfiprintf_r+0x1a8>
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0c5      	beq.n	80086a0 <_svfiprintf_r+0x130>
 8008714:	9105      	str	r1, [sp, #20]
 8008716:	e7c3      	b.n	80086a0 <_svfiprintf_r+0x130>
 8008718:	4604      	mov	r4, r0
 800871a:	2301      	movs	r3, #1
 800871c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008720:	e7f0      	b.n	8008704 <_svfiprintf_r+0x194>
 8008722:	ab03      	add	r3, sp, #12
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	462a      	mov	r2, r5
 8008728:	4638      	mov	r0, r7
 800872a:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <_svfiprintf_r+0x1f8>)
 800872c:	a904      	add	r1, sp, #16
 800872e:	f7fe f807 	bl	8006740 <_printf_float>
 8008732:	1c42      	adds	r2, r0, #1
 8008734:	4606      	mov	r6, r0
 8008736:	d1d6      	bne.n	80086e6 <_svfiprintf_r+0x176>
 8008738:	89ab      	ldrh	r3, [r5, #12]
 800873a:	065b      	lsls	r3, r3, #25
 800873c:	f53f af2c 	bmi.w	8008598 <_svfiprintf_r+0x28>
 8008740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008742:	b01d      	add	sp, #116	; 0x74
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	ab03      	add	r3, sp, #12
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	462a      	mov	r2, r5
 800874e:	4638      	mov	r0, r7
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <_svfiprintf_r+0x1f8>)
 8008752:	a904      	add	r1, sp, #16
 8008754:	f7fe fa90 	bl	8006c78 <_printf_i>
 8008758:	e7eb      	b.n	8008732 <_svfiprintf_r+0x1c2>
 800875a:	bf00      	nop
 800875c:	080095fc 	.word	0x080095fc
 8008760:	08009606 	.word	0x08009606
 8008764:	08006741 	.word	0x08006741
 8008768:	080084b9 	.word	0x080084b9
 800876c:	08009602 	.word	0x08009602

08008770 <_sbrk_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	2300      	movs	r3, #0
 8008774:	4d05      	ldr	r5, [pc, #20]	; (800878c <_sbrk_r+0x1c>)
 8008776:	4604      	mov	r4, r0
 8008778:	4608      	mov	r0, r1
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	f7f9 fcbe 	bl	80020fc <_sbrk>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_sbrk_r+0x1a>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_sbrk_r+0x1a>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20000480 	.word	0x20000480

08008790 <__assert_func>:
 8008790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008792:	4614      	mov	r4, r2
 8008794:	461a      	mov	r2, r3
 8008796:	4b09      	ldr	r3, [pc, #36]	; (80087bc <__assert_func+0x2c>)
 8008798:	4605      	mov	r5, r0
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68d8      	ldr	r0, [r3, #12]
 800879e:	b14c      	cbz	r4, 80087b4 <__assert_func+0x24>
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <__assert_func+0x30>)
 80087a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087a6:	9100      	str	r1, [sp, #0]
 80087a8:	462b      	mov	r3, r5
 80087aa:	4906      	ldr	r1, [pc, #24]	; (80087c4 <__assert_func+0x34>)
 80087ac:	f000 f80e 	bl	80087cc <fiprintf>
 80087b0:	f000 faa2 	bl	8008cf8 <abort>
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <__assert_func+0x38>)
 80087b6:	461c      	mov	r4, r3
 80087b8:	e7f3      	b.n	80087a2 <__assert_func+0x12>
 80087ba:	bf00      	nop
 80087bc:	2000000c 	.word	0x2000000c
 80087c0:	0800960d 	.word	0x0800960d
 80087c4:	0800961a 	.word	0x0800961a
 80087c8:	08009648 	.word	0x08009648

080087cc <fiprintf>:
 80087cc:	b40e      	push	{r1, r2, r3}
 80087ce:	b503      	push	{r0, r1, lr}
 80087d0:	4601      	mov	r1, r0
 80087d2:	ab03      	add	r3, sp, #12
 80087d4:	4805      	ldr	r0, [pc, #20]	; (80087ec <fiprintf+0x20>)
 80087d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087da:	6800      	ldr	r0, [r0, #0]
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	f000 f88d 	bl	80088fc <_vfiprintf_r>
 80087e2:	b002      	add	sp, #8
 80087e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e8:	b003      	add	sp, #12
 80087ea:	4770      	bx	lr
 80087ec:	2000000c 	.word	0x2000000c

080087f0 <__ascii_mbtowc>:
 80087f0:	b082      	sub	sp, #8
 80087f2:	b901      	cbnz	r1, 80087f6 <__ascii_mbtowc+0x6>
 80087f4:	a901      	add	r1, sp, #4
 80087f6:	b142      	cbz	r2, 800880a <__ascii_mbtowc+0x1a>
 80087f8:	b14b      	cbz	r3, 800880e <__ascii_mbtowc+0x1e>
 80087fa:	7813      	ldrb	r3, [r2, #0]
 80087fc:	600b      	str	r3, [r1, #0]
 80087fe:	7812      	ldrb	r2, [r2, #0]
 8008800:	1e10      	subs	r0, r2, #0
 8008802:	bf18      	it	ne
 8008804:	2001      	movne	r0, #1
 8008806:	b002      	add	sp, #8
 8008808:	4770      	bx	lr
 800880a:	4610      	mov	r0, r2
 800880c:	e7fb      	b.n	8008806 <__ascii_mbtowc+0x16>
 800880e:	f06f 0001 	mvn.w	r0, #1
 8008812:	e7f8      	b.n	8008806 <__ascii_mbtowc+0x16>

08008814 <memmove>:
 8008814:	4288      	cmp	r0, r1
 8008816:	b510      	push	{r4, lr}
 8008818:	eb01 0402 	add.w	r4, r1, r2
 800881c:	d902      	bls.n	8008824 <memmove+0x10>
 800881e:	4284      	cmp	r4, r0
 8008820:	4623      	mov	r3, r4
 8008822:	d807      	bhi.n	8008834 <memmove+0x20>
 8008824:	1e43      	subs	r3, r0, #1
 8008826:	42a1      	cmp	r1, r4
 8008828:	d008      	beq.n	800883c <memmove+0x28>
 800882a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008832:	e7f8      	b.n	8008826 <memmove+0x12>
 8008834:	4601      	mov	r1, r0
 8008836:	4402      	add	r2, r0
 8008838:	428a      	cmp	r2, r1
 800883a:	d100      	bne.n	800883e <memmove+0x2a>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008846:	e7f7      	b.n	8008838 <memmove+0x24>

08008848 <__malloc_lock>:
 8008848:	4801      	ldr	r0, [pc, #4]	; (8008850 <__malloc_lock+0x8>)
 800884a:	f000 bc15 	b.w	8009078 <__retarget_lock_acquire_recursive>
 800884e:	bf00      	nop
 8008850:	20000488 	.word	0x20000488

08008854 <__malloc_unlock>:
 8008854:	4801      	ldr	r0, [pc, #4]	; (800885c <__malloc_unlock+0x8>)
 8008856:	f000 bc10 	b.w	800907a <__retarget_lock_release_recursive>
 800885a:	bf00      	nop
 800885c:	20000488 	.word	0x20000488

08008860 <_realloc_r>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	4607      	mov	r7, r0
 8008864:	4614      	mov	r4, r2
 8008866:	460e      	mov	r6, r1
 8008868:	b921      	cbnz	r1, 8008874 <_realloc_r+0x14>
 800886a:	4611      	mov	r1, r2
 800886c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008870:	f7ff bdc8 	b.w	8008404 <_malloc_r>
 8008874:	b922      	cbnz	r2, 8008880 <_realloc_r+0x20>
 8008876:	f7ff fd79 	bl	800836c <_free_r>
 800887a:	4625      	mov	r5, r4
 800887c:	4628      	mov	r0, r5
 800887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008880:	f000 fc60 	bl	8009144 <_malloc_usable_size_r>
 8008884:	42a0      	cmp	r0, r4
 8008886:	d20f      	bcs.n	80088a8 <_realloc_r+0x48>
 8008888:	4621      	mov	r1, r4
 800888a:	4638      	mov	r0, r7
 800888c:	f7ff fdba 	bl	8008404 <_malloc_r>
 8008890:	4605      	mov	r5, r0
 8008892:	2800      	cmp	r0, #0
 8008894:	d0f2      	beq.n	800887c <_realloc_r+0x1c>
 8008896:	4631      	mov	r1, r6
 8008898:	4622      	mov	r2, r4
 800889a:	f7ff f9c9 	bl	8007c30 <memcpy>
 800889e:	4631      	mov	r1, r6
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff fd63 	bl	800836c <_free_r>
 80088a6:	e7e9      	b.n	800887c <_realloc_r+0x1c>
 80088a8:	4635      	mov	r5, r6
 80088aa:	e7e7      	b.n	800887c <_realloc_r+0x1c>

080088ac <__sfputc_r>:
 80088ac:	6893      	ldr	r3, [r2, #8]
 80088ae:	b410      	push	{r4}
 80088b0:	3b01      	subs	r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	6093      	str	r3, [r2, #8]
 80088b6:	da07      	bge.n	80088c8 <__sfputc_r+0x1c>
 80088b8:	6994      	ldr	r4, [r2, #24]
 80088ba:	42a3      	cmp	r3, r4
 80088bc:	db01      	blt.n	80088c2 <__sfputc_r+0x16>
 80088be:	290a      	cmp	r1, #10
 80088c0:	d102      	bne.n	80088c8 <__sfputc_r+0x1c>
 80088c2:	bc10      	pop	{r4}
 80088c4:	f000 b94a 	b.w	8008b5c <__swbuf_r>
 80088c8:	6813      	ldr	r3, [r2, #0]
 80088ca:	1c58      	adds	r0, r3, #1
 80088cc:	6010      	str	r0, [r2, #0]
 80088ce:	7019      	strb	r1, [r3, #0]
 80088d0:	4608      	mov	r0, r1
 80088d2:	bc10      	pop	{r4}
 80088d4:	4770      	bx	lr

080088d6 <__sfputs_r>:
 80088d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d8:	4606      	mov	r6, r0
 80088da:	460f      	mov	r7, r1
 80088dc:	4614      	mov	r4, r2
 80088de:	18d5      	adds	r5, r2, r3
 80088e0:	42ac      	cmp	r4, r5
 80088e2:	d101      	bne.n	80088e8 <__sfputs_r+0x12>
 80088e4:	2000      	movs	r0, #0
 80088e6:	e007      	b.n	80088f8 <__sfputs_r+0x22>
 80088e8:	463a      	mov	r2, r7
 80088ea:	4630      	mov	r0, r6
 80088ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f0:	f7ff ffdc 	bl	80088ac <__sfputc_r>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d1f3      	bne.n	80088e0 <__sfputs_r+0xa>
 80088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088fc <_vfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	460d      	mov	r5, r1
 8008902:	4614      	mov	r4, r2
 8008904:	4698      	mov	r8, r3
 8008906:	4606      	mov	r6, r0
 8008908:	b09d      	sub	sp, #116	; 0x74
 800890a:	b118      	cbz	r0, 8008914 <_vfiprintf_r+0x18>
 800890c:	6983      	ldr	r3, [r0, #24]
 800890e:	b90b      	cbnz	r3, 8008914 <_vfiprintf_r+0x18>
 8008910:	f000 fb14 	bl	8008f3c <__sinit>
 8008914:	4b89      	ldr	r3, [pc, #548]	; (8008b3c <_vfiprintf_r+0x240>)
 8008916:	429d      	cmp	r5, r3
 8008918:	d11b      	bne.n	8008952 <_vfiprintf_r+0x56>
 800891a:	6875      	ldr	r5, [r6, #4]
 800891c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800891e:	07d9      	lsls	r1, r3, #31
 8008920:	d405      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	059a      	lsls	r2, r3, #22
 8008926:	d402      	bmi.n	800892e <_vfiprintf_r+0x32>
 8008928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800892a:	f000 fba5 	bl	8009078 <__retarget_lock_acquire_recursive>
 800892e:	89ab      	ldrh	r3, [r5, #12]
 8008930:	071b      	lsls	r3, r3, #28
 8008932:	d501      	bpl.n	8008938 <_vfiprintf_r+0x3c>
 8008934:	692b      	ldr	r3, [r5, #16]
 8008936:	b9eb      	cbnz	r3, 8008974 <_vfiprintf_r+0x78>
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f96e 	bl	8008c1c <__swsetup_r>
 8008940:	b1c0      	cbz	r0, 8008974 <_vfiprintf_r+0x78>
 8008942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008944:	07dc      	lsls	r4, r3, #31
 8008946:	d50e      	bpl.n	8008966 <_vfiprintf_r+0x6a>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	b01d      	add	sp, #116	; 0x74
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	4b7b      	ldr	r3, [pc, #492]	; (8008b40 <_vfiprintf_r+0x244>)
 8008954:	429d      	cmp	r5, r3
 8008956:	d101      	bne.n	800895c <_vfiprintf_r+0x60>
 8008958:	68b5      	ldr	r5, [r6, #8]
 800895a:	e7df      	b.n	800891c <_vfiprintf_r+0x20>
 800895c:	4b79      	ldr	r3, [pc, #484]	; (8008b44 <_vfiprintf_r+0x248>)
 800895e:	429d      	cmp	r5, r3
 8008960:	bf08      	it	eq
 8008962:	68f5      	ldreq	r5, [r6, #12]
 8008964:	e7da      	b.n	800891c <_vfiprintf_r+0x20>
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	0598      	lsls	r0, r3, #22
 800896a:	d4ed      	bmi.n	8008948 <_vfiprintf_r+0x4c>
 800896c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800896e:	f000 fb84 	bl	800907a <__retarget_lock_release_recursive>
 8008972:	e7e9      	b.n	8008948 <_vfiprintf_r+0x4c>
 8008974:	2300      	movs	r3, #0
 8008976:	9309      	str	r3, [sp, #36]	; 0x24
 8008978:	2320      	movs	r3, #32
 800897a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800897e:	2330      	movs	r3, #48	; 0x30
 8008980:	f04f 0901 	mov.w	r9, #1
 8008984:	f8cd 800c 	str.w	r8, [sp, #12]
 8008988:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008b48 <_vfiprintf_r+0x24c>
 800898c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008990:	4623      	mov	r3, r4
 8008992:	469a      	mov	sl, r3
 8008994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008998:	b10a      	cbz	r2, 800899e <_vfiprintf_r+0xa2>
 800899a:	2a25      	cmp	r2, #37	; 0x25
 800899c:	d1f9      	bne.n	8008992 <_vfiprintf_r+0x96>
 800899e:	ebba 0b04 	subs.w	fp, sl, r4
 80089a2:	d00b      	beq.n	80089bc <_vfiprintf_r+0xc0>
 80089a4:	465b      	mov	r3, fp
 80089a6:	4622      	mov	r2, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff93 	bl	80088d6 <__sfputs_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	f000 80aa 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089b8:	445a      	add	r2, fp
 80089ba:	9209      	str	r2, [sp, #36]	; 0x24
 80089bc:	f89a 3000 	ldrb.w	r3, [sl]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 80a2 	beq.w	8008b0a <_vfiprintf_r+0x20e>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f04f 32ff 	mov.w	r2, #4294967295
 80089cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d0:	f10a 0a01 	add.w	sl, sl, #1
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089dc:	931a      	str	r3, [sp, #104]	; 0x68
 80089de:	4654      	mov	r4, sl
 80089e0:	2205      	movs	r2, #5
 80089e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e6:	4858      	ldr	r0, [pc, #352]	; (8008b48 <_vfiprintf_r+0x24c>)
 80089e8:	f7ff f914 	bl	8007c14 <memchr>
 80089ec:	9a04      	ldr	r2, [sp, #16]
 80089ee:	b9d8      	cbnz	r0, 8008a28 <_vfiprintf_r+0x12c>
 80089f0:	06d1      	lsls	r1, r2, #27
 80089f2:	bf44      	itt	mi
 80089f4:	2320      	movmi	r3, #32
 80089f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089fa:	0713      	lsls	r3, r2, #28
 80089fc:	bf44      	itt	mi
 80089fe:	232b      	movmi	r3, #43	; 0x2b
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a04:	f89a 3000 	ldrb.w	r3, [sl]
 8008a08:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0a:	d015      	beq.n	8008a38 <_vfiprintf_r+0x13c>
 8008a0c:	4654      	mov	r4, sl
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f04f 0c0a 	mov.w	ip, #10
 8008a14:	9a07      	ldr	r2, [sp, #28]
 8008a16:	4621      	mov	r1, r4
 8008a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a1c:	3b30      	subs	r3, #48	; 0x30
 8008a1e:	2b09      	cmp	r3, #9
 8008a20:	d94e      	bls.n	8008ac0 <_vfiprintf_r+0x1c4>
 8008a22:	b1b0      	cbz	r0, 8008a52 <_vfiprintf_r+0x156>
 8008a24:	9207      	str	r2, [sp, #28]
 8008a26:	e014      	b.n	8008a52 <_vfiprintf_r+0x156>
 8008a28:	eba0 0308 	sub.w	r3, r0, r8
 8008a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a30:	4313      	orrs	r3, r2
 8008a32:	46a2      	mov	sl, r4
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	e7d2      	b.n	80089de <_vfiprintf_r+0xe2>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	1d19      	adds	r1, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9103      	str	r1, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfbb      	ittet	lt
 8008a44:	425b      	neglt	r3, r3
 8008a46:	f042 0202 	orrlt.w	r2, r2, #2
 8008a4a:	9307      	strge	r3, [sp, #28]
 8008a4c:	9307      	strlt	r3, [sp, #28]
 8008a4e:	bfb8      	it	lt
 8008a50:	9204      	strlt	r2, [sp, #16]
 8008a52:	7823      	ldrb	r3, [r4, #0]
 8008a54:	2b2e      	cmp	r3, #46	; 0x2e
 8008a56:	d10c      	bne.n	8008a72 <_vfiprintf_r+0x176>
 8008a58:	7863      	ldrb	r3, [r4, #1]
 8008a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5c:	d135      	bne.n	8008aca <_vfiprintf_r+0x1ce>
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	3402      	adds	r4, #2
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	9203      	str	r2, [sp, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	bfb8      	it	lt
 8008a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a70:	9305      	str	r3, [sp, #20]
 8008a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b58 <_vfiprintf_r+0x25c>
 8008a76:	2203      	movs	r2, #3
 8008a78:	4650      	mov	r0, sl
 8008a7a:	7821      	ldrb	r1, [r4, #0]
 8008a7c:	f7ff f8ca 	bl	8007c14 <memchr>
 8008a80:	b140      	cbz	r0, 8008a94 <_vfiprintf_r+0x198>
 8008a82:	2340      	movs	r3, #64	; 0x40
 8008a84:	eba0 000a 	sub.w	r0, r0, sl
 8008a88:	fa03 f000 	lsl.w	r0, r3, r0
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	3401      	adds	r4, #1
 8008a90:	4303      	orrs	r3, r0
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a98:	2206      	movs	r2, #6
 8008a9a:	482c      	ldr	r0, [pc, #176]	; (8008b4c <_vfiprintf_r+0x250>)
 8008a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aa0:	f7ff f8b8 	bl	8007c14 <memchr>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d03f      	beq.n	8008b28 <_vfiprintf_r+0x22c>
 8008aa8:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <_vfiprintf_r+0x254>)
 8008aaa:	bb1b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x1f8>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	3307      	adds	r3, #7
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aba:	443b      	add	r3, r7
 8008abc:	9309      	str	r3, [sp, #36]	; 0x24
 8008abe:	e767      	b.n	8008990 <_vfiprintf_r+0x94>
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ac8:	e7a5      	b.n	8008a16 <_vfiprintf_r+0x11a>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f04f 0c0a 	mov.w	ip, #10
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	3401      	adds	r4, #1
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008adc:	3a30      	subs	r2, #48	; 0x30
 8008ade:	2a09      	cmp	r2, #9
 8008ae0:	d903      	bls.n	8008aea <_vfiprintf_r+0x1ee>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0c5      	beq.n	8008a72 <_vfiprintf_r+0x176>
 8008ae6:	9105      	str	r1, [sp, #20]
 8008ae8:	e7c3      	b.n	8008a72 <_vfiprintf_r+0x176>
 8008aea:	4604      	mov	r4, r0
 8008aec:	2301      	movs	r3, #1
 8008aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008af2:	e7f0      	b.n	8008ad6 <_vfiprintf_r+0x1da>
 8008af4:	ab03      	add	r3, sp, #12
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	4b15      	ldr	r3, [pc, #84]	; (8008b54 <_vfiprintf_r+0x258>)
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	f7fd fe1e 	bl	8006740 <_printf_float>
 8008b04:	4607      	mov	r7, r0
 8008b06:	1c78      	adds	r0, r7, #1
 8008b08:	d1d6      	bne.n	8008ab8 <_vfiprintf_r+0x1bc>
 8008b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0c:	07d9      	lsls	r1, r3, #31
 8008b0e:	d405      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b10:	89ab      	ldrh	r3, [r5, #12]
 8008b12:	059a      	lsls	r2, r3, #22
 8008b14:	d402      	bmi.n	8008b1c <_vfiprintf_r+0x220>
 8008b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b18:	f000 faaf 	bl	800907a <__retarget_lock_release_recursive>
 8008b1c:	89ab      	ldrh	r3, [r5, #12]
 8008b1e:	065b      	lsls	r3, r3, #25
 8008b20:	f53f af12 	bmi.w	8008948 <_vfiprintf_r+0x4c>
 8008b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b26:	e711      	b.n	800894c <_vfiprintf_r+0x50>
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4b08      	ldr	r3, [pc, #32]	; (8008b54 <_vfiprintf_r+0x258>)
 8008b32:	a904      	add	r1, sp, #16
 8008b34:	f7fe f8a0 	bl	8006c78 <_printf_i>
 8008b38:	e7e4      	b.n	8008b04 <_vfiprintf_r+0x208>
 8008b3a:	bf00      	nop
 8008b3c:	08009774 	.word	0x08009774
 8008b40:	08009794 	.word	0x08009794
 8008b44:	08009754 	.word	0x08009754
 8008b48:	080095fc 	.word	0x080095fc
 8008b4c:	08009606 	.word	0x08009606
 8008b50:	08006741 	.word	0x08006741
 8008b54:	080088d7 	.word	0x080088d7
 8008b58:	08009602 	.word	0x08009602

08008b5c <__swbuf_r>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	460e      	mov	r6, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	4605      	mov	r5, r0
 8008b64:	b118      	cbz	r0, 8008b6e <__swbuf_r+0x12>
 8008b66:	6983      	ldr	r3, [r0, #24]
 8008b68:	b90b      	cbnz	r3, 8008b6e <__swbuf_r+0x12>
 8008b6a:	f000 f9e7 	bl	8008f3c <__sinit>
 8008b6e:	4b21      	ldr	r3, [pc, #132]	; (8008bf4 <__swbuf_r+0x98>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	d12b      	bne.n	8008bcc <__swbuf_r+0x70>
 8008b74:	686c      	ldr	r4, [r5, #4]
 8008b76:	69a3      	ldr	r3, [r4, #24]
 8008b78:	60a3      	str	r3, [r4, #8]
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	071a      	lsls	r2, r3, #28
 8008b7e:	d52f      	bpl.n	8008be0 <__swbuf_r+0x84>
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	b36b      	cbz	r3, 8008be0 <__swbuf_r+0x84>
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	b2f6      	uxtb	r6, r6
 8008b8a:	1ac0      	subs	r0, r0, r3
 8008b8c:	6963      	ldr	r3, [r4, #20]
 8008b8e:	4637      	mov	r7, r6
 8008b90:	4283      	cmp	r3, r0
 8008b92:	dc04      	bgt.n	8008b9e <__swbuf_r+0x42>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 f93c 	bl	8008e14 <_fflush_r>
 8008b9c:	bb30      	cbnz	r0, 8008bec <__swbuf_r+0x90>
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	60a3      	str	r3, [r4, #8]
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	701e      	strb	r6, [r3, #0]
 8008bae:	6963      	ldr	r3, [r4, #20]
 8008bb0:	4283      	cmp	r3, r0
 8008bb2:	d004      	beq.n	8008bbe <__swbuf_r+0x62>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	07db      	lsls	r3, r3, #31
 8008bb8:	d506      	bpl.n	8008bc8 <__swbuf_r+0x6c>
 8008bba:	2e0a      	cmp	r6, #10
 8008bbc:	d104      	bne.n	8008bc8 <__swbuf_r+0x6c>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 f927 	bl	8008e14 <_fflush_r>
 8008bc6:	b988      	cbnz	r0, 8008bec <__swbuf_r+0x90>
 8008bc8:	4638      	mov	r0, r7
 8008bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <__swbuf_r+0x9c>)
 8008bce:	429c      	cmp	r4, r3
 8008bd0:	d101      	bne.n	8008bd6 <__swbuf_r+0x7a>
 8008bd2:	68ac      	ldr	r4, [r5, #8]
 8008bd4:	e7cf      	b.n	8008b76 <__swbuf_r+0x1a>
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <__swbuf_r+0xa0>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	bf08      	it	eq
 8008bdc:	68ec      	ldreq	r4, [r5, #12]
 8008bde:	e7ca      	b.n	8008b76 <__swbuf_r+0x1a>
 8008be0:	4621      	mov	r1, r4
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 f81a 	bl	8008c1c <__swsetup_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d0cb      	beq.n	8008b84 <__swbuf_r+0x28>
 8008bec:	f04f 37ff 	mov.w	r7, #4294967295
 8008bf0:	e7ea      	b.n	8008bc8 <__swbuf_r+0x6c>
 8008bf2:	bf00      	nop
 8008bf4:	08009774 	.word	0x08009774
 8008bf8:	08009794 	.word	0x08009794
 8008bfc:	08009754 	.word	0x08009754

08008c00 <__ascii_wctomb>:
 8008c00:	4603      	mov	r3, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	b141      	cbz	r1, 8008c18 <__ascii_wctomb+0x18>
 8008c06:	2aff      	cmp	r2, #255	; 0xff
 8008c08:	d904      	bls.n	8008c14 <__ascii_wctomb+0x14>
 8008c0a:	228a      	movs	r2, #138	; 0x8a
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	4770      	bx	lr
 8008c14:	2001      	movs	r0, #1
 8008c16:	700a      	strb	r2, [r1, #0]
 8008c18:	4770      	bx	lr
	...

08008c1c <__swsetup_r>:
 8008c1c:	4b32      	ldr	r3, [pc, #200]	; (8008ce8 <__swsetup_r+0xcc>)
 8008c1e:	b570      	push	{r4, r5, r6, lr}
 8008c20:	681d      	ldr	r5, [r3, #0]
 8008c22:	4606      	mov	r6, r0
 8008c24:	460c      	mov	r4, r1
 8008c26:	b125      	cbz	r5, 8008c32 <__swsetup_r+0x16>
 8008c28:	69ab      	ldr	r3, [r5, #24]
 8008c2a:	b913      	cbnz	r3, 8008c32 <__swsetup_r+0x16>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 f985 	bl	8008f3c <__sinit>
 8008c32:	4b2e      	ldr	r3, [pc, #184]	; (8008cec <__swsetup_r+0xd0>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	d10f      	bne.n	8008c58 <__swsetup_r+0x3c>
 8008c38:	686c      	ldr	r4, [r5, #4]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c40:	0719      	lsls	r1, r3, #28
 8008c42:	d42c      	bmi.n	8008c9e <__swsetup_r+0x82>
 8008c44:	06dd      	lsls	r5, r3, #27
 8008c46:	d411      	bmi.n	8008c6c <__swsetup_r+0x50>
 8008c48:	2309      	movs	r3, #9
 8008c4a:	6033      	str	r3, [r6, #0]
 8008c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	e03e      	b.n	8008cd6 <__swsetup_r+0xba>
 8008c58:	4b25      	ldr	r3, [pc, #148]	; (8008cf0 <__swsetup_r+0xd4>)
 8008c5a:	429c      	cmp	r4, r3
 8008c5c:	d101      	bne.n	8008c62 <__swsetup_r+0x46>
 8008c5e:	68ac      	ldr	r4, [r5, #8]
 8008c60:	e7eb      	b.n	8008c3a <__swsetup_r+0x1e>
 8008c62:	4b24      	ldr	r3, [pc, #144]	; (8008cf4 <__swsetup_r+0xd8>)
 8008c64:	429c      	cmp	r4, r3
 8008c66:	bf08      	it	eq
 8008c68:	68ec      	ldreq	r4, [r5, #12]
 8008c6a:	e7e6      	b.n	8008c3a <__swsetup_r+0x1e>
 8008c6c:	0758      	lsls	r0, r3, #29
 8008c6e:	d512      	bpl.n	8008c96 <__swsetup_r+0x7a>
 8008c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c72:	b141      	cbz	r1, 8008c86 <__swsetup_r+0x6a>
 8008c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c78:	4299      	cmp	r1, r3
 8008c7a:	d002      	beq.n	8008c82 <__swsetup_r+0x66>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7ff fb75 	bl	800836c <_free_r>
 8008c82:	2300      	movs	r3, #0
 8008c84:	6363      	str	r3, [r4, #52]	; 0x34
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c8c:	81a3      	strh	r3, [r4, #12]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	6063      	str	r3, [r4, #4]
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f043 0308 	orr.w	r3, r3, #8
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	b94b      	cbnz	r3, 8008cb6 <__swsetup_r+0x9a>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cac:	d003      	beq.n	8008cb6 <__swsetup_r+0x9a>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 fa07 	bl	80090c4 <__smakebuf_r>
 8008cb6:	89a0      	ldrh	r0, [r4, #12]
 8008cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cbc:	f010 0301 	ands.w	r3, r0, #1
 8008cc0:	d00a      	beq.n	8008cd8 <__swsetup_r+0xbc>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	6963      	ldr	r3, [r4, #20]
 8008cc8:	425b      	negs	r3, r3
 8008cca:	61a3      	str	r3, [r4, #24]
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	b943      	cbnz	r3, 8008ce2 <__swsetup_r+0xc6>
 8008cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cd4:	d1ba      	bne.n	8008c4c <__swsetup_r+0x30>
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	0781      	lsls	r1, r0, #30
 8008cda:	bf58      	it	pl
 8008cdc:	6963      	ldrpl	r3, [r4, #20]
 8008cde:	60a3      	str	r3, [r4, #8]
 8008ce0:	e7f4      	b.n	8008ccc <__swsetup_r+0xb0>
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	e7f7      	b.n	8008cd6 <__swsetup_r+0xba>
 8008ce6:	bf00      	nop
 8008ce8:	2000000c 	.word	0x2000000c
 8008cec:	08009774 	.word	0x08009774
 8008cf0:	08009794 	.word	0x08009794
 8008cf4:	08009754 	.word	0x08009754

08008cf8 <abort>:
 8008cf8:	2006      	movs	r0, #6
 8008cfa:	b508      	push	{r3, lr}
 8008cfc:	f000 fa52 	bl	80091a4 <raise>
 8008d00:	2001      	movs	r0, #1
 8008d02:	f7f9 f988 	bl	8002016 <_exit>
	...

08008d08 <__sflush_r>:
 8008d08:	898a      	ldrh	r2, [r1, #12]
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	4605      	mov	r5, r0
 8008d10:	0710      	lsls	r0, r2, #28
 8008d12:	460c      	mov	r4, r1
 8008d14:	d458      	bmi.n	8008dc8 <__sflush_r+0xc0>
 8008d16:	684b      	ldr	r3, [r1, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dc05      	bgt.n	8008d28 <__sflush_r+0x20>
 8008d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dc02      	bgt.n	8008d28 <__sflush_r+0x20>
 8008d22:	2000      	movs	r0, #0
 8008d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d0f9      	beq.n	8008d22 <__sflush_r+0x1a>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d34:	682f      	ldr	r7, [r5, #0]
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	d032      	beq.n	8008da0 <__sflush_r+0x98>
 8008d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	075a      	lsls	r2, r3, #29
 8008d40:	d505      	bpl.n	8008d4e <__sflush_r+0x46>
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	1ac0      	subs	r0, r0, r3
 8008d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d48:	b10b      	cbz	r3, 8008d4e <__sflush_r+0x46>
 8008d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d4c:	1ac0      	subs	r0, r0, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4602      	mov	r2, r0
 8008d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d54:	4628      	mov	r0, r5
 8008d56:	6a21      	ldr	r1, [r4, #32]
 8008d58:	47b0      	blx	r6
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	d106      	bne.n	8008d6e <__sflush_r+0x66>
 8008d60:	6829      	ldr	r1, [r5, #0]
 8008d62:	291d      	cmp	r1, #29
 8008d64:	d82c      	bhi.n	8008dc0 <__sflush_r+0xb8>
 8008d66:	4a2a      	ldr	r2, [pc, #168]	; (8008e10 <__sflush_r+0x108>)
 8008d68:	40ca      	lsrs	r2, r1
 8008d6a:	07d6      	lsls	r6, r2, #31
 8008d6c:	d528      	bpl.n	8008dc0 <__sflush_r+0xb8>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	6062      	str	r2, [r4, #4]
 8008d72:	6922      	ldr	r2, [r4, #16]
 8008d74:	04d9      	lsls	r1, r3, #19
 8008d76:	6022      	str	r2, [r4, #0]
 8008d78:	d504      	bpl.n	8008d84 <__sflush_r+0x7c>
 8008d7a:	1c42      	adds	r2, r0, #1
 8008d7c:	d101      	bne.n	8008d82 <__sflush_r+0x7a>
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	b903      	cbnz	r3, 8008d84 <__sflush_r+0x7c>
 8008d82:	6560      	str	r0, [r4, #84]	; 0x54
 8008d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d86:	602f      	str	r7, [r5, #0]
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	d0ca      	beq.n	8008d22 <__sflush_r+0x1a>
 8008d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d90:	4299      	cmp	r1, r3
 8008d92:	d002      	beq.n	8008d9a <__sflush_r+0x92>
 8008d94:	4628      	mov	r0, r5
 8008d96:	f7ff fae9 	bl	800836c <_free_r>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d9e:	e7c1      	b.n	8008d24 <__sflush_r+0x1c>
 8008da0:	6a21      	ldr	r1, [r4, #32]
 8008da2:	2301      	movs	r3, #1
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b0      	blx	r6
 8008da8:	1c41      	adds	r1, r0, #1
 8008daa:	d1c7      	bne.n	8008d3c <__sflush_r+0x34>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0c4      	beq.n	8008d3c <__sflush_r+0x34>
 8008db2:	2b1d      	cmp	r3, #29
 8008db4:	d001      	beq.n	8008dba <__sflush_r+0xb2>
 8008db6:	2b16      	cmp	r3, #22
 8008db8:	d101      	bne.n	8008dbe <__sflush_r+0xb6>
 8008dba:	602f      	str	r7, [r5, #0]
 8008dbc:	e7b1      	b.n	8008d22 <__sflush_r+0x1a>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	e7ad      	b.n	8008d24 <__sflush_r+0x1c>
 8008dc8:	690f      	ldr	r7, [r1, #16]
 8008dca:	2f00      	cmp	r7, #0
 8008dcc:	d0a9      	beq.n	8008d22 <__sflush_r+0x1a>
 8008dce:	0793      	lsls	r3, r2, #30
 8008dd0:	bf18      	it	ne
 8008dd2:	2300      	movne	r3, #0
 8008dd4:	680e      	ldr	r6, [r1, #0]
 8008dd6:	bf08      	it	eq
 8008dd8:	694b      	ldreq	r3, [r1, #20]
 8008dda:	eba6 0807 	sub.w	r8, r6, r7
 8008dde:	600f      	str	r7, [r1, #0]
 8008de0:	608b      	str	r3, [r1, #8]
 8008de2:	f1b8 0f00 	cmp.w	r8, #0
 8008de6:	dd9c      	ble.n	8008d22 <__sflush_r+0x1a>
 8008de8:	4643      	mov	r3, r8
 8008dea:	463a      	mov	r2, r7
 8008dec:	4628      	mov	r0, r5
 8008dee:	6a21      	ldr	r1, [r4, #32]
 8008df0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df2:	47b0      	blx	r6
 8008df4:	2800      	cmp	r0, #0
 8008df6:	dc06      	bgt.n	8008e06 <__sflush_r+0xfe>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	e78e      	b.n	8008d24 <__sflush_r+0x1c>
 8008e06:	4407      	add	r7, r0
 8008e08:	eba8 0800 	sub.w	r8, r8, r0
 8008e0c:	e7e9      	b.n	8008de2 <__sflush_r+0xda>
 8008e0e:	bf00      	nop
 8008e10:	20400001 	.word	0x20400001

08008e14 <_fflush_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	690b      	ldr	r3, [r1, #16]
 8008e18:	4605      	mov	r5, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	b913      	cbnz	r3, 8008e24 <_fflush_r+0x10>
 8008e1e:	2500      	movs	r5, #0
 8008e20:	4628      	mov	r0, r5
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	b118      	cbz	r0, 8008e2e <_fflush_r+0x1a>
 8008e26:	6983      	ldr	r3, [r0, #24]
 8008e28:	b90b      	cbnz	r3, 8008e2e <_fflush_r+0x1a>
 8008e2a:	f000 f887 	bl	8008f3c <__sinit>
 8008e2e:	4b14      	ldr	r3, [pc, #80]	; (8008e80 <_fflush_r+0x6c>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	d11b      	bne.n	8008e6c <_fflush_r+0x58>
 8008e34:	686c      	ldr	r4, [r5, #4]
 8008e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0ef      	beq.n	8008e1e <_fflush_r+0xa>
 8008e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e40:	07d0      	lsls	r0, r2, #31
 8008e42:	d404      	bmi.n	8008e4e <_fflush_r+0x3a>
 8008e44:	0599      	lsls	r1, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_fflush_r+0x3a>
 8008e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4a:	f000 f915 	bl	8009078 <__retarget_lock_acquire_recursive>
 8008e4e:	4628      	mov	r0, r5
 8008e50:	4621      	mov	r1, r4
 8008e52:	f7ff ff59 	bl	8008d08 <__sflush_r>
 8008e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e58:	4605      	mov	r5, r0
 8008e5a:	07da      	lsls	r2, r3, #31
 8008e5c:	d4e0      	bmi.n	8008e20 <_fflush_r+0xc>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	059b      	lsls	r3, r3, #22
 8008e62:	d4dd      	bmi.n	8008e20 <_fflush_r+0xc>
 8008e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e66:	f000 f908 	bl	800907a <__retarget_lock_release_recursive>
 8008e6a:	e7d9      	b.n	8008e20 <_fflush_r+0xc>
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <_fflush_r+0x70>)
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	d101      	bne.n	8008e76 <_fflush_r+0x62>
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	e7df      	b.n	8008e36 <_fflush_r+0x22>
 8008e76:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <_fflush_r+0x74>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	bf08      	it	eq
 8008e7c:	68ec      	ldreq	r4, [r5, #12]
 8008e7e:	e7da      	b.n	8008e36 <_fflush_r+0x22>
 8008e80:	08009774 	.word	0x08009774
 8008e84:	08009794 	.word	0x08009794
 8008e88:	08009754 	.word	0x08009754

08008e8c <std>:
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	4604      	mov	r4, r0
 8008e92:	e9c0 3300 	strd	r3, r3, [r0]
 8008e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e9a:	6083      	str	r3, [r0, #8]
 8008e9c:	8181      	strh	r1, [r0, #12]
 8008e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8008ea0:	81c2      	strh	r2, [r0, #14]
 8008ea2:	6183      	str	r3, [r0, #24]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	305c      	adds	r0, #92	; 0x5c
 8008eaa:	f7fd fba3 	bl	80065f4 <memset>
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <std+0x38>)
 8008eb0:	6224      	str	r4, [r4, #32]
 8008eb2:	6263      	str	r3, [r4, #36]	; 0x24
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <std+0x3c>)
 8008eb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eb8:	4b04      	ldr	r3, [pc, #16]	; (8008ecc <std+0x40>)
 8008eba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ebc:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <std+0x44>)
 8008ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	bf00      	nop
 8008ec4:	080091dd 	.word	0x080091dd
 8008ec8:	080091ff 	.word	0x080091ff
 8008ecc:	08009237 	.word	0x08009237
 8008ed0:	0800925b 	.word	0x0800925b

08008ed4 <_cleanup_r>:
 8008ed4:	4901      	ldr	r1, [pc, #4]	; (8008edc <_cleanup_r+0x8>)
 8008ed6:	f000 b8af 	b.w	8009038 <_fwalk_reent>
 8008eda:	bf00      	nop
 8008edc:	08008e15 	.word	0x08008e15

08008ee0 <__sfmoreglue>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	2568      	movs	r5, #104	; 0x68
 8008ee4:	1e4a      	subs	r2, r1, #1
 8008ee6:	4355      	muls	r5, r2
 8008ee8:	460e      	mov	r6, r1
 8008eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008eee:	f7ff fa89 	bl	8008404 <_malloc_r>
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	b140      	cbz	r0, 8008f08 <__sfmoreglue+0x28>
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8008efc:	300c      	adds	r0, #12
 8008efe:	60a0      	str	r0, [r4, #8]
 8008f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f04:	f7fd fb76 	bl	80065f4 <memset>
 8008f08:	4620      	mov	r0, r4
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}

08008f0c <__sfp_lock_acquire>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	; (8008f14 <__sfp_lock_acquire+0x8>)
 8008f0e:	f000 b8b3 	b.w	8009078 <__retarget_lock_acquire_recursive>
 8008f12:	bf00      	nop
 8008f14:	2000048c 	.word	0x2000048c

08008f18 <__sfp_lock_release>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__sfp_lock_release+0x8>)
 8008f1a:	f000 b8ae 	b.w	800907a <__retarget_lock_release_recursive>
 8008f1e:	bf00      	nop
 8008f20:	2000048c 	.word	0x2000048c

08008f24 <__sinit_lock_acquire>:
 8008f24:	4801      	ldr	r0, [pc, #4]	; (8008f2c <__sinit_lock_acquire+0x8>)
 8008f26:	f000 b8a7 	b.w	8009078 <__retarget_lock_acquire_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	20000487 	.word	0x20000487

08008f30 <__sinit_lock_release>:
 8008f30:	4801      	ldr	r0, [pc, #4]	; (8008f38 <__sinit_lock_release+0x8>)
 8008f32:	f000 b8a2 	b.w	800907a <__retarget_lock_release_recursive>
 8008f36:	bf00      	nop
 8008f38:	20000487 	.word	0x20000487

08008f3c <__sinit>:
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	4604      	mov	r4, r0
 8008f40:	f7ff fff0 	bl	8008f24 <__sinit_lock_acquire>
 8008f44:	69a3      	ldr	r3, [r4, #24]
 8008f46:	b11b      	cbz	r3, 8008f50 <__sinit+0x14>
 8008f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f4c:	f7ff bff0 	b.w	8008f30 <__sinit_lock_release>
 8008f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f54:	6523      	str	r3, [r4, #80]	; 0x50
 8008f56:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <__sinit+0x68>)
 8008f58:	4a13      	ldr	r2, [pc, #76]	; (8008fa8 <__sinit+0x6c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f5e:	42a3      	cmp	r3, r4
 8008f60:	bf08      	it	eq
 8008f62:	2301      	moveq	r3, #1
 8008f64:	4620      	mov	r0, r4
 8008f66:	bf08      	it	eq
 8008f68:	61a3      	streq	r3, [r4, #24]
 8008f6a:	f000 f81f 	bl	8008fac <__sfp>
 8008f6e:	6060      	str	r0, [r4, #4]
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 f81b 	bl	8008fac <__sfp>
 8008f76:	60a0      	str	r0, [r4, #8]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 f817 	bl	8008fac <__sfp>
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2104      	movs	r1, #4
 8008f82:	60e0      	str	r0, [r4, #12]
 8008f84:	6860      	ldr	r0, [r4, #4]
 8008f86:	f7ff ff81 	bl	8008e8c <std>
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	2109      	movs	r1, #9
 8008f8e:	68a0      	ldr	r0, [r4, #8]
 8008f90:	f7ff ff7c 	bl	8008e8c <std>
 8008f94:	2202      	movs	r2, #2
 8008f96:	2112      	movs	r1, #18
 8008f98:	68e0      	ldr	r0, [r4, #12]
 8008f9a:	f7ff ff77 	bl	8008e8c <std>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	61a3      	str	r3, [r4, #24]
 8008fa2:	e7d1      	b.n	8008f48 <__sinit+0xc>
 8008fa4:	080093d4 	.word	0x080093d4
 8008fa8:	08008ed5 	.word	0x08008ed5

08008fac <__sfp>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	4607      	mov	r7, r0
 8008fb0:	f7ff ffac 	bl	8008f0c <__sfp_lock_acquire>
 8008fb4:	4b1e      	ldr	r3, [pc, #120]	; (8009030 <__sfp+0x84>)
 8008fb6:	681e      	ldr	r6, [r3, #0]
 8008fb8:	69b3      	ldr	r3, [r6, #24]
 8008fba:	b913      	cbnz	r3, 8008fc2 <__sfp+0x16>
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7ff ffbd 	bl	8008f3c <__sinit>
 8008fc2:	3648      	adds	r6, #72	; 0x48
 8008fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	d503      	bpl.n	8008fd4 <__sfp+0x28>
 8008fcc:	6833      	ldr	r3, [r6, #0]
 8008fce:	b30b      	cbz	r3, 8009014 <__sfp+0x68>
 8008fd0:	6836      	ldr	r6, [r6, #0]
 8008fd2:	e7f7      	b.n	8008fc4 <__sfp+0x18>
 8008fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fd8:	b9d5      	cbnz	r5, 8009010 <__sfp+0x64>
 8008fda:	4b16      	ldr	r3, [pc, #88]	; (8009034 <__sfp+0x88>)
 8008fdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fe0:	60e3      	str	r3, [r4, #12]
 8008fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8008fe4:	f000 f847 	bl	8009076 <__retarget_lock_init_recursive>
 8008fe8:	f7ff ff96 	bl	8008f18 <__sfp_lock_release>
 8008fec:	2208      	movs	r2, #8
 8008fee:	4629      	mov	r1, r5
 8008ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ff8:	6025      	str	r5, [r4, #0]
 8008ffa:	61a5      	str	r5, [r4, #24]
 8008ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009000:	f7fd faf8 	bl	80065f4 <memset>
 8009004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800900c:	4620      	mov	r0, r4
 800900e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009010:	3468      	adds	r4, #104	; 0x68
 8009012:	e7d9      	b.n	8008fc8 <__sfp+0x1c>
 8009014:	2104      	movs	r1, #4
 8009016:	4638      	mov	r0, r7
 8009018:	f7ff ff62 	bl	8008ee0 <__sfmoreglue>
 800901c:	4604      	mov	r4, r0
 800901e:	6030      	str	r0, [r6, #0]
 8009020:	2800      	cmp	r0, #0
 8009022:	d1d5      	bne.n	8008fd0 <__sfp+0x24>
 8009024:	f7ff ff78 	bl	8008f18 <__sfp_lock_release>
 8009028:	230c      	movs	r3, #12
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	e7ee      	b.n	800900c <__sfp+0x60>
 800902e:	bf00      	nop
 8009030:	080093d4 	.word	0x080093d4
 8009034:	ffff0001 	.word	0xffff0001

08009038 <_fwalk_reent>:
 8009038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800903c:	4606      	mov	r6, r0
 800903e:	4688      	mov	r8, r1
 8009040:	2700      	movs	r7, #0
 8009042:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800904a:	f1b9 0901 	subs.w	r9, r9, #1
 800904e:	d505      	bpl.n	800905c <_fwalk_reent+0x24>
 8009050:	6824      	ldr	r4, [r4, #0]
 8009052:	2c00      	cmp	r4, #0
 8009054:	d1f7      	bne.n	8009046 <_fwalk_reent+0xe>
 8009056:	4638      	mov	r0, r7
 8009058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905c:	89ab      	ldrh	r3, [r5, #12]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d907      	bls.n	8009072 <_fwalk_reent+0x3a>
 8009062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009066:	3301      	adds	r3, #1
 8009068:	d003      	beq.n	8009072 <_fwalk_reent+0x3a>
 800906a:	4629      	mov	r1, r5
 800906c:	4630      	mov	r0, r6
 800906e:	47c0      	blx	r8
 8009070:	4307      	orrs	r7, r0
 8009072:	3568      	adds	r5, #104	; 0x68
 8009074:	e7e9      	b.n	800904a <_fwalk_reent+0x12>

08009076 <__retarget_lock_init_recursive>:
 8009076:	4770      	bx	lr

08009078 <__retarget_lock_acquire_recursive>:
 8009078:	4770      	bx	lr

0800907a <__retarget_lock_release_recursive>:
 800907a:	4770      	bx	lr

0800907c <__swhatbuf_r>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	460e      	mov	r6, r1
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	4614      	mov	r4, r2
 8009086:	2900      	cmp	r1, #0
 8009088:	461d      	mov	r5, r3
 800908a:	b096      	sub	sp, #88	; 0x58
 800908c:	da07      	bge.n	800909e <__swhatbuf_r+0x22>
 800908e:	2300      	movs	r3, #0
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	89b3      	ldrh	r3, [r6, #12]
 8009094:	061a      	lsls	r2, r3, #24
 8009096:	d410      	bmi.n	80090ba <__swhatbuf_r+0x3e>
 8009098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800909c:	e00e      	b.n	80090bc <__swhatbuf_r+0x40>
 800909e:	466a      	mov	r2, sp
 80090a0:	f000 f902 	bl	80092a8 <_fstat_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dbf2      	blt.n	800908e <__swhatbuf_r+0x12>
 80090a8:	9a01      	ldr	r2, [sp, #4]
 80090aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090b2:	425a      	negs	r2, r3
 80090b4:	415a      	adcs	r2, r3
 80090b6:	602a      	str	r2, [r5, #0]
 80090b8:	e7ee      	b.n	8009098 <__swhatbuf_r+0x1c>
 80090ba:	2340      	movs	r3, #64	; 0x40
 80090bc:	2000      	movs	r0, #0
 80090be:	6023      	str	r3, [r4, #0]
 80090c0:	b016      	add	sp, #88	; 0x58
 80090c2:	bd70      	pop	{r4, r5, r6, pc}

080090c4 <__smakebuf_r>:
 80090c4:	898b      	ldrh	r3, [r1, #12]
 80090c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090c8:	079d      	lsls	r5, r3, #30
 80090ca:	4606      	mov	r6, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	d507      	bpl.n	80090e0 <__smakebuf_r+0x1c>
 80090d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	2301      	movs	r3, #1
 80090da:	6163      	str	r3, [r4, #20]
 80090dc:	b002      	add	sp, #8
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	466a      	mov	r2, sp
 80090e2:	ab01      	add	r3, sp, #4
 80090e4:	f7ff ffca 	bl	800907c <__swhatbuf_r>
 80090e8:	9900      	ldr	r1, [sp, #0]
 80090ea:	4605      	mov	r5, r0
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7ff f989 	bl	8008404 <_malloc_r>
 80090f2:	b948      	cbnz	r0, 8009108 <__smakebuf_r+0x44>
 80090f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f8:	059a      	lsls	r2, r3, #22
 80090fa:	d4ef      	bmi.n	80090dc <__smakebuf_r+0x18>
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	f043 0302 	orr.w	r3, r3, #2
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	e7e3      	b.n	80090d0 <__smakebuf_r+0xc>
 8009108:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <__smakebuf_r+0x7c>)
 800910a:	62b3      	str	r3, [r6, #40]	; 0x28
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	6020      	str	r0, [r4, #0]
 8009110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	9b00      	ldr	r3, [sp, #0]
 8009118:	6120      	str	r0, [r4, #16]
 800911a:	6163      	str	r3, [r4, #20]
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	b15b      	cbz	r3, 8009138 <__smakebuf_r+0x74>
 8009120:	4630      	mov	r0, r6
 8009122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009126:	f000 f8d1 	bl	80092cc <_isatty_r>
 800912a:	b128      	cbz	r0, 8009138 <__smakebuf_r+0x74>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	f043 0301 	orr.w	r3, r3, #1
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	89a0      	ldrh	r0, [r4, #12]
 800913a:	4305      	orrs	r5, r0
 800913c:	81a5      	strh	r5, [r4, #12]
 800913e:	e7cd      	b.n	80090dc <__smakebuf_r+0x18>
 8009140:	08008ed5 	.word	0x08008ed5

08009144 <_malloc_usable_size_r>:
 8009144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009148:	1f18      	subs	r0, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	bfbc      	itt	lt
 800914e:	580b      	ldrlt	r3, [r1, r0]
 8009150:	18c0      	addlt	r0, r0, r3
 8009152:	4770      	bx	lr

08009154 <_raise_r>:
 8009154:	291f      	cmp	r1, #31
 8009156:	b538      	push	{r3, r4, r5, lr}
 8009158:	4604      	mov	r4, r0
 800915a:	460d      	mov	r5, r1
 800915c:	d904      	bls.n	8009168 <_raise_r+0x14>
 800915e:	2316      	movs	r3, #22
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	f04f 30ff 	mov.w	r0, #4294967295
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800916a:	b112      	cbz	r2, 8009172 <_raise_r+0x1e>
 800916c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009170:	b94b      	cbnz	r3, 8009186 <_raise_r+0x32>
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f830 	bl	80091d8 <_getpid_r>
 8009178:	462a      	mov	r2, r5
 800917a:	4601      	mov	r1, r0
 800917c:	4620      	mov	r0, r4
 800917e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009182:	f000 b817 	b.w	80091b4 <_kill_r>
 8009186:	2b01      	cmp	r3, #1
 8009188:	d00a      	beq.n	80091a0 <_raise_r+0x4c>
 800918a:	1c59      	adds	r1, r3, #1
 800918c:	d103      	bne.n	8009196 <_raise_r+0x42>
 800918e:	2316      	movs	r3, #22
 8009190:	6003      	str	r3, [r0, #0]
 8009192:	2001      	movs	r0, #1
 8009194:	e7e7      	b.n	8009166 <_raise_r+0x12>
 8009196:	2400      	movs	r4, #0
 8009198:	4628      	mov	r0, r5
 800919a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800919e:	4798      	blx	r3
 80091a0:	2000      	movs	r0, #0
 80091a2:	e7e0      	b.n	8009166 <_raise_r+0x12>

080091a4 <raise>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <raise+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f7ff bfd3 	b.w	8009154 <_raise_r>
 80091ae:	bf00      	nop
 80091b0:	2000000c 	.word	0x2000000c

080091b4 <_kill_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	2300      	movs	r3, #0
 80091b8:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_kill_r+0x20>)
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f7f8 ff18 	bl	8001ff6 <_kill>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	d102      	bne.n	80091d0 <_kill_r+0x1c>
 80091ca:	682b      	ldr	r3, [r5, #0]
 80091cc:	b103      	cbz	r3, 80091d0 <_kill_r+0x1c>
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	20000480 	.word	0x20000480

080091d8 <_getpid_r>:
 80091d8:	f7f8 bf06 	b.w	8001fe8 <_getpid>

080091dc <__sread>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	460c      	mov	r4, r1
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	f000 f894 	bl	8009310 <_read_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	bfab      	itete	ge
 80091ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ee:	89a3      	ldrhlt	r3, [r4, #12]
 80091f0:	181b      	addge	r3, r3, r0
 80091f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091f6:	bfac      	ite	ge
 80091f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091fa:	81a3      	strhlt	r3, [r4, #12]
 80091fc:	bd10      	pop	{r4, pc}

080091fe <__swrite>:
 80091fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	461f      	mov	r7, r3
 8009204:	898b      	ldrh	r3, [r1, #12]
 8009206:	4605      	mov	r5, r0
 8009208:	05db      	lsls	r3, r3, #23
 800920a:	460c      	mov	r4, r1
 800920c:	4616      	mov	r6, r2
 800920e:	d505      	bpl.n	800921c <__swrite+0x1e>
 8009210:	2302      	movs	r3, #2
 8009212:	2200      	movs	r2, #0
 8009214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009218:	f000 f868 	bl	80092ec <_lseek_r>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	4632      	mov	r2, r6
 8009220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	4628      	mov	r0, r5
 8009228:	463b      	mov	r3, r7
 800922a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800922e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009232:	f000 b817 	b.w	8009264 <_write_r>

08009236 <__sseek>:
 8009236:	b510      	push	{r4, lr}
 8009238:	460c      	mov	r4, r1
 800923a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923e:	f000 f855 	bl	80092ec <_lseek_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	bf15      	itete	ne
 8009248:	6560      	strne	r0, [r4, #84]	; 0x54
 800924a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009252:	81a3      	strheq	r3, [r4, #12]
 8009254:	bf18      	it	ne
 8009256:	81a3      	strhne	r3, [r4, #12]
 8009258:	bd10      	pop	{r4, pc}

0800925a <__sclose>:
 800925a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925e:	f000 b813 	b.w	8009288 <_close_r>
	...

08009264 <_write_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	2200      	movs	r2, #0
 800926e:	4d05      	ldr	r5, [pc, #20]	; (8009284 <_write_r+0x20>)
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f8 fef6 	bl	8002064 <_write>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_write_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_write_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20000480 	.word	0x20000480

08009288 <_close_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	2300      	movs	r3, #0
 800928c:	4d05      	ldr	r5, [pc, #20]	; (80092a4 <_close_r+0x1c>)
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	f7f8 ff02 	bl	800209c <_close>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_close_r+0x1a>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_close_r+0x1a>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	20000480 	.word	0x20000480

080092a8 <_fstat_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	2300      	movs	r3, #0
 80092ac:	4d06      	ldr	r5, [pc, #24]	; (80092c8 <_fstat_r+0x20>)
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	f7f8 fefc 	bl	80020b2 <_fstat>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	d102      	bne.n	80092c4 <_fstat_r+0x1c>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	b103      	cbz	r3, 80092c4 <_fstat_r+0x1c>
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	bf00      	nop
 80092c8:	20000480 	.word	0x20000480

080092cc <_isatty_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	2300      	movs	r3, #0
 80092d0:	4d05      	ldr	r5, [pc, #20]	; (80092e8 <_isatty_r+0x1c>)
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	f7f8 fefa 	bl	80020d0 <_isatty>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d102      	bne.n	80092e6 <_isatty_r+0x1a>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	b103      	cbz	r3, 80092e6 <_isatty_r+0x1a>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	20000480 	.word	0x20000480

080092ec <_lseek_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	2200      	movs	r2, #0
 80092f6:	4d05      	ldr	r5, [pc, #20]	; (800930c <_lseek_r+0x20>)
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f7f8 fef2 	bl	80020e4 <_lseek>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_lseek_r+0x1e>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_lseek_r+0x1e>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	20000480 	.word	0x20000480

08009310 <_read_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	2200      	movs	r2, #0
 800931a:	4d05      	ldr	r5, [pc, #20]	; (8009330 <_read_r+0x20>)
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7f8 fe83 	bl	800202a <_read>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_read_r+0x1e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_read_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	20000480 	.word	0x20000480

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
