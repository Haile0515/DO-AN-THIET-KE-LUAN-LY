#define BLYNK_TEMPLATE_ID "TMPL67sPHdT24"
#define BLYNK_TEMPLATE_NAME "LED CONTROL"
#define BLYNK_AUTH_TOKEN "Fv2FIC-PUVvwCOO6gaKbl-CSozDgZEin"

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <HardwareSerial.h>

// WiFi credentials
char ssid[] = "ACLAB";
char pass[] = "ACLAB2023";

// Pin configuration
const int updateLed1 = 2;
const int updateLed2 = 4;

// Timer variables
BlynkTimer timer;
bool isLedOn = false;

// Simulated sensor data
float temperature = 30.50;
float humidity = 60.50;

// Virtual pins for Blynk
#define TEMP_VPIN V0
#define HUMIDITY_VPIN V1
#define LED1_VPIN V2
#define LED2_VPIN V3

// UART configuration
#define RXD2 25  // GPIO25 as UART RX
#define TXD2 26  // GPIO26 as UART TX
HardwareSerial STM32(2);  // Use UART2 for STM32 communication

void connectWiFi() {
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi.");
}

void connectBlynk() {
  while (!Blynk.connected()) {
    Blynk.run();
    delay(100);
  }
  Serial.println("Connected to Blynk.");
}

void sendData() {
  if (STM32.available()) {
    String data = STM32.readStringUntil('\n');
    Serial.print("Received data: ");
    Serial.println(data);

    parseData(data);
    Blynk.virtualWrite(TEMP_VPIN, temperature);
    Blynk.virtualWrite(HUMIDITY_VPIN, humidity);

    digitalWrite(updateLed1, HIGH);
    digitalWrite(updateLed2, HIGH);
    delay(500);
    digitalWrite(updateLed1, LOW);
    digitalWrite(updateLed2, LOW);
  }
}

void setup() {
  // Serial communication for debugging
  Serial.begin(9600);

  // WiFi connection
  WiFi.begin(ssid, pass);
  connectWiFi();

  // Blynk connection
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  connectBlynk();

  // LED pin modes
  pinMode(updateLed1, OUTPUT);
  pinMode(updateLed2, OUTPUT);
  digitalWrite(updateLed1, LOW);
  digitalWrite(updateLed2, LOW);

  // STM32 UART setup
  STM32.begin(9600, SERIAL_8N1, RXD2, TXD2);
  Serial.println("UART initialized.");

  // Setup timer
  timer.setInterval(2000L, sendData);
}

void loop() {
  Blynk.run();
  timer.run();
}

//Function to parse data from STM32
void parseData(String data) {
  int separatorIndex = data.indexOf(';');
  if (separatorIndex != -1 && data.length() > separatorIndex + 1) {
    // Extract temperature and humidity
    String tempStr = data.substring(0, separatorIndex);
    String humidStr = data.substring(separatorIndex + 1);

    // Convert to float
    temperature = tempStr.toFloat();
    humidity = humidStr.toFloat();

    // Print parsed values
    Serial.print("Parsed temperature: ");
    Serial.println(temperature);
    Serial.print("Parsed humidity: ");
    Serial.println(humidity);
  } else {
    Serial.println("Invalid data format. Expected 'temperature;humidity'.");
  }
}
